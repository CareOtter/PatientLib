
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : FamilyProblem_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "FamilyProblem_reflection.h"
#include <bond/core/exception.h>

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace FamilyRelationshipType
    {
        const
        std::map<std::string, enum FamilyRelationshipType> _name_to_value_FamilyRelationshipType =
            boost::assign::map_list_of<std::string, enum FamilyRelationshipType>
                ("Father", Father)
                ("Mother", Mother)
                ("Grandfather", Grandfather)
                ("Grandmother", Grandmother)
                ("Aunt", Aunt)
                ("Uncle", Uncle)
                ("Son", Son)
                ("Daughter", Daughter)
                ("Grandson", Grandson)
                ("Granddaughter", Granddaughter)
                ("Brother", Brother)
                ("Sister", Sister)
                ("Niece", Niece)
                ("Nephew", Nephew);

        const
        std::map<enum FamilyRelationshipType, std::string> _value_to_name_FamilyRelationshipType =
            bond::reverse_map(_name_to_value_FamilyRelationshipType);

        const std::string& ToString(enum FamilyRelationshipType value)
        {
            std::map<enum FamilyRelationshipType, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "FamilyRelationshipType");

            return it->second;
        }

        void FromString(const std::string& name, enum FamilyRelationshipType& value)
        {
            std::map<std::string, enum FamilyRelationshipType>::const_iterator it =
                _name_to_value_FamilyRelationshipType.find(name);

            if (_name_to_value_FamilyRelationshipType.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "FamilyRelationshipType");

            value = it->second;
        }

    } // namespace FamilyRelationshipType
    } // namespace _bond_enumerators

    
    const bond::Metadata FamilyProblem::Schema::metadata
        = FamilyProblem::Schema::GetMetadata();
    
    const bond::Metadata FamilyProblem::Schema::s_RelationshipType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "RelationshipType");
    
    const bond::Metadata FamilyProblem::Schema::s_DateOfBirth_metadata
        = bond::reflection::MetadataInit(bond::nothing, "DateOfBirth");
    
    const bond::Metadata FamilyProblem::Schema::s_IsDeceased_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsDeceased");

    
} // namespace Schemas
} // namespace HealthCare
