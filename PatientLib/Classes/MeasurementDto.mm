//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Measurement_reflection.h>
#import <MeasurementDto.h>

@implementation MeasurementDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Measurement* castObj = (::Measurement*)obj;
    if (!castObj->Value.is_nothing() && castObj->Value.value().hasvalue()) self.value =  [[NSString alloc] initWithUTF8String: castObj->Value.value().value().c_str()];
    if (!castObj->Units.is_nothing() && castObj->Units.value().hasvalue()) self.units =  [[NSString alloc] initWithUTF8String: castObj->Units.value().value().c_str()];
    if (!castObj->CreatedDate.is_nothing() && castObj->CreatedDate.value().hasvalue()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value().value()];
    if (!castObj->ChartedDate.is_nothing() && castObj->ChartedDate.value().hasvalue()) self.chartedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->ChartedDate.value().value()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Value" ] && [dictionary objectForKey: @"Value"] != (id)[NSNull null]) {
      self.value = [dictionary objectForKey: @"Value"];
    }
    if ([dictionary.allKeys containsObject: @"Units" ] && [dictionary objectForKey: @"Units"] != (id)[NSNull null]) {
      self.units = [dictionary objectForKey: @"Units"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"ChartedDate" ] && [dictionary objectForKey: @"ChartedDate"] != (id)[NSNull null]) {
      self.chartedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"ChartedDate"] longValue]];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Measurement obj = CppBondSerializer<::Measurement>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Measurement* obj = new Measurement();
  if (self.value != nil) obj->Value.set_value().set([self.value cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.units != nil) obj->Units.set_value().set([self.units cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.createdDate != nil) obj->CreatedDate.set_value().set([self.createdDate timeIntervalSince1970]);
  if (self.chartedDate != nil) obj->ChartedDate.set_value().set([self.chartedDate timeIntervalSince1970]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Measurement*)[self toBondObject];
  return CppBondSerializer<::Measurement>::serializeToByteArray(*obj, resultLen);
}

@end
