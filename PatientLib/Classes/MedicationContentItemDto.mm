//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Content_reflection.h>
#import <MedicationContentItemDto.h>
#import <AdministrationRouteAndFormDto.h>

@implementation MedicationContentItemDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::MedicationContentItem* castObj = (::MedicationContentItem*)obj;
    if (!castObj->NDC.is_nothing() && castObj->NDC.value().hasvalue()) self.nDC =  [[NSString alloc] initWithUTF8String: castObj->NDC.value().value().c_str()];
    if (!castObj->RxNorm.is_nothing() && castObj->RxNorm.value().hasvalue()) self.rxNorm =  [[NSString alloc] initWithUTF8String: castObj->RxNorm.value().value().c_str()];
    if (!castObj->MedicalName.is_nothing() && castObj->MedicalName.value().hasvalue()) self.medicalName =  [[NSString alloc] initWithUTF8String: castObj->MedicalName.value().value().c_str()];
    if (!castObj->CommonName.is_nothing() && castObj->CommonName.value().hasvalue()) self.commonName =  [[NSString alloc] initWithUTF8String: castObj->CommonName.value().value().c_str()];
    if (!castObj->Strength.is_nothing() && castObj->Strength.value().hasvalue()) self.strength =  [[NSString alloc] initWithUTF8String: castObj->Strength.value().value().c_str()];
    if (!castObj->AdministrationRouteAndForms.is_nothing()) {
      self.administrationRouteAndForms = [[NSMutableArray alloc] init];
      for (auto it = castObj->AdministrationRouteAndForms.value().begin(); it != castObj->AdministrationRouteAndForms.value().end(); it++) {
        [self.administrationRouteAndForms addObject: [[AdministrationRouteAndFormDto alloc] initWithBondObject: &(*it)]];
      }
    }
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"NDC" ] && [dictionary objectForKey: @"NDC"] != (id)[NSNull null]) {
      self.nDC = [dictionary objectForKey: @"NDC"];
    }
    if ([dictionary.allKeys containsObject: @"RxNorm" ] && [dictionary objectForKey: @"RxNorm"] != (id)[NSNull null]) {
      self.rxNorm = [dictionary objectForKey: @"RxNorm"];
    }
    if ([dictionary.allKeys containsObject: @"MedicalName" ] && [dictionary objectForKey: @"MedicalName"] != (id)[NSNull null]) {
      self.medicalName = [dictionary objectForKey: @"MedicalName"];
    }
    if ([dictionary.allKeys containsObject: @"CommonName" ] && [dictionary objectForKey: @"CommonName"] != (id)[NSNull null]) {
      self.commonName = [dictionary objectForKey: @"CommonName"];
    }
    if ([dictionary.allKeys containsObject: @"Strength" ] && [dictionary objectForKey: @"Strength"] != (id)[NSNull null]) {
      self.strength = [dictionary objectForKey: @"Strength"];
    }
    if ([dictionary.allKeys containsObject: @"AdministrationRouteAndForms" ] && [dictionary objectForKey: @"AdministrationRouteAndForms"] != (id)[NSNull null]) {
      self.administrationRouteAndForms = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [dictionary objectForKey: @"AdministrationRouteAndForms"]) {
        [self.administrationRouteAndForms addObject: [[AdministrationRouteAndFormDto alloc] initWithJsonDictionary:item]];
      }
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::MedicationContentItem obj = CppBondSerializer<::MedicationContentItem>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::MedicationContentItem* obj = new MedicationContentItem();
  if (self.nDC != nil) obj->NDC.set_value().set([self.nDC cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.rxNorm != nil) obj->RxNorm.set_value().set([self.rxNorm cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.medicalName != nil) obj->MedicalName.set_value().set([self.medicalName cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.commonName != nil) obj->CommonName.set_value().set([self.commonName cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.strength != nil) obj->Strength.set_value().set([self.strength cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.administrationRouteAndForms != nil) {
    for (id item in self.administrationRouteAndForms) {
      obj->AdministrationRouteAndForms.set_value().push_back(*(::AdministrationRouteAndForm*)[item toBondObject]);
    }
  }
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::MedicationContentItem*)[self toBondObject];
  return CppBondSerializer<::MedicationContentItem>::serializeToByteArray(*obj, resultLen);
}

@end
