//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Reaction_reflection.h>
#import <ReactionDto.h>

@implementation ReactionDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Reaction* castObj = (::Reaction*)obj;
    if (!castObj->Name.is_nothing() && castObj->Name.value().hasvalue()) self.name =  [[NSString alloc] initWithUTF8String: castObj->Name.value().value().c_str()];
    if (!castObj->IsUrgent.is_nothing() && castObj->IsUrgent.value().hasvalue()) self.isUrgent =  [[NSNumber alloc] initWithBool: castObj->IsUrgent.value().value()];
    if (!castObj->DateOfReaction.is_nothing() && castObj->DateOfReaction.value().hasvalue()) self.dateOfReaction =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->DateOfReaction.value().value()];
    if (!castObj->ReactionSignificance.is_nothing() && castObj->ReactionSignificance.value().hasvalue()) self.reactionSignificance =  [[NSNumber alloc] initWithInt: castObj->ReactionSignificance.value().value()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Name" ] && [dictionary objectForKey: @"Name"] != (id)[NSNull null]) {
      self.name = [dictionary objectForKey: @"Name"];
    }
    if ([dictionary.allKeys containsObject: @"IsUrgent" ] && [dictionary objectForKey: @"IsUrgent"] != (id)[NSNull null]) {
      self.isUrgent = [dictionary objectForKey: @"IsUrgent"];
    }
    if ([dictionary.allKeys containsObject: @"DateOfReaction" ] && [dictionary objectForKey: @"DateOfReaction"] != (id)[NSNull null]) {
      self.dateOfReaction = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"DateOfReaction"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"ReactionSignificance" ] && [dictionary objectForKey: @"ReactionSignificance"] != (id)[NSNull null]) {
      self.reactionSignificanceStringValue = [dictionary objectForKey: @"ReactionSignificance"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Reaction obj = CppBondSerializer<::Reaction>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Reaction* obj = new Reaction();
  if (self.name != nil) obj->Name.set_value().set([self.name cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.isUrgent != nil) obj->IsUrgent.set_value().set([self.isUrgent boolValue]);
  if (self.dateOfReaction != nil) obj->DateOfReaction.set_value().set([self.dateOfReaction timeIntervalSince1970]);
  if (self.reactionSignificance != nil) obj->ReactionSignificance.set_value().set(static_cast<::ReactionSignificance>([self.reactionSignificance intValue]));
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Reaction*)[self toBondObject];
  return CppBondSerializer<::Reaction>::serializeToByteArray(*obj, resultLen);
}

@end
