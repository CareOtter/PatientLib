//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Patient_reflection.h>
#import <PatientDto.h>
#import <CoordinatesDto.h>
#import <PersonNameDto.h>
#import <DemographicsDto.h>
#import <ImageResourceDto.h>
#import <PersonContactInformationDto.h>
#import <BillingAccountDto.h>
#import <HealthRecordDto.h>
#import <InsurancePolicyDto.h>
#import <NoteDto.h>

@implementation PatientDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Patient* castObj = (::Patient*)obj;
    self.id = [[NSNumber alloc] initWithLongLong: castObj->Id];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (castObj->Coordinates.hasvalue()) self.coordinates =  [[CoordinatesDto alloc] initWithBondObject: &(castObj->Coordinates.value())];
    if (!castObj->Name.is_nothing() && castObj->Name.value().hasvalue()) self.name =  [[PersonNameDto alloc] initWithBondObject: &(castObj->Name.value().value())];
    if (castObj->Demographics.hasvalue()) {
      auto newObj = castObj->Demographics.value().Deserialize();
      self.demographics = [[DemographicsDto alloc] initWithBondObject: &newObj];
    }
    if (!castObj->DateOfBirth.is_nothing() && castObj->DateOfBirth.value().hasvalue()) self.dateOfBirth =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->DateOfBirth.value().value()];
    if (!castObj->DateOfDeath.is_nothing() && castObj->DateOfDeath.value().hasvalue()) self.dateOfDeath =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->DateOfDeath.value().value()];
      self.imageResources = [[NSMutableArray alloc] init];
      for (auto it = castObj->ImageResources.begin(); it != castObj->ImageResources.end(); it++) {
        [self.imageResources addObject: [[ImageResourceDto alloc] initWithBondObject: &(*it)]];
      }
    if (!castObj->ResponsiblePersonName.is_nothing() && castObj->ResponsiblePersonName.value().hasvalue()) self.responsiblePersonName =  [[PersonNameDto alloc] initWithBondObject: &(castObj->ResponsiblePersonName.value().value())];
    if (!castObj->EmergencyPersonName.is_nothing() && castObj->EmergencyPersonName.value().hasvalue()) self.emergencyPersonName =  [[PersonNameDto alloc] initWithBondObject: &(castObj->EmergencyPersonName.value().value())];
    if (!castObj->ResponsiblePersonContactInformation.is_nothing() && castObj->ResponsiblePersonContactInformation.value().hasvalue()) self.responsiblePersonContactInformation =  [[PersonContactInformationDto alloc] initWithBondObject: &(castObj->ResponsiblePersonContactInformation.value().value())];
    if (!castObj->EmergencyPersonContactInformation.is_nothing() && castObj->EmergencyPersonContactInformation.value().hasvalue()) self.emergencyPersonContactInformation =  [[PersonContactInformationDto alloc] initWithBondObject: &(castObj->EmergencyPersonContactInformation.value().value())];
    if (castObj->BillingAccount.hasvalue()) {
      auto newObj = castObj->BillingAccount.value().Deserialize();
      self.billingAccount = [[BillingAccountDto alloc] initWithBondObject: &newObj];
    }
    if (castObj->HealthRecord.hasvalue()) {
      auto newObj = castObj->HealthRecord.value().Deserialize();
      self.healthRecord = [[HealthRecordDto alloc] initWithBondObject: &newObj];
    }
    if (!castObj->SocialSecurityNumber.is_nothing() && castObj->SocialSecurityNumber.value().hasvalue()) self.socialSecurityNumber =  [[NSString alloc] initWithUTF8String: castObj->SocialSecurityNumber.value().value().c_str()];
    if(castObj->InsurancePolicies.hasvalue()) {
      self.insurancePolicies = [[NSMutableArray alloc] init];
      auto insurancePoliciesCollection = castObj->InsurancePolicies.value().Deserialize().Collection;
      for (auto it = insurancePoliciesCollection.begin(); it != insurancePoliciesCollection.end(); it++) {
        [self.insurancePolicies addObject: [[InsurancePolicyDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if (!castObj->EmergencyContactRelationship.is_nothing() && castObj->EmergencyContactRelationship.value().hasvalue()) self.emergencyContactRelationship =  [[NSString alloc] initWithUTF8String: castObj->EmergencyContactRelationship.value().value().c_str()];
    if (!castObj->ResponsiblePartyRelationship.is_nothing() && castObj->ResponsiblePartyRelationship.value().hasvalue()) self.responsiblePartyRelationship =  [[NSString alloc] initWithUTF8String: castObj->ResponsiblePartyRelationship.value().value().c_str()];
    if (!castObj->ResponsiblePartyDateOfBirth.is_nothing() && castObj->ResponsiblePartyDateOfBirth.value().hasvalue()) self.responsiblePartyDateOfBirth =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->ResponsiblePartyDateOfBirth.value().value()];
    if(castObj->Notes.hasvalue()) {
      self.notes = [[NSMutableArray alloc] init];
      auto notesCollection = castObj->Notes.value().Deserialize().Collection;
      for (auto it = notesCollection.begin(); it != notesCollection.end(); it++) {
        [self.notes addObject: [[NoteDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if (!castObj->ClinicalId.is_nothing() && castObj->ClinicalId.value().hasvalue()) self.clinicalId =  [[NSString alloc] initWithUTF8String: castObj->ClinicalId.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Coordinates" ] && [dictionary objectForKey: @"Coordinates"] != (id)[NSNull null]) {
      self.coordinates = [[CoordinatesDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"Coordinates"]];
    }
    if ([dictionary.allKeys containsObject: @"Name" ] && [dictionary objectForKey: @"Name"] != (id)[NSNull null]) {
      self.name = [[PersonNameDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"Name"]];
    }
    if ([dictionary.allKeys containsObject: @"Demographics" ] && [dictionary objectForKey: @"Demographics"] != (id)[NSNull null]) {
      self.demographics = [[DemographicsDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"Demographics"]];
    }
    if ([dictionary.allKeys containsObject: @"DateOfBirth" ] && [dictionary objectForKey: @"DateOfBirth"] != (id)[NSNull null]) {
      self.dateOfBirth = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"DateOfBirth"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"DateOfDeath" ] && [dictionary objectForKey: @"DateOfDeath"] != (id)[NSNull null]) {
      self.dateOfDeath = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"DateOfDeath"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"ImageResources" ] && [dictionary objectForKey: @"ImageResources"] != (id)[NSNull null]) {
      self.imageResources = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [dictionary objectForKey: @"ImageResources"]) {
        [self.imageResources addObject: [[ImageResourceDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"ResponsiblePersonName" ] && [dictionary objectForKey: @"ResponsiblePersonName"] != (id)[NSNull null]) {
      self.responsiblePersonName = [[PersonNameDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"ResponsiblePersonName"]];
    }
    if ([dictionary.allKeys containsObject: @"EmergencyPersonName" ] && [dictionary objectForKey: @"EmergencyPersonName"] != (id)[NSNull null]) {
      self.emergencyPersonName = [[PersonNameDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"EmergencyPersonName"]];
    }
    if ([dictionary.allKeys containsObject: @"ResponsiblePersonContactInformation" ] && [dictionary objectForKey: @"ResponsiblePersonContactInformation"] != (id)[NSNull null]) {
      self.responsiblePersonContactInformation = [[PersonContactInformationDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"ResponsiblePersonContactInformation"]];
    }
    if ([dictionary.allKeys containsObject: @"EmergencyPersonContactInformation" ] && [dictionary objectForKey: @"EmergencyPersonContactInformation"] != (id)[NSNull null]) {
      self.emergencyPersonContactInformation = [[PersonContactInformationDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"EmergencyPersonContactInformation"]];
    }
    if ([dictionary.allKeys containsObject: @"BillingAccount" ] && [dictionary objectForKey: @"BillingAccount"] != (id)[NSNull null]) {
      self.billingAccount = [[BillingAccountDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"BillingAccount"]];
    }
    if ([dictionary.allKeys containsObject: @"HealthRecord" ] && [dictionary objectForKey: @"HealthRecord"] != (id)[NSNull null]) {
      self.healthRecord = [[HealthRecordDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"HealthRecord"]];
    }
    if ([dictionary.allKeys containsObject: @"SocialSecurityNumber" ] && [dictionary objectForKey: @"SocialSecurityNumber"] != (id)[NSNull null]) {
      self.socialSecurityNumber = [dictionary objectForKey: @"SocialSecurityNumber"];
    }
    if ([dictionary.allKeys containsObject: @"InsurancePolicies" ] && [dictionary objectForKey: @"InsurancePolicies"] != (id)[NSNull null]) {
      self.insurancePolicies = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"InsurancePolicies"] objectForKey: @"Collection"]) {
        [self.insurancePolicies addObject: [[InsurancePolicyDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"EmergencyContactRelationship" ] && [dictionary objectForKey: @"EmergencyContactRelationship"] != (id)[NSNull null]) {
      self.emergencyContactRelationship = [dictionary objectForKey: @"EmergencyContactRelationship"];
    }
    if ([dictionary.allKeys containsObject: @"ResponsiblePartyRelationship" ] && [dictionary objectForKey: @"ResponsiblePartyRelationship"] != (id)[NSNull null]) {
      self.responsiblePartyRelationship = [dictionary objectForKey: @"ResponsiblePartyRelationship"];
    }
    if ([dictionary.allKeys containsObject: @"ResponsiblePartyDateOfBirth" ] && [dictionary objectForKey: @"ResponsiblePartyDateOfBirth"] != (id)[NSNull null]) {
      self.responsiblePartyDateOfBirth = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"ResponsiblePartyDateOfBirth"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Notes" ] && [dictionary objectForKey: @"Notes"] != (id)[NSNull null]) {
      self.notes = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Notes"] objectForKey: @"Collection"]) {
        [self.notes addObject: [[NoteDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"ClinicalId" ] && [dictionary objectForKey: @"ClinicalId"] != (id)[NSNull null]) {
      self.clinicalId = [dictionary objectForKey: @"ClinicalId"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Patient obj = CppBondSerializer<::Patient>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Patient* obj = new Patient();
  if (self.id != nil) obj->Id = [self.id longValue];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.coordinates != nil) obj->Coordinates.set(*(::Coordinates*)[self.coordinates toBondObject]);
  if (self.name != nil) obj->Name.set_value().set(*(::PersonName*)[self.name toBondObject]);
  if (self.demographics != nil) {
    auto bondedObj = CppBondSerializer<Demographics>::getBondedObject(*(::Demographics*)[self.demographics toBondObject]);
    obj->Demographics.set(bondedObj);
  }
  if (self.dateOfBirth != nil) obj->DateOfBirth.set_value().set([self.dateOfBirth timeIntervalSince1970]);
  if (self.dateOfDeath != nil) obj->DateOfDeath.set_value().set([self.dateOfDeath timeIntervalSince1970]);
  if (self.imageResources != nil) {
    for (id item in self.imageResources) {
      obj->ImageResources.push_back(*(::ImageResource*)[item toBondObject]);
    }
  }
  if (self.responsiblePersonName != nil) obj->ResponsiblePersonName.set_value().set(*(::PersonName*)[self.responsiblePersonName toBondObject]);
  if (self.emergencyPersonName != nil) obj->EmergencyPersonName.set_value().set(*(::PersonName*)[self.emergencyPersonName toBondObject]);
  if (self.responsiblePersonContactInformation != nil) obj->ResponsiblePersonContactInformation.set_value().set(*(::PersonContactInformation*)[self.responsiblePersonContactInformation toBondObject]);
  if (self.emergencyPersonContactInformation != nil) obj->EmergencyPersonContactInformation.set_value().set(*(::PersonContactInformation*)[self.emergencyPersonContactInformation toBondObject]);
  if (self.billingAccount != nil) {
    auto bondedObj = CppBondSerializer<BillingAccount>::getBondedObject(*(::BillingAccount*)[self.billingAccount toBondObject]);
    obj->BillingAccount.set(bondedObj);
  }
  if (self.healthRecord != nil) {
    auto bondedObj = CppBondSerializer<HealthRecord>::getBondedObject(*(::HealthRecord*)[self.healthRecord toBondObject]);
    obj->HealthRecord.set(bondedObj);
  }
  if (self.socialSecurityNumber != nil) obj->SocialSecurityNumber.set_value().set([self.socialSecurityNumber cStringUsingEncoding:NSUTF8StringEncoding]);
  BaseItemCollection<::InsurancePolicy> insurancePoliciesCollection = BaseItemCollection<::InsurancePolicy>();
  if (self.insurancePolicies != nil) {
    for (InsurancePolicyDto* item in self.insurancePolicies) {
      auto bondObj = *(::InsurancePolicy*)[item toBondObject];
      insurancePoliciesCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedinsurancePoliciesCollection = CppBondSerializer<BaseItemCollection<InsurancePolicy>>::getBondedObject(insurancePoliciesCollection);
  obj->InsurancePolicies.set(bondedinsurancePoliciesCollection);
  if (self.emergencyContactRelationship != nil) obj->EmergencyContactRelationship.set_value().set([self.emergencyContactRelationship cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.responsiblePartyRelationship != nil) obj->ResponsiblePartyRelationship.set_value().set([self.responsiblePartyRelationship cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.responsiblePartyDateOfBirth != nil) obj->ResponsiblePartyDateOfBirth.set_value().set([self.responsiblePartyDateOfBirth timeIntervalSince1970]);
  BaseItemCollection<::Note> notesCollection = BaseItemCollection<::Note>();
  if (self.notes != nil) {
    for (NoteDto* item in self.notes) {
      auto bondObj = *(::Note*)[item toBondObject];
      notesCollection.Collection.push_back(bondObj);
    }
  }
  auto bondednotesCollection = CppBondSerializer<BaseItemCollection<Note>>::getBondedObject(notesCollection);
  obj->Notes.set(bondednotesCollection);
  if (self.clinicalId != nil) obj->ClinicalId.set_value().set([self.clinicalId cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Patient*)[self toBondObject];
  return CppBondSerializer<::Patient>::serializeToByteArray(*obj, resultLen);
}

@end
