
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Immunization_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"
#include "Reaction_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    struct Immunization
      : ::HealthCare::Schemas::BaseClinicalItem
    {
        bond::maybe<std::string> OrderId;
        bond::maybe<bond::nullable<int64_t> > AdministeredDate;
        bond::maybe<bond::nullable<int64_t> > AdministeringProvider;
        bond::maybe<bond::nullable<int64_t> > OrderingProvider;
        bond::maybe<bond::nullable<std::string> > LotId;
        bond::maybe<bond::nullable<int64_t> > LotExpirationDate;
        bond::maybe<bond::nullable<std::string> > RouteOfAdministration;
        bond::maybe<bond::nullable<std::string> > SiteOfInjection;
        bond::maybe<bond::nullable<std::string> > Manufacturer;
        bond::maybe<bond::nullable<std::string> > Series;
        bond::maybe<bond::nullable<std::string> > Dose;
        bond::maybe<bond::nullable<std::string> > DoseUnit;
        bond::maybe<bond::nullable<std::string> > ReasonDeclined;
        bond::maybe<bond::nullable<bool> > IsDeclined;
        bond::maybe<bond::nullable<int64_t> > DeclinedDate;
        std::vector< ::HealthCare::Schemas::Reaction> Reactions;
        
        Immunization()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Immunization(const Immunization& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Immunization(Immunization&& other)
          : ::HealthCare::Schemas::BaseClinicalItem(std::move(other)),
            OrderId(std::move(other.OrderId)),
            AdministeredDate(std::move(other.AdministeredDate)),
            AdministeringProvider(std::move(other.AdministeringProvider)),
            OrderingProvider(std::move(other.OrderingProvider)),
            LotId(std::move(other.LotId)),
            LotExpirationDate(std::move(other.LotExpirationDate)),
            RouteOfAdministration(std::move(other.RouteOfAdministration)),
            SiteOfInjection(std::move(other.SiteOfInjection)),
            Manufacturer(std::move(other.Manufacturer)),
            Series(std::move(other.Series)),
            Dose(std::move(other.Dose)),
            DoseUnit(std::move(other.DoseUnit)),
            ReasonDeclined(std::move(other.ReasonDeclined)),
            IsDeclined(std::move(other.IsDeclined)),
            DeclinedDate(std::move(other.DeclinedDate)),
            Reactions(std::move(other.Reactions))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Immunization& operator=(const Immunization& other) = default;
#endif

        bool operator==(const Immunization& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>( other))
                && (OrderId == other.OrderId)
                && (AdministeredDate == other.AdministeredDate)
                && (AdministeringProvider == other.AdministeringProvider)
                && (OrderingProvider == other.OrderingProvider)
                && (LotId == other.LotId)
                && (LotExpirationDate == other.LotExpirationDate)
                && (RouteOfAdministration == other.RouteOfAdministration)
                && (SiteOfInjection == other.SiteOfInjection)
                && (Manufacturer == other.Manufacturer)
                && (Series == other.Series)
                && (Dose == other.Dose)
                && (DoseUnit == other.DoseUnit)
                && (ReasonDeclined == other.ReasonDeclined)
                && (IsDeclined == other.IsDeclined)
                && (DeclinedDate == other.DeclinedDate)
                && (Reactions == other.Reactions);
        }

        bool operator!=(const Immunization& other) const
        {
            return !(*this == other);
        }

        void swap(Immunization& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseClinicalItem::swap( other);
            swap(OrderId, other.OrderId);
            swap(AdministeredDate, other.AdministeredDate);
            swap(AdministeringProvider, other.AdministeringProvider);
            swap(OrderingProvider, other.OrderingProvider);
            swap(LotId, other.LotId);
            swap(LotExpirationDate, other.LotExpirationDate);
            swap(RouteOfAdministration, other.RouteOfAdministration);
            swap(SiteOfInjection, other.SiteOfInjection);
            swap(Manufacturer, other.Manufacturer);
            swap(Series, other.Series);
            swap(Dose, other.Dose);
            swap(DoseUnit, other.DoseUnit);
            swap(ReasonDeclined, other.ReasonDeclined);
            swap(IsDeclined, other.IsDeclined);
            swap(DeclinedDate, other.DeclinedDate);
            swap(Reactions, other.Reactions);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseClinicalItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(Immunization& left, Immunization& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

