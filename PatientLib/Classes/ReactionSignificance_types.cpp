
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : ReactionSignificance_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "ReactionSignificance_reflection.h"
#include <bond/core/exception.h>

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace ReactionSignificance
    {
        const
        std::map<std::string, enum ReactionSignificance> _name_to_value_ReactionSignificance =
            boost::assign::map_list_of<std::string, enum ReactionSignificance>
                ("Major", Major)
                ("Minor", Minor)
                ("Mild", Mild);

        const
        std::map<enum ReactionSignificance, std::string> _value_to_name_ReactionSignificance =
            bond::reverse_map(_name_to_value_ReactionSignificance);

        const std::string& ToString(enum ReactionSignificance value)
        {
            std::map<enum ReactionSignificance, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "ReactionSignificance");

            return it->second;
        }

        void FromString(const std::string& name, enum ReactionSignificance& value)
        {
            std::map<std::string, enum ReactionSignificance>::const_iterator it =
                _name_to_value_ReactionSignificance.find(name);

            if (_name_to_value_ReactionSignificance.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "ReactionSignificance");

            value = it->second;
        }

    } // namespace ReactionSignificance
    } // namespace _bond_enumerators

    
} // namespace Schemas
} // namespace HealthCare
