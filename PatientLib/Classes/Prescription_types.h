
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Prescription_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    struct Prescription
      : ::HealthCare::Schemas::BaseClinicalItem
    {
        bond::maybe<bond::nullable<std::string> > InternalTraceNumber;
        bond::maybe<bond::nullable<std::string> > SPINumber;
        bond::maybe<bond::nullable<std::string> > NCPDPNumber;
        bond::maybe<bond::nullable<int64_t> > SentDate;
        bond::maybe<bond::nullable<std::string> > MessageType;
        bond::maybe<bond::nullable<std::string> > MessageFunction;
        bond::maybe<bond::nullable<std::string> > PrescriberReferenceNumber;
        bond::maybe<bond::nullable<std::string> > PrescriberNPI;
        bond::maybe<bond::nullable<std::string> > PrescriberLicenseNumber;
        bond::maybe<bond::nullable<std::string> > PrescriberName;
        bond::maybe<bond::nullable<std::string> > PrescriberAddress;
        bond::maybe<bond::nullable<std::string> > PrescriberPhone;
        bond::maybe<bond::nullable<std::string> > PharmacyNPI;
        bond::maybe<bond::nullable<std::string> > PharmacyNCPDP;
        bond::maybe<bond::nullable<std::string> > PharmacyName;
        bond::maybe<bond::nullable<std::string> > PharmacyPhone;
        bond::maybe<bond::nullable<std::string> > Directions;
        bond::maybe<bond::nullable<int64_t> > DateWritten;
        bond::maybe<bond::nullable<int16_t> > DaysSupply;
        bond::maybe<bond::nullable<bool> > SubstitutionsAllowed;
        bond::maybe<bond::nullable<int16_t> > Refills;
        bond::maybe<bond::nullable<std::string> > PrimaryPayerIdNumber;
        bond::maybe<bond::nullable<std::string> > PayerName;
        bond::maybe<bond::nullable<std::string> > MemberId;
        bond::maybe<bond::nullable<std::string> > GroupId;
        bond::maybe<bond::nullable<int16_t> > NumberOfDoses;
        bond::maybe<bond::nullable<bool> > PrescribeAsWritten;
        
        Prescription()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Prescription(const Prescription& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Prescription(Prescription&& other)
          : ::HealthCare::Schemas::BaseClinicalItem(std::move(other)),
            InternalTraceNumber(std::move(other.InternalTraceNumber)),
            SPINumber(std::move(other.SPINumber)),
            NCPDPNumber(std::move(other.NCPDPNumber)),
            SentDate(std::move(other.SentDate)),
            MessageType(std::move(other.MessageType)),
            MessageFunction(std::move(other.MessageFunction)),
            PrescriberReferenceNumber(std::move(other.PrescriberReferenceNumber)),
            PrescriberNPI(std::move(other.PrescriberNPI)),
            PrescriberLicenseNumber(std::move(other.PrescriberLicenseNumber)),
            PrescriberName(std::move(other.PrescriberName)),
            PrescriberAddress(std::move(other.PrescriberAddress)),
            PrescriberPhone(std::move(other.PrescriberPhone)),
            PharmacyNPI(std::move(other.PharmacyNPI)),
            PharmacyNCPDP(std::move(other.PharmacyNCPDP)),
            PharmacyName(std::move(other.PharmacyName)),
            PharmacyPhone(std::move(other.PharmacyPhone)),
            Directions(std::move(other.Directions)),
            DateWritten(std::move(other.DateWritten)),
            DaysSupply(std::move(other.DaysSupply)),
            SubstitutionsAllowed(std::move(other.SubstitutionsAllowed)),
            Refills(std::move(other.Refills)),
            PrimaryPayerIdNumber(std::move(other.PrimaryPayerIdNumber)),
            PayerName(std::move(other.PayerName)),
            MemberId(std::move(other.MemberId)),
            GroupId(std::move(other.GroupId)),
            NumberOfDoses(std::move(other.NumberOfDoses)),
            PrescribeAsWritten(std::move(other.PrescribeAsWritten))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Prescription& operator=(const Prescription& other) = default;
#endif

        bool operator==(const Prescription& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>( other))
                && (InternalTraceNumber == other.InternalTraceNumber)
                && (SPINumber == other.SPINumber)
                && (NCPDPNumber == other.NCPDPNumber)
                && (SentDate == other.SentDate)
                && (MessageType == other.MessageType)
                && (MessageFunction == other.MessageFunction)
                && (PrescriberReferenceNumber == other.PrescriberReferenceNumber)
                && (PrescriberNPI == other.PrescriberNPI)
                && (PrescriberLicenseNumber == other.PrescriberLicenseNumber)
                && (PrescriberName == other.PrescriberName)
                && (PrescriberAddress == other.PrescriberAddress)
                && (PrescriberPhone == other.PrescriberPhone)
                && (PharmacyNPI == other.PharmacyNPI)
                && (PharmacyNCPDP == other.PharmacyNCPDP)
                && (PharmacyName == other.PharmacyName)
                && (PharmacyPhone == other.PharmacyPhone)
                && (Directions == other.Directions)
                && (DateWritten == other.DateWritten)
                && (DaysSupply == other.DaysSupply)
                && (SubstitutionsAllowed == other.SubstitutionsAllowed)
                && (Refills == other.Refills)
                && (PrimaryPayerIdNumber == other.PrimaryPayerIdNumber)
                && (PayerName == other.PayerName)
                && (MemberId == other.MemberId)
                && (GroupId == other.GroupId)
                && (NumberOfDoses == other.NumberOfDoses)
                && (PrescribeAsWritten == other.PrescribeAsWritten);
        }

        bool operator!=(const Prescription& other) const
        {
            return !(*this == other);
        }

        void swap(Prescription& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseClinicalItem::swap( other);
            swap(InternalTraceNumber, other.InternalTraceNumber);
            swap(SPINumber, other.SPINumber);
            swap(NCPDPNumber, other.NCPDPNumber);
            swap(SentDate, other.SentDate);
            swap(MessageType, other.MessageType);
            swap(MessageFunction, other.MessageFunction);
            swap(PrescriberReferenceNumber, other.PrescriberReferenceNumber);
            swap(PrescriberNPI, other.PrescriberNPI);
            swap(PrescriberLicenseNumber, other.PrescriberLicenseNumber);
            swap(PrescriberName, other.PrescriberName);
            swap(PrescriberAddress, other.PrescriberAddress);
            swap(PrescriberPhone, other.PrescriberPhone);
            swap(PharmacyNPI, other.PharmacyNPI);
            swap(PharmacyNCPDP, other.PharmacyNCPDP);
            swap(PharmacyName, other.PharmacyName);
            swap(PharmacyPhone, other.PharmacyPhone);
            swap(Directions, other.Directions);
            swap(DateWritten, other.DateWritten);
            swap(DaysSupply, other.DaysSupply);
            swap(SubstitutionsAllowed, other.SubstitutionsAllowed);
            swap(Refills, other.Refills);
            swap(PrimaryPayerIdNumber, other.PrimaryPayerIdNumber);
            swap(PayerName, other.PayerName);
            swap(MemberId, other.MemberId);
            swap(GroupId, other.GroupId);
            swap(NumberOfDoses, other.NumberOfDoses);
            swap(PrescribeAsWritten, other.PrescribeAsWritten);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseClinicalItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(Prescription& left, Prescription& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

