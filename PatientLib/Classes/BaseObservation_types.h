
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : BaseObservation_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace ObservationKind
    {
        enum ObservationKind
        {
            Textual,
            Numeric,
            RestrictedDictionary,
            SuggestedDictionary,
            DateTime,
            none
        };
        
        extern const std::map<enum ObservationKind, std::string> _value_to_name_ObservationKind;
        extern const std::map<std::string, enum ObservationKind> _name_to_value_ObservationKind;

        inline
        const char* GetTypeName(enum ObservationKind)
        {
            return "ObservationKind";
        }

        inline
        const char* GetTypeName(enum ObservationKind, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.ObservationKind";
        }

        inline
        const std::map<enum ObservationKind, std::string>& GetValueToNameMap(enum ObservationKind)
        {
            return _value_to_name_ObservationKind;
        }

        inline
        const std::map<std::string, enum ObservationKind>& GetNameToValueMap(enum ObservationKind)
        {
            return _name_to_value_ObservationKind;
        }

        const std::string& ToString(enum ObservationKind value);

        void FromString(const std::string& name, enum ObservationKind& value);

        inline
        bool ToEnum(enum ObservationKind& value, const std::string& name)
        {
            std::map<std::string, enum ObservationKind>::const_iterator it =
                _name_to_value_ObservationKind.find(name);

            if (_name_to_value_ObservationKind.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace ObservationKind
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::ObservationKind;
    

    
    namespace _bond_enumerators
    {
    namespace RangeType
    {
        enum RangeType
        {
            Basic,
            none
        };
        
        extern const std::map<enum RangeType, std::string> _value_to_name_RangeType;
        extern const std::map<std::string, enum RangeType> _name_to_value_RangeType;

        inline
        const char* GetTypeName(enum RangeType)
        {
            return "RangeType";
        }

        inline
        const char* GetTypeName(enum RangeType, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.RangeType";
        }

        inline
        const std::map<enum RangeType, std::string>& GetValueToNameMap(enum RangeType)
        {
            return _value_to_name_RangeType;
        }

        inline
        const std::map<std::string, enum RangeType>& GetNameToValueMap(enum RangeType)
        {
            return _name_to_value_RangeType;
        }

        const std::string& ToString(enum RangeType value);

        void FromString(const std::string& name, enum RangeType& value);

        inline
        bool ToEnum(enum RangeType& value, const std::string& name)
        {
            std::map<std::string, enum RangeType>::const_iterator it =
                _name_to_value_RangeType.find(name);

            if (_name_to_value_RangeType.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace RangeType
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::RangeType;
    

    
    struct BasicRange
    {
        bond::maybe<bond::nullable<std::string> > Gender;
        bond::maybe<bond::nullable<int16_t> > MinAgeYears;
        bond::maybe<bond::nullable<int16_t> > MinAgeMonths;
        bond::maybe<bond::nullable<int16_t> > MinAgeDays;
        bond::maybe<bond::nullable<int16_t> > MaxAgeYears;
        bond::maybe<bond::nullable<int16_t> > MaxAgeMonths;
        bond::maybe<bond::nullable<int16_t> > MaxAgeDays;
        bond::maybe<bond::nullable<double> > VeryLowValue;
        bond::maybe<bond::nullable<double> > LowValue;
        bond::maybe<bond::nullable<double> > HighValue;
        bond::maybe<bond::nullable<double> > VeryHighValue;
        bond::maybe<bond::nullable<double> > OutofBoundsLow;
        bond::maybe<bond::nullable<double> > OutofBoundsHigh;
        bond::maybe<bond::nullable<std::string> > VeryLowSuggestedMessage;
        bond::maybe<bond::nullable<std::string> > LowSuggestedMessage;
        bond::maybe<bond::nullable<std::string> > NormalSuggestedMessage;
        bond::maybe<bond::nullable<std::string> > HighSuggestedMessage;
        bond::maybe<bond::nullable<std::string> > VeryHighSuggestedMessage;
        
        BasicRange()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        BasicRange(const BasicRange& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        BasicRange(BasicRange&& other)
          : Gender(std::move(other.Gender)),
            MinAgeYears(std::move(other.MinAgeYears)),
            MinAgeMonths(std::move(other.MinAgeMonths)),
            MinAgeDays(std::move(other.MinAgeDays)),
            MaxAgeYears(std::move(other.MaxAgeYears)),
            MaxAgeMonths(std::move(other.MaxAgeMonths)),
            MaxAgeDays(std::move(other.MaxAgeDays)),
            VeryLowValue(std::move(other.VeryLowValue)),
            LowValue(std::move(other.LowValue)),
            HighValue(std::move(other.HighValue)),
            VeryHighValue(std::move(other.VeryHighValue)),
            OutofBoundsLow(std::move(other.OutofBoundsLow)),
            OutofBoundsHigh(std::move(other.OutofBoundsHigh)),
            VeryLowSuggestedMessage(std::move(other.VeryLowSuggestedMessage)),
            LowSuggestedMessage(std::move(other.LowSuggestedMessage)),
            NormalSuggestedMessage(std::move(other.NormalSuggestedMessage)),
            HighSuggestedMessage(std::move(other.HighSuggestedMessage)),
            VeryHighSuggestedMessage(std::move(other.VeryHighSuggestedMessage))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        BasicRange& operator=(const BasicRange& other) = default;
#endif

        bool operator==(const BasicRange& other) const
        {
            return true
                && (Gender == other.Gender)
                && (MinAgeYears == other.MinAgeYears)
                && (MinAgeMonths == other.MinAgeMonths)
                && (MinAgeDays == other.MinAgeDays)
                && (MaxAgeYears == other.MaxAgeYears)
                && (MaxAgeMonths == other.MaxAgeMonths)
                && (MaxAgeDays == other.MaxAgeDays)
                && (VeryLowValue == other.VeryLowValue)
                && (LowValue == other.LowValue)
                && (HighValue == other.HighValue)
                && (VeryHighValue == other.VeryHighValue)
                && (OutofBoundsLow == other.OutofBoundsLow)
                && (OutofBoundsHigh == other.OutofBoundsHigh)
                && (VeryLowSuggestedMessage == other.VeryLowSuggestedMessage)
                && (LowSuggestedMessage == other.LowSuggestedMessage)
                && (NormalSuggestedMessage == other.NormalSuggestedMessage)
                && (HighSuggestedMessage == other.HighSuggestedMessage)
                && (VeryHighSuggestedMessage == other.VeryHighSuggestedMessage);
        }

        bool operator!=(const BasicRange& other) const
        {
            return !(*this == other);
        }

        void swap(BasicRange& other)
        {
            using std::swap;
            swap(Gender, other.Gender);
            swap(MinAgeYears, other.MinAgeYears);
            swap(MinAgeMonths, other.MinAgeMonths);
            swap(MinAgeDays, other.MinAgeDays);
            swap(MaxAgeYears, other.MaxAgeYears);
            swap(MaxAgeMonths, other.MaxAgeMonths);
            swap(MaxAgeDays, other.MaxAgeDays);
            swap(VeryLowValue, other.VeryLowValue);
            swap(LowValue, other.LowValue);
            swap(HighValue, other.HighValue);
            swap(VeryHighValue, other.VeryHighValue);
            swap(OutofBoundsLow, other.OutofBoundsLow);
            swap(OutofBoundsHigh, other.OutofBoundsHigh);
            swap(VeryLowSuggestedMessage, other.VeryLowSuggestedMessage);
            swap(LowSuggestedMessage, other.LowSuggestedMessage);
            swap(NormalSuggestedMessage, other.NormalSuggestedMessage);
            swap(HighSuggestedMessage, other.HighSuggestedMessage);
            swap(VeryHighSuggestedMessage, other.VeryHighSuggestedMessage);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(BasicRange& left, BasicRange& right)
    {
        left.swap(right);
    }

    
    struct ObservationListItem
    {
        bond::maybe<bond::nullable<int16_t> > IsActive;
        bond::maybe<bond::nullable<std::string> > Value;
        bond::maybe<bond::nullable<int16_t> > DisplaySequence;
        bond::maybe<bond::nullable<int16_t> > NumericEquivNum;
        bond::maybe<bond::nullable<int16_t> > IsHeader;
        bond::maybe<bond::nullable<std::string> > DisplayType;
        bond::maybe<bond::nullable<std::string> > ListValue;
        bond::maybe<bond::nullable<std::string> > SuggestedText;
        bond::maybe<std::vector< ::HealthCare::Schemas::BasicRange> > ListItemRanges;
        
        ObservationListItem()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        ObservationListItem(const ObservationListItem& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        ObservationListItem(ObservationListItem&& other)
          : IsActive(std::move(other.IsActive)),
            Value(std::move(other.Value)),
            DisplaySequence(std::move(other.DisplaySequence)),
            NumericEquivNum(std::move(other.NumericEquivNum)),
            IsHeader(std::move(other.IsHeader)),
            DisplayType(std::move(other.DisplayType)),
            ListValue(std::move(other.ListValue)),
            SuggestedText(std::move(other.SuggestedText)),
            ListItemRanges(std::move(other.ListItemRanges))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        ObservationListItem& operator=(const ObservationListItem& other) = default;
#endif

        bool operator==(const ObservationListItem& other) const
        {
            return true
                && (IsActive == other.IsActive)
                && (Value == other.Value)
                && (DisplaySequence == other.DisplaySequence)
                && (NumericEquivNum == other.NumericEquivNum)
                && (IsHeader == other.IsHeader)
                && (DisplayType == other.DisplayType)
                && (ListValue == other.ListValue)
                && (SuggestedText == other.SuggestedText)
                && (ListItemRanges == other.ListItemRanges);
        }

        bool operator!=(const ObservationListItem& other) const
        {
            return !(*this == other);
        }

        void swap(ObservationListItem& other)
        {
            using std::swap;
            swap(IsActive, other.IsActive);
            swap(Value, other.Value);
            swap(DisplaySequence, other.DisplaySequence);
            swap(NumericEquivNum, other.NumericEquivNum);
            swap(IsHeader, other.IsHeader);
            swap(DisplayType, other.DisplayType);
            swap(ListValue, other.ListValue);
            swap(SuggestedText, other.SuggestedText);
            swap(ListItemRanges, other.ListItemRanges);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(ObservationListItem& left, ObservationListItem& right)
    {
        left.swap(right);
    }

    
    struct ObservationList
    {
        bond::maybe<bond::nullable<std::string> > code;
        bond::maybe<bond::nullable<std::string> > Description;
        bond::maybe<bond::nullable<int16_t> > MaxValueLength;
        bond::maybe<bond::nullable<int16_t> > IsRestricted;
        bond::maybe<bond::nullable<int16_t> > SelectionType;
        bond::maybe<bond::nullable<std::string> > MultiSelectSeparator;
        bond::maybe<bond::nullable<std::string> > ControlType;
        bond::maybe<bond::nullable<int16_t> > IsHorizontal;
        bond::maybe<std::vector< ::HealthCare::Schemas::ObservationListItem> > ListItems;
        
        ObservationList()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        ObservationList(const ObservationList& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        ObservationList(ObservationList&& other)
          : code(std::move(other.code)),
            Description(std::move(other.Description)),
            MaxValueLength(std::move(other.MaxValueLength)),
            IsRestricted(std::move(other.IsRestricted)),
            SelectionType(std::move(other.SelectionType)),
            MultiSelectSeparator(std::move(other.MultiSelectSeparator)),
            ControlType(std::move(other.ControlType)),
            IsHorizontal(std::move(other.IsHorizontal)),
            ListItems(std::move(other.ListItems))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        ObservationList& operator=(const ObservationList& other) = default;
#endif

        bool operator==(const ObservationList& other) const
        {
            return true
                && (code == other.code)
                && (Description == other.Description)
                && (MaxValueLength == other.MaxValueLength)
                && (IsRestricted == other.IsRestricted)
                && (SelectionType == other.SelectionType)
                && (MultiSelectSeparator == other.MultiSelectSeparator)
                && (ControlType == other.ControlType)
                && (IsHorizontal == other.IsHorizontal)
                && (ListItems == other.ListItems);
        }

        bool operator!=(const ObservationList& other) const
        {
            return !(*this == other);
        }

        void swap(ObservationList& other)
        {
            using std::swap;
            swap(code, other.code);
            swap(Description, other.Description);
            swap(MaxValueLength, other.MaxValueLength);
            swap(IsRestricted, other.IsRestricted);
            swap(SelectionType, other.SelectionType);
            swap(MultiSelectSeparator, other.MultiSelectSeparator);
            swap(ControlType, other.ControlType);
            swap(IsHorizontal, other.IsHorizontal);
            swap(ListItems, other.ListItems);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(ObservationList& left, ObservationList& right)
    {
        left.swap(right);
    }

    
    struct ObservationDescription
      : ::HealthCare::Schemas::BaseEntity
    {
        ::HealthCare::Schemas::ObservationKind kind;
        bond::maybe<std::vector<std::string> > SuggestedValues;
        bond::maybe<std::vector<std::string> > RestrictedValues;
        bond::maybe<std::vector< ::HealthCare::Schemas::BasicRange> > Ranges;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::ObservationList> > ObsList;
        bond::maybe<bond::nullable<std::string> > Name;
        bond::maybe<bond::nullable<std::string> > Description;
        bond::maybe<bond::nullable<int64_t> > EffectiveDate;
        bond::maybe<bond::nullable<int64_t> > ExpiryDate;
        bond::maybe<bond::nullable<int16_t> > IsGenericItem;
        bond::maybe<bond::nullable<int16_t> > IsClientCharacteristic;
        bond::maybe<bond::nullable<std::string> > PhysicalNoteType;
        bond::maybe<bond::nullable<int16_t> > IsOutcome;
        bond::maybe<bond::nullable<std::string> > DataType;
        bond::maybe<bond::nullable<std::string> > CalculationType;
        bond::maybe<bond::nullable<std::string> > FluidBalanceType;
        bond::maybe<bond::nullable<std::string> > SummaryType;
        bond::maybe<bond::nullable<std::string> > CumulativeStartOfDayType;
        bond::maybe<bond::nullable<int16_t> > CalculateCumulative;
        bond::maybe<bond::nullable<std::string> > I0Subtype;
        bond::maybe<bond::nullable<int16_t> > IncludeInTotals;
        bond::maybe<bond::nullable<int16_t> > AllowApproximates;
        bond::maybe<bond::nullable<int16_t> > ShowAbsoluteValues;
        bond::maybe<bond::nullable<std::string> > UnitOfMeasure;
        bond::maybe<bond::nullable<int16_t> > NumDecimalsIn;
        bond::maybe<bond::nullable<int16_t> > NumDecimalsOut;
        bond::maybe<bond::nullable<int16_t> > UseNumericSeparator;
        bond::maybe<bond::nullable<int16_t> > MaximumLength;
        bond::maybe<bond::nullable<int16_t> > NumberOfLines;
        bond::maybe<bond::nullable<int16_t> > IsMultiSelect;
        bond::maybe<bond::nullable<std::string> > ValueSeparator;
        bond::maybe<bond::nullable<std::string> > TextValidationDict;
        bond::maybe<bond::nullable<int16_t> > HasNumericEquiv;
        bond::maybe<bond::nullable<std::string> > TrueText;
        bond::maybe<bond::nullable<std::string> > FalseText;
        bond::maybe<bond::nullable<int16_t> > DisplayUOM;
        bond::maybe<bond::nullable<std::string> > ModifyFormFilter;
        bond::maybe<bond::nullable<int16_t> > IsDeviceInterface;
        bond::maybe<bond::nullable<std::string> > ParameterType;
        bond::maybe<bond::nullable<int16_t> > RoundOffResult;
        bond::maybe<bond::nullable<int16_t> > OutputNumDecimalsIn;
        bond::maybe<bond::nullable<int16_t> > OutputNumDecimalsOut;
        bond::maybe<bond::nullable<int16_t> > RateNumDecimalsIn;
        bond::maybe<bond::nullable<int16_t> > RateNumDecimalsOut;
        bond::maybe<bond::nullable<int16_t> > DoseNumDecimalsIn;
        bond::maybe<bond::nullable<int16_t> > DoseNumDecimalsOut;
        bond::maybe<bond::nullable<int16_t> > EnterDetailDialog;
        bond::maybe<bond::nullable<std::string> > UserDictionaryCode;
        bond::maybe<bond::nullable<std::string> > Formula;
        bond::maybe<bond::nullable<std::string> > CalculationHeading;
        bond::maybe<bond::nullable<std::string> > MaskingFormat;
        bond::maybe<bond::nullable<int16_t> > IsHorizontal;
        bond::maybe<bond::nullable<std::string> > RightJustifiedLabel;
        bond::maybe<bond::nullable<std::string> > RightJustifiedLabelFontSize;
        bond::maybe<bond::nullable<std::string> > LeftJustifiedLabel;
        bond::maybe<bond::nullable<std::string> > LeftJustifiedLabelFontSize;
        bond::maybe<bond::nullable<std::string> > CommentFontSize;
        bond::maybe<bond::nullable<std::string> > ModifyFormFilterFontSize;
        bond::maybe<bond::nullable<std::string> > FontSize;
        bond::maybe<bond::nullable<std::string> > ComponentFontSize;
        bond::maybe<bond::nullable<int16_t> > EnterIntake;
        bond::maybe<bond::nullable<int16_t> > EnterOutput;
        bond::maybe<bond::nullable<int16_t> > EnterNet;
        bond::maybe<bond::nullable<int16_t> > Enter24Hr;
        bond::maybe<bond::nullable<std::string> > LabelIn;
        bond::maybe<bond::nullable<std::string> > LabelOut;
        bond::maybe<bond::nullable<std::string> > LabelNet;
        bond::maybe<bond::nullable<std::string> > Label24Hr;
        bond::maybe<bond::nullable<std::string> > TotalVolume;
        bond::maybe<bond::nullable<std::string> > TotalVolumeUnit;
        bond::maybe<bond::nullable<std::string> > Rate;
        bond::maybe<bond::nullable<std::string> > RateUnit;
        bond::maybe<bond::nullable<int16_t> > NoEditing;
        bond::maybe<bond::nullable<int16_t> > HasModifier;
        bond::maybe<bond::nullable<int16_t> > IsLocked;
        bond::maybe<bond::nullable<int16_t> > HasWDL;
        bond::maybe<bond::nullable<std::string> > SiteFontSize;
        bond::maybe<bond::nullable<std::string> > SiteDeviceFontSize;
        bond::maybe<bond::nullable<int16_t> > IsRTFInput;
        
        ObservationDescription()
          : kind(::HealthCare::Schemas::_bond_enumerators::ObservationKind::none)
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        ObservationDescription(const ObservationDescription& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        ObservationDescription(ObservationDescription&& other)
          : ::HealthCare::Schemas::BaseEntity(std::move(other)),
            kind(std::move(other.kind)),
            SuggestedValues(std::move(other.SuggestedValues)),
            RestrictedValues(std::move(other.RestrictedValues)),
            Ranges(std::move(other.Ranges)),
            ObsList(std::move(other.ObsList)),
            Name(std::move(other.Name)),
            Description(std::move(other.Description)),
            EffectiveDate(std::move(other.EffectiveDate)),
            ExpiryDate(std::move(other.ExpiryDate)),
            IsGenericItem(std::move(other.IsGenericItem)),
            IsClientCharacteristic(std::move(other.IsClientCharacteristic)),
            PhysicalNoteType(std::move(other.PhysicalNoteType)),
            IsOutcome(std::move(other.IsOutcome)),
            DataType(std::move(other.DataType)),
            CalculationType(std::move(other.CalculationType)),
            FluidBalanceType(std::move(other.FluidBalanceType)),
            SummaryType(std::move(other.SummaryType)),
            CumulativeStartOfDayType(std::move(other.CumulativeStartOfDayType)),
            CalculateCumulative(std::move(other.CalculateCumulative)),
            I0Subtype(std::move(other.I0Subtype)),
            IncludeInTotals(std::move(other.IncludeInTotals)),
            AllowApproximates(std::move(other.AllowApproximates)),
            ShowAbsoluteValues(std::move(other.ShowAbsoluteValues)),
            UnitOfMeasure(std::move(other.UnitOfMeasure)),
            NumDecimalsIn(std::move(other.NumDecimalsIn)),
            NumDecimalsOut(std::move(other.NumDecimalsOut)),
            UseNumericSeparator(std::move(other.UseNumericSeparator)),
            MaximumLength(std::move(other.MaximumLength)),
            NumberOfLines(std::move(other.NumberOfLines)),
            IsMultiSelect(std::move(other.IsMultiSelect)),
            ValueSeparator(std::move(other.ValueSeparator)),
            TextValidationDict(std::move(other.TextValidationDict)),
            HasNumericEquiv(std::move(other.HasNumericEquiv)),
            TrueText(std::move(other.TrueText)),
            FalseText(std::move(other.FalseText)),
            DisplayUOM(std::move(other.DisplayUOM)),
            ModifyFormFilter(std::move(other.ModifyFormFilter)),
            IsDeviceInterface(std::move(other.IsDeviceInterface)),
            ParameterType(std::move(other.ParameterType)),
            RoundOffResult(std::move(other.RoundOffResult)),
            OutputNumDecimalsIn(std::move(other.OutputNumDecimalsIn)),
            OutputNumDecimalsOut(std::move(other.OutputNumDecimalsOut)),
            RateNumDecimalsIn(std::move(other.RateNumDecimalsIn)),
            RateNumDecimalsOut(std::move(other.RateNumDecimalsOut)),
            DoseNumDecimalsIn(std::move(other.DoseNumDecimalsIn)),
            DoseNumDecimalsOut(std::move(other.DoseNumDecimalsOut)),
            EnterDetailDialog(std::move(other.EnterDetailDialog)),
            UserDictionaryCode(std::move(other.UserDictionaryCode)),
            Formula(std::move(other.Formula)),
            CalculationHeading(std::move(other.CalculationHeading)),
            MaskingFormat(std::move(other.MaskingFormat)),
            IsHorizontal(std::move(other.IsHorizontal)),
            RightJustifiedLabel(std::move(other.RightJustifiedLabel)),
            RightJustifiedLabelFontSize(std::move(other.RightJustifiedLabelFontSize)),
            LeftJustifiedLabel(std::move(other.LeftJustifiedLabel)),
            LeftJustifiedLabelFontSize(std::move(other.LeftJustifiedLabelFontSize)),
            CommentFontSize(std::move(other.CommentFontSize)),
            ModifyFormFilterFontSize(std::move(other.ModifyFormFilterFontSize)),
            FontSize(std::move(other.FontSize)),
            ComponentFontSize(std::move(other.ComponentFontSize)),
            EnterIntake(std::move(other.EnterIntake)),
            EnterOutput(std::move(other.EnterOutput)),
            EnterNet(std::move(other.EnterNet)),
            Enter24Hr(std::move(other.Enter24Hr)),
            LabelIn(std::move(other.LabelIn)),
            LabelOut(std::move(other.LabelOut)),
            LabelNet(std::move(other.LabelNet)),
            Label24Hr(std::move(other.Label24Hr)),
            TotalVolume(std::move(other.TotalVolume)),
            TotalVolumeUnit(std::move(other.TotalVolumeUnit)),
            Rate(std::move(other.Rate)),
            RateUnit(std::move(other.RateUnit)),
            NoEditing(std::move(other.NoEditing)),
            HasModifier(std::move(other.HasModifier)),
            IsLocked(std::move(other.IsLocked)),
            HasWDL(std::move(other.HasWDL)),
            SiteFontSize(std::move(other.SiteFontSize)),
            SiteDeviceFontSize(std::move(other.SiteDeviceFontSize)),
            IsRTFInput(std::move(other.IsRTFInput))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        ObservationDescription& operator=(const ObservationDescription& other) = default;
#endif

        bool operator==(const ObservationDescription& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseEntity&>(*this) == static_cast<const ::HealthCare::Schemas::BaseEntity&>( other))
                && (kind == other.kind)
                && (SuggestedValues == other.SuggestedValues)
                && (RestrictedValues == other.RestrictedValues)
                && (Ranges == other.Ranges)
                && (ObsList == other.ObsList)
                && (Name == other.Name)
                && (Description == other.Description)
                && (EffectiveDate == other.EffectiveDate)
                && (ExpiryDate == other.ExpiryDate)
                && (IsGenericItem == other.IsGenericItem)
                && (IsClientCharacteristic == other.IsClientCharacteristic)
                && (PhysicalNoteType == other.PhysicalNoteType)
                && (IsOutcome == other.IsOutcome)
                && (DataType == other.DataType)
                && (CalculationType == other.CalculationType)
                && (FluidBalanceType == other.FluidBalanceType)
                && (SummaryType == other.SummaryType)
                && (CumulativeStartOfDayType == other.CumulativeStartOfDayType)
                && (CalculateCumulative == other.CalculateCumulative)
                && (I0Subtype == other.I0Subtype)
                && (IncludeInTotals == other.IncludeInTotals)
                && (AllowApproximates == other.AllowApproximates)
                && (ShowAbsoluteValues == other.ShowAbsoluteValues)
                && (UnitOfMeasure == other.UnitOfMeasure)
                && (NumDecimalsIn == other.NumDecimalsIn)
                && (NumDecimalsOut == other.NumDecimalsOut)
                && (UseNumericSeparator == other.UseNumericSeparator)
                && (MaximumLength == other.MaximumLength)
                && (NumberOfLines == other.NumberOfLines)
                && (IsMultiSelect == other.IsMultiSelect)
                && (ValueSeparator == other.ValueSeparator)
                && (TextValidationDict == other.TextValidationDict)
                && (HasNumericEquiv == other.HasNumericEquiv)
                && (TrueText == other.TrueText)
                && (FalseText == other.FalseText)
                && (DisplayUOM == other.DisplayUOM)
                && (ModifyFormFilter == other.ModifyFormFilter)
                && (IsDeviceInterface == other.IsDeviceInterface)
                && (ParameterType == other.ParameterType)
                && (RoundOffResult == other.RoundOffResult)
                && (OutputNumDecimalsIn == other.OutputNumDecimalsIn)
                && (OutputNumDecimalsOut == other.OutputNumDecimalsOut)
                && (RateNumDecimalsIn == other.RateNumDecimalsIn)
                && (RateNumDecimalsOut == other.RateNumDecimalsOut)
                && (DoseNumDecimalsIn == other.DoseNumDecimalsIn)
                && (DoseNumDecimalsOut == other.DoseNumDecimalsOut)
                && (EnterDetailDialog == other.EnterDetailDialog)
                && (UserDictionaryCode == other.UserDictionaryCode)
                && (Formula == other.Formula)
                && (CalculationHeading == other.CalculationHeading)
                && (MaskingFormat == other.MaskingFormat)
                && (IsHorizontal == other.IsHorizontal)
                && (RightJustifiedLabel == other.RightJustifiedLabel)
                && (RightJustifiedLabelFontSize == other.RightJustifiedLabelFontSize)
                && (LeftJustifiedLabel == other.LeftJustifiedLabel)
                && (LeftJustifiedLabelFontSize == other.LeftJustifiedLabelFontSize)
                && (CommentFontSize == other.CommentFontSize)
                && (ModifyFormFilterFontSize == other.ModifyFormFilterFontSize)
                && (FontSize == other.FontSize)
                && (ComponentFontSize == other.ComponentFontSize)
                && (EnterIntake == other.EnterIntake)
                && (EnterOutput == other.EnterOutput)
                && (EnterNet == other.EnterNet)
                && (Enter24Hr == other.Enter24Hr)
                && (LabelIn == other.LabelIn)
                && (LabelOut == other.LabelOut)
                && (LabelNet == other.LabelNet)
                && (Label24Hr == other.Label24Hr)
                && (TotalVolume == other.TotalVolume)
                && (TotalVolumeUnit == other.TotalVolumeUnit)
                && (Rate == other.Rate)
                && (RateUnit == other.RateUnit)
                && (NoEditing == other.NoEditing)
                && (HasModifier == other.HasModifier)
                && (IsLocked == other.IsLocked)
                && (HasWDL == other.HasWDL)
                && (SiteFontSize == other.SiteFontSize)
                && (SiteDeviceFontSize == other.SiteDeviceFontSize)
                && (IsRTFInput == other.IsRTFInput);
        }

        bool operator!=(const ObservationDescription& other) const
        {
            return !(*this == other);
        }

        void swap(ObservationDescription& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseEntity::swap( other);
            swap(kind, other.kind);
            swap(SuggestedValues, other.SuggestedValues);
            swap(RestrictedValues, other.RestrictedValues);
            swap(Ranges, other.Ranges);
            swap(ObsList, other.ObsList);
            swap(Name, other.Name);
            swap(Description, other.Description);
            swap(EffectiveDate, other.EffectiveDate);
            swap(ExpiryDate, other.ExpiryDate);
            swap(IsGenericItem, other.IsGenericItem);
            swap(IsClientCharacteristic, other.IsClientCharacteristic);
            swap(PhysicalNoteType, other.PhysicalNoteType);
            swap(IsOutcome, other.IsOutcome);
            swap(DataType, other.DataType);
            swap(CalculationType, other.CalculationType);
            swap(FluidBalanceType, other.FluidBalanceType);
            swap(SummaryType, other.SummaryType);
            swap(CumulativeStartOfDayType, other.CumulativeStartOfDayType);
            swap(CalculateCumulative, other.CalculateCumulative);
            swap(I0Subtype, other.I0Subtype);
            swap(IncludeInTotals, other.IncludeInTotals);
            swap(AllowApproximates, other.AllowApproximates);
            swap(ShowAbsoluteValues, other.ShowAbsoluteValues);
            swap(UnitOfMeasure, other.UnitOfMeasure);
            swap(NumDecimalsIn, other.NumDecimalsIn);
            swap(NumDecimalsOut, other.NumDecimalsOut);
            swap(UseNumericSeparator, other.UseNumericSeparator);
            swap(MaximumLength, other.MaximumLength);
            swap(NumberOfLines, other.NumberOfLines);
            swap(IsMultiSelect, other.IsMultiSelect);
            swap(ValueSeparator, other.ValueSeparator);
            swap(TextValidationDict, other.TextValidationDict);
            swap(HasNumericEquiv, other.HasNumericEquiv);
            swap(TrueText, other.TrueText);
            swap(FalseText, other.FalseText);
            swap(DisplayUOM, other.DisplayUOM);
            swap(ModifyFormFilter, other.ModifyFormFilter);
            swap(IsDeviceInterface, other.IsDeviceInterface);
            swap(ParameterType, other.ParameterType);
            swap(RoundOffResult, other.RoundOffResult);
            swap(OutputNumDecimalsIn, other.OutputNumDecimalsIn);
            swap(OutputNumDecimalsOut, other.OutputNumDecimalsOut);
            swap(RateNumDecimalsIn, other.RateNumDecimalsIn);
            swap(RateNumDecimalsOut, other.RateNumDecimalsOut);
            swap(DoseNumDecimalsIn, other.DoseNumDecimalsIn);
            swap(DoseNumDecimalsOut, other.DoseNumDecimalsOut);
            swap(EnterDetailDialog, other.EnterDetailDialog);
            swap(UserDictionaryCode, other.UserDictionaryCode);
            swap(Formula, other.Formula);
            swap(CalculationHeading, other.CalculationHeading);
            swap(MaskingFormat, other.MaskingFormat);
            swap(IsHorizontal, other.IsHorizontal);
            swap(RightJustifiedLabel, other.RightJustifiedLabel);
            swap(RightJustifiedLabelFontSize, other.RightJustifiedLabelFontSize);
            swap(LeftJustifiedLabel, other.LeftJustifiedLabel);
            swap(LeftJustifiedLabelFontSize, other.LeftJustifiedLabelFontSize);
            swap(CommentFontSize, other.CommentFontSize);
            swap(ModifyFormFilterFontSize, other.ModifyFormFilterFontSize);
            swap(FontSize, other.FontSize);
            swap(ComponentFontSize, other.ComponentFontSize);
            swap(EnterIntake, other.EnterIntake);
            swap(EnterOutput, other.EnterOutput);
            swap(EnterNet, other.EnterNet);
            swap(Enter24Hr, other.Enter24Hr);
            swap(LabelIn, other.LabelIn);
            swap(LabelOut, other.LabelOut);
            swap(LabelNet, other.LabelNet);
            swap(Label24Hr, other.Label24Hr);
            swap(TotalVolume, other.TotalVolume);
            swap(TotalVolumeUnit, other.TotalVolumeUnit);
            swap(Rate, other.Rate);
            swap(RateUnit, other.RateUnit);
            swap(NoEditing, other.NoEditing);
            swap(HasModifier, other.HasModifier);
            swap(IsLocked, other.IsLocked);
            swap(HasWDL, other.HasWDL);
            swap(SiteFontSize, other.SiteFontSize);
            swap(SiteDeviceFontSize, other.SiteDeviceFontSize);
            swap(IsRTFInput, other.IsRTFInput);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseEntity::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(ObservationDescription& left, ObservationDescription& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

