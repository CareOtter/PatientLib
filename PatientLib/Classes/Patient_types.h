
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Patient_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>
#include <bond/core/nullable.h>
#include <bond/core/bonded.h>

#include "BaseClasses_types.h"
#include "BasePerson_types.h"
#include "InsurancePolicy_types.h"
#include "Appointment_types.h"
#include "HealthRecord_types.h"
#include "InsurancePolicy_types.h"
#include "BillingAccount_types.h"
#include "Note_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    struct Patient
      : ::HealthCare::Schemas::BasePerson
    {
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonName> > ResponsiblePersonName;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonName> > EmergencyPersonName;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonContactInformation> > ResponsiblePersonContactInformation;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonContactInformation> > EmergencyPersonContactInformation;
        bond::nullable<bond::bonded< ::HealthCare::Schemas::BillingAccount> > BillingAccount;
        bond::nullable<bond::bonded< ::HealthCare::Schemas::BaseItemCollection< ::HealthCare::Schemas::Appointment> > > Appointments;
        bond::nullable<bond::bonded< ::HealthCare::Schemas::HealthRecord> > HealthRecord;
        bond::maybe<bond::nullable<std::string> > SocialSecurityNumber;
        bond::nullable<bond::bonded< ::HealthCare::Schemas::BaseItemCollection< ::HealthCare::Schemas::InsurancePolicy> > > InsurancePolicies;
        bond::maybe<bond::nullable<std::string> > EmergencyContactRelationship;
        bond::maybe<bond::nullable<std::string> > ResponsiblePartyRelationship;
        bond::maybe<bond::nullable<int64_t> > ResponsiblePartyDateOfBirth;
        bond::nullable<bond::bonded< ::HealthCare::Schemas::BaseItemCollection< ::HealthCare::Schemas::Note> > > Notes;
        bond::maybe<bond::nullable<std::string> > ClinicalId;
        
        Patient()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Patient(const Patient& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Patient(Patient&& other)
          : ::HealthCare::Schemas::BasePerson(std::move(other)),
            ResponsiblePersonName(std::move(other.ResponsiblePersonName)),
            EmergencyPersonName(std::move(other.EmergencyPersonName)),
            ResponsiblePersonContactInformation(std::move(other.ResponsiblePersonContactInformation)),
            EmergencyPersonContactInformation(std::move(other.EmergencyPersonContactInformation)),
            BillingAccount(std::move(other.BillingAccount)),
            Appointments(std::move(other.Appointments)),
            HealthRecord(std::move(other.HealthRecord)),
            SocialSecurityNumber(std::move(other.SocialSecurityNumber)),
            InsurancePolicies(std::move(other.InsurancePolicies)),
            EmergencyContactRelationship(std::move(other.EmergencyContactRelationship)),
            ResponsiblePartyRelationship(std::move(other.ResponsiblePartyRelationship)),
            ResponsiblePartyDateOfBirth(std::move(other.ResponsiblePartyDateOfBirth)),
            Notes(std::move(other.Notes)),
            ClinicalId(std::move(other.ClinicalId))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Patient& operator=(const Patient& other) = default;
#endif

        bool operator==(const Patient& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BasePerson&>(*this) == static_cast<const ::HealthCare::Schemas::BasePerson&>( other))
                && (ResponsiblePersonName == other.ResponsiblePersonName)
                && (EmergencyPersonName == other.EmergencyPersonName)
                && (ResponsiblePersonContactInformation == other.ResponsiblePersonContactInformation)
                && (EmergencyPersonContactInformation == other.EmergencyPersonContactInformation)
                && (BillingAccount == other.BillingAccount)
                && (Appointments == other.Appointments)
                && (HealthRecord == other.HealthRecord)
                && (SocialSecurityNumber == other.SocialSecurityNumber)
                && (InsurancePolicies == other.InsurancePolicies)
                && (EmergencyContactRelationship == other.EmergencyContactRelationship)
                && (ResponsiblePartyRelationship == other.ResponsiblePartyRelationship)
                && (ResponsiblePartyDateOfBirth == other.ResponsiblePartyDateOfBirth)
                && (Notes == other.Notes)
                && (ClinicalId == other.ClinicalId);
        }

        bool operator!=(const Patient& other) const
        {
            return !(*this == other);
        }

        void swap(Patient& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BasePerson::swap( other);
            swap(ResponsiblePersonName, other.ResponsiblePersonName);
            swap(EmergencyPersonName, other.EmergencyPersonName);
            swap(ResponsiblePersonContactInformation, other.ResponsiblePersonContactInformation);
            swap(EmergencyPersonContactInformation, other.EmergencyPersonContactInformation);
            swap(BillingAccount, other.BillingAccount);
            swap(Appointments, other.Appointments);
            swap(HealthRecord, other.HealthRecord);
            swap(SocialSecurityNumber, other.SocialSecurityNumber);
            swap(InsurancePolicies, other.InsurancePolicies);
            swap(EmergencyContactRelationship, other.EmergencyContactRelationship);
            swap(ResponsiblePartyRelationship, other.ResponsiblePartyRelationship);
            swap(ResponsiblePartyDateOfBirth, other.ResponsiblePartyDateOfBirth);
            swap(Notes, other.Notes);
            swap(ClinicalId, other.ClinicalId);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BasePerson::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(Patient& left, Patient& right)
    {
        left.swap(right);
    }

    
    struct EmergencyPatient
      : ::HealthCare::Schemas::BasePerson
    {
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonName> > ResponsiblePersonName;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonName> > EmergencyPersonName;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonContactInformation> > ResponsiblePersonContactInformation;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonContactInformation> > EmergencyPersonContactInformation;
        
        EmergencyPatient()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        EmergencyPatient(const EmergencyPatient& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        EmergencyPatient(EmergencyPatient&& other)
          : ::HealthCare::Schemas::BasePerson(std::move(other)),
            ResponsiblePersonName(std::move(other.ResponsiblePersonName)),
            EmergencyPersonName(std::move(other.EmergencyPersonName)),
            ResponsiblePersonContactInformation(std::move(other.ResponsiblePersonContactInformation)),
            EmergencyPersonContactInformation(std::move(other.EmergencyPersonContactInformation))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        EmergencyPatient& operator=(const EmergencyPatient& other) = default;
#endif

        bool operator==(const EmergencyPatient& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BasePerson&>(*this) == static_cast<const ::HealthCare::Schemas::BasePerson&>( other))
                && (ResponsiblePersonName == other.ResponsiblePersonName)
                && (EmergencyPersonName == other.EmergencyPersonName)
                && (ResponsiblePersonContactInformation == other.ResponsiblePersonContactInformation)
                && (EmergencyPersonContactInformation == other.EmergencyPersonContactInformation);
        }

        bool operator!=(const EmergencyPatient& other) const
        {
            return !(*this == other);
        }

        void swap(EmergencyPatient& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BasePerson::swap( other);
            swap(ResponsiblePersonName, other.ResponsiblePersonName);
            swap(EmergencyPersonName, other.EmergencyPersonName);
            swap(ResponsiblePersonContactInformation, other.ResponsiblePersonContactInformation);
            swap(EmergencyPersonContactInformation, other.EmergencyPersonContactInformation);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BasePerson::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(EmergencyPatient& left, EmergencyPatient& right)
    {
        left.swap(right);
    }

    
    struct RegistrationPatient
      : ::HealthCare::Schemas::BasePerson
    {
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonName> > ResponsiblePersonName;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonName> > EmergencyPersonName;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonContactInformation> > ResponsiblePersonContactInformation;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonContactInformation> > EmergencyPersonContactInformation;
        bond::nullable<bond::bonded< ::HealthCare::Schemas::BillingAccount> > BillingAccount;
        
        RegistrationPatient()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        RegistrationPatient(const RegistrationPatient& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        RegistrationPatient(RegistrationPatient&& other)
          : ::HealthCare::Schemas::BasePerson(std::move(other)),
            ResponsiblePersonName(std::move(other.ResponsiblePersonName)),
            EmergencyPersonName(std::move(other.EmergencyPersonName)),
            ResponsiblePersonContactInformation(std::move(other.ResponsiblePersonContactInformation)),
            EmergencyPersonContactInformation(std::move(other.EmergencyPersonContactInformation)),
            BillingAccount(std::move(other.BillingAccount))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        RegistrationPatient& operator=(const RegistrationPatient& other) = default;
#endif

        bool operator==(const RegistrationPatient& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BasePerson&>(*this) == static_cast<const ::HealthCare::Schemas::BasePerson&>( other))
                && (ResponsiblePersonName == other.ResponsiblePersonName)
                && (EmergencyPersonName == other.EmergencyPersonName)
                && (ResponsiblePersonContactInformation == other.ResponsiblePersonContactInformation)
                && (EmergencyPersonContactInformation == other.EmergencyPersonContactInformation)
                && (BillingAccount == other.BillingAccount);
        }

        bool operator!=(const RegistrationPatient& other) const
        {
            return !(*this == other);
        }

        void swap(RegistrationPatient& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BasePerson::swap( other);
            swap(ResponsiblePersonName, other.ResponsiblePersonName);
            swap(EmergencyPersonName, other.EmergencyPersonName);
            swap(ResponsiblePersonContactInformation, other.ResponsiblePersonContactInformation);
            swap(EmergencyPersonContactInformation, other.EmergencyPersonContactInformation);
            swap(BillingAccount, other.BillingAccount);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BasePerson::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(RegistrationPatient& left, RegistrationPatient& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

