
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : IndexSearch_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "IndexSearch_types.h"
#include <bond/core/reflection.h>

namespace HealthCare
{
namespace Schemas
{
namespace Index
{
    //
    // IndexedProperty
    //
    struct IndexedProperty::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_SearchTerm_metadata;
        private: static const bond::Metadata s_Value_metadata;
        private: static const bond::Metadata s_Conditionals_metadata;

        public: struct var
        {
            // SearchTerm
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                IndexedProperty,
                bond::maybe<bond::nullable<std::string> >,
                &IndexedProperty::SearchTerm,
                &s_SearchTerm_metadata
            > SearchTerm;
        
            // Value
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                IndexedProperty,
                bond::maybe<bond::nullable<std::string> >,
                &IndexedProperty::Value,
                &s_Value_metadata
            > Value;
        
            // Conditionals
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                IndexedProperty,
                std::vector<std::string>,
                &IndexedProperty::Conditionals,
                &s_Conditionals_metadata
            > Conditionals;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::Conditionals>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::Value>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::SearchTerm>::type fields3;

        public: typedef fields3::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("IndexedProperty", "HealthCare.Schemas.Index.IndexedProperty",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // IndexSearch
    //
    struct IndexSearch::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_SearchTerms_metadata;
        private: static const bond::Metadata s_View_metadata;

        public: struct var
        {
            // SearchTerms
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                IndexSearch,
                std::vector< ::HealthCare::Schemas::Index::IndexedProperty>,
                &IndexSearch::SearchTerms,
                &s_SearchTerms_metadata
            > SearchTerms;
        
            // View
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                IndexSearch,
                bond::nullable<bond::bonded< ::HealthCare::Schemas::Index::ViewCollection> >,
                &IndexSearch::View,
                &s_View_metadata
            > View;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::View>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::SearchTerms>::type fields2;

        public: typedef fields2::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("IndexSearch", "HealthCare.Schemas.Index.IndexSearch",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // ViewCollection
    //
    struct ViewCollection::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_ViewFields_metadata;

        public: struct var
        {
            // ViewFields
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                ViewCollection,
                std::vector<std::string>,
                &ViewCollection::ViewFields,
                &s_ViewFields_metadata
            > ViewFields;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::ViewFields>::type fields1;

        public: typedef fields1::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("ViewCollection", "HealthCare.Schemas.Index.ViewCollection",
                bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace Index
} // namespace Schemas
} // namespace HealthCare
