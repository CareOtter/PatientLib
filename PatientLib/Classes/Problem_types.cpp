
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Problem_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "Problem_reflection.h"
#include <bond/core/exception.h>

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace ProblemStatus
    {
        const
        std::map<std::string, enum ProblemStatus> _name_to_value_ProblemStatus =
            boost::assign::map_list_of<std::string, enum ProblemStatus>
                ("Active", Active)
                ("Inactive", Inactive)
                ("Historical", Historical);

        const
        std::map<enum ProblemStatus, std::string> _value_to_name_ProblemStatus =
            bond::reverse_map(_name_to_value_ProblemStatus);

        const std::string& ToString(enum ProblemStatus value)
        {
            std::map<enum ProblemStatus, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "ProblemStatus");

            return it->second;
        }

        void FromString(const std::string& name, enum ProblemStatus& value)
        {
            std::map<std::string, enum ProblemStatus>::const_iterator it =
                _name_to_value_ProblemStatus.find(name);

            if (_name_to_value_ProblemStatus.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "ProblemStatus");

            value = it->second;
        }

    } // namespace ProblemStatus
    } // namespace _bond_enumerators

    
    namespace _bond_enumerators
    {
    namespace ProblemType
    {
        const
        std::map<std::string, enum ProblemType> _name_to_value_ProblemType =
            boost::assign::map_list_of<std::string, enum ProblemType>
                ("Unknown", Unknown)
                ("Acute", Acute)
                ("Chronic", Chronic);

        const
        std::map<enum ProblemType, std::string> _value_to_name_ProblemType =
            bond::reverse_map(_name_to_value_ProblemType);

        const std::string& ToString(enum ProblemType value)
        {
            std::map<enum ProblemType, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "ProblemType");

            return it->second;
        }

        void FromString(const std::string& name, enum ProblemType& value)
        {
            std::map<std::string, enum ProblemType>::const_iterator it =
                _name_to_value_ProblemType.find(name);

            if (_name_to_value_ProblemType.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "ProblemType");

            value = it->second;
        }

    } // namespace ProblemType
    } // namespace _bond_enumerators

    
    const bond::Metadata RelatedOrder::Schema::metadata
        = RelatedOrder::Schema::GetMetadata();

    
    const bond::Metadata RelatedMedication::Schema::metadata
        = RelatedMedication::Schema::GetMetadata();

    
    const bond::Metadata Problem::Schema::metadata
        = Problem::Schema::GetMetadata();
    
    const bond::Metadata Problem::Schema::s_Onset_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Onset");
    
    const bond::Metadata Problem::Schema::s_Resolved_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Resolved");
    
    const bond::Metadata Problem::Schema::s_RelatedMedications_metadata
        = bond::reflection::MetadataInit("RelatedMedications");
    
    const bond::Metadata Problem::Schema::s_ProblemStatus_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ProblemStatus");
    
    const bond::Metadata Problem::Schema::s_ProblemType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ProblemType");
    
    const bond::Metadata Problem::Schema::s_ManagingProviderName_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ManagingProviderName");
    
    const bond::Metadata Problem::Schema::s_LastAssessed_metadata
        = bond::reflection::MetadataInit(bond::nothing, "LastAssessed");
    
    const bond::Metadata Problem::Schema::s_RelatedOrders_metadata
        = bond::reflection::MetadataInit("RelatedOrders");

    
} // namespace Schemas
} // namespace HealthCare
