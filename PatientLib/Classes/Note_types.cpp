
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Note_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "Note_reflection.h"
#include <bond/core/exception.h>

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace NoteStatus
    {
        const
        std::map<std::string, enum NoteStatus> _name_to_value_NoteStatus =
            boost::assign::map_list_of<std::string, enum NoteStatus>
                ("Open", Open)
                ("Closed", Closed);

        const
        std::map<enum NoteStatus, std::string> _value_to_name_NoteStatus =
            bond::reverse_map(_name_to_value_NoteStatus);

        const std::string& ToString(enum NoteStatus value)
        {
            std::map<enum NoteStatus, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "NoteStatus");

            return it->second;
        }

        void FromString(const std::string& name, enum NoteStatus& value)
        {
            std::map<std::string, enum NoteStatus>::const_iterator it =
                _name_to_value_NoteStatus.find(name);

            if (_name_to_value_NoteStatus.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "NoteStatus");

            value = it->second;
        }

    } // namespace NoteStatus
    } // namespace _bond_enumerators

    
    namespace _bond_enumerators
    {
    namespace ReferenceType
    {
        const
        std::map<std::string, enum ReferenceType> _name_to_value_ReferenceType =
            boost::assign::map_list_of<std::string, enum ReferenceType>
                ("Allergies", Allergies)
                ("Medications", Medications)
                ("SurgicalProcedures", SurgicalProcedures)
                ("FamilyProblems", FamilyProblems)
                ("SocialHistoryItems", SocialHistoryItems)
                ("Problems", Problems)
                ("Observations", Observations)
                ("Immunizations", Immunizations)
                ("Orders", Orders)
                ("Examinations", Examinations);

        const
        std::map<enum ReferenceType, std::string> _value_to_name_ReferenceType =
            bond::reverse_map(_name_to_value_ReferenceType);

        const std::string& ToString(enum ReferenceType value)
        {
            std::map<enum ReferenceType, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "ReferenceType");

            return it->second;
        }

        void FromString(const std::string& name, enum ReferenceType& value)
        {
            std::map<std::string, enum ReferenceType>::const_iterator it =
                _name_to_value_ReferenceType.find(name);

            if (_name_to_value_ReferenceType.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "ReferenceType");

            value = it->second;
        }

    } // namespace ReferenceType
    } // namespace _bond_enumerators

    
    const bond::Metadata NoteReference::Schema::metadata
        = NoteReference::Schema::GetMetadata();
    
    const bond::Metadata NoteReference::Schema::s_ReferenceType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ReferenceType");
    
    const bond::Metadata NoteReference::Schema::s_ReferenceId_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ReferenceId");

    
    const bond::Metadata Note::Schema::metadata
        = Note::Schema::GetMetadata();
    
    const bond::Metadata Note::Schema::s_NoteStatus_metadata
        = bond::reflection::MetadataInit(bond::nothing, "NoteStatus");
    
    const bond::Metadata Note::Schema::s_NoteDate_metadata
        = bond::reflection::MetadataInit(bond::nothing, "NoteDate");
    
    const bond::Metadata Note::Schema::s_References_metadata
        = bond::reflection::MetadataInit("References");
    
    const bond::Metadata Note::Schema::s_HealthRecordSnapshot_metadata
        = bond::reflection::MetadataInit(bond::nothing, "HealthRecordSnapshot");
    
    const bond::Metadata Note::Schema::s_Comments_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Comments");
    
    const bond::Metadata Note::Schema::s_ChiefComplaint_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ChiefComplaint");

    
} // namespace Schemas
} // namespace HealthCare
