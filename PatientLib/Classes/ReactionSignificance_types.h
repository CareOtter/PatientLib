
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : ReactionSignificance_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>



namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace ReactionSignificance
    {
        enum ReactionSignificance
        {
            Major,
            Minor,
            Mild
        };
        
        extern const std::map<enum ReactionSignificance, std::string> _value_to_name_ReactionSignificance;
        extern const std::map<std::string, enum ReactionSignificance> _name_to_value_ReactionSignificance;

        inline
        const char* GetTypeName(enum ReactionSignificance)
        {
            return "ReactionSignificance";
        }

        inline
        const char* GetTypeName(enum ReactionSignificance, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.ReactionSignificance";
        }

        inline
        const std::map<enum ReactionSignificance, std::string>& GetValueToNameMap(enum ReactionSignificance)
        {
            return _value_to_name_ReactionSignificance;
        }

        inline
        const std::map<std::string, enum ReactionSignificance>& GetNameToValueMap(enum ReactionSignificance)
        {
            return _name_to_value_ReactionSignificance;
        }

        const std::string& ToString(enum ReactionSignificance value);

        void FromString(const std::string& name, enum ReactionSignificance& value);

        inline
        bool ToEnum(enum ReactionSignificance& value, const std::string& name)
        {
            std::map<std::string, enum ReactionSignificance>::const_iterator it =
                _name_to_value_ReactionSignificance.find(name);

            if (_name_to_value_ReactionSignificance.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace ReactionSignificance
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::ReactionSignificance;
    
} // namespace Schemas
} // namespace HealthCare

