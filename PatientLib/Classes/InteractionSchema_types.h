
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : InteractionSchema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace ItemType
    {
        enum ItemType
        {
            Unknown,
            Patient,
            Facility,
            User,
            UserAuthData,
            Provider,
            Appointment,
            Dynamic
        };
        
        extern const std::map<enum ItemType, std::string> _value_to_name_ItemType;
        extern const std::map<std::string, enum ItemType> _name_to_value_ItemType;

        inline
        const char* GetTypeName(enum ItemType)
        {
            return "ItemType";
        }

        inline
        const char* GetTypeName(enum ItemType, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.ItemType";
        }

        inline
        const std::map<enum ItemType, std::string>& GetValueToNameMap(enum ItemType)
        {
            return _value_to_name_ItemType;
        }

        inline
        const std::map<std::string, enum ItemType>& GetNameToValueMap(enum ItemType)
        {
            return _name_to_value_ItemType;
        }

        const std::string& ToString(enum ItemType value);

        void FromString(const std::string& name, enum ItemType& value);

        inline
        bool ToEnum(enum ItemType& value, const std::string& name)
        {
            std::map<std::string, enum ItemType>::const_iterator it =
                _name_to_value_ItemType.find(name);

            if (_name_to_value_ItemType.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace ItemType
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::ItemType;
    

    
    struct CodeValue
      : ::HealthCare::Schemas::BaseItem
    {
        bond::maybe<bond::nullable<std::string> > Code;
        
        CodeValue()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        CodeValue(const CodeValue& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        CodeValue(CodeValue&& other)
          : ::HealthCare::Schemas::BaseItem(std::move(other)),
            Code(std::move(other.Code))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        CodeValue& operator=(const CodeValue& other) = default;
#endif

        bool operator==(const CodeValue& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseItem&>( other))
                && (Code == other.Code);
        }

        bool operator!=(const CodeValue& other) const
        {
            return !(*this == other);
        }

        void swap(CodeValue& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseItem::swap( other);
            swap(Code, other.Code);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(CodeValue& left, CodeValue& right)
    {
        left.swap(right);
    }

    
    struct InteractionVerbCodeValue
      : ::HealthCare::Schemas::CodeValue
    {
        bond::maybe<bond::nullable<std::string> > Verb;
        bond::maybe<bond::nullable<std::string> > Alternate;
        
        InteractionVerbCodeValue()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        InteractionVerbCodeValue(const InteractionVerbCodeValue& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        InteractionVerbCodeValue(InteractionVerbCodeValue&& other)
          : ::HealthCare::Schemas::CodeValue(std::move(other)),
            Verb(std::move(other.Verb)),
            Alternate(std::move(other.Alternate))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        InteractionVerbCodeValue& operator=(const InteractionVerbCodeValue& other) = default;
#endif

        bool operator==(const InteractionVerbCodeValue& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::CodeValue&>(*this) == static_cast<const ::HealthCare::Schemas::CodeValue&>( other))
                && (Verb == other.Verb)
                && (Alternate == other.Alternate);
        }

        bool operator!=(const InteractionVerbCodeValue& other) const
        {
            return !(*this == other);
        }

        void swap(InteractionVerbCodeValue& other)
        {
            using std::swap;
            ::HealthCare::Schemas::CodeValue::swap( other);
            swap(Verb, other.Verb);
            swap(Alternate, other.Alternate);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::CodeValue::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(InteractionVerbCodeValue& left, InteractionVerbCodeValue& right)
    {
        left.swap(right);
    }

    
    struct RelationshipTypeCodeValue
      : ::HealthCare::Schemas::CodeValue
    {
        bond::maybe<bond::nullable<std::string> > Name;
        
        RelationshipTypeCodeValue()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        RelationshipTypeCodeValue(const RelationshipTypeCodeValue& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        RelationshipTypeCodeValue(RelationshipTypeCodeValue&& other)
          : ::HealthCare::Schemas::CodeValue(std::move(other)),
            Name(std::move(other.Name))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        RelationshipTypeCodeValue& operator=(const RelationshipTypeCodeValue& other) = default;
#endif

        bool operator==(const RelationshipTypeCodeValue& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::CodeValue&>(*this) == static_cast<const ::HealthCare::Schemas::CodeValue&>( other))
                && (Name == other.Name);
        }

        bool operator!=(const RelationshipTypeCodeValue& other) const
        {
            return !(*this == other);
        }

        void swap(RelationshipTypeCodeValue& other)
        {
            using std::swap;
            ::HealthCare::Schemas::CodeValue::swap( other);
            swap(Name, other.Name);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::CodeValue::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(RelationshipTypeCodeValue& left, RelationshipTypeCodeValue& right)
    {
        left.swap(right);
    }

    
    struct InteractionTypeCodeValue
      : ::HealthCare::Schemas::CodeValue
    {
        bond::maybe<bond::nullable< ::HealthCare::Schemas::InteractionVerbCodeValue> > InteractionVerb;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::RelationshipTypeCodeValue> > RelationshipType;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::ItemType> > AppliesToStartNodeType;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::ItemType> > AppliesToEndNodeType;
        bond::maybe<bond::nullable<bool> > IsRelationshipEstablisher;
        
        InteractionTypeCodeValue()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        InteractionTypeCodeValue(const InteractionTypeCodeValue& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        InteractionTypeCodeValue(InteractionTypeCodeValue&& other)
          : ::HealthCare::Schemas::CodeValue(std::move(other)),
            InteractionVerb(std::move(other.InteractionVerb)),
            RelationshipType(std::move(other.RelationshipType)),
            AppliesToStartNodeType(std::move(other.AppliesToStartNodeType)),
            AppliesToEndNodeType(std::move(other.AppliesToEndNodeType)),
            IsRelationshipEstablisher(std::move(other.IsRelationshipEstablisher))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        InteractionTypeCodeValue& operator=(const InteractionTypeCodeValue& other) = default;
#endif

        bool operator==(const InteractionTypeCodeValue& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::CodeValue&>(*this) == static_cast<const ::HealthCare::Schemas::CodeValue&>( other))
                && (InteractionVerb == other.InteractionVerb)
                && (RelationshipType == other.RelationshipType)
                && (AppliesToStartNodeType == other.AppliesToStartNodeType)
                && (AppliesToEndNodeType == other.AppliesToEndNodeType)
                && (IsRelationshipEstablisher == other.IsRelationshipEstablisher);
        }

        bool operator!=(const InteractionTypeCodeValue& other) const
        {
            return !(*this == other);
        }

        void swap(InteractionTypeCodeValue& other)
        {
            using std::swap;
            ::HealthCare::Schemas::CodeValue::swap( other);
            swap(InteractionVerb, other.InteractionVerb);
            swap(RelationshipType, other.RelationshipType);
            swap(AppliesToStartNodeType, other.AppliesToStartNodeType);
            swap(AppliesToEndNodeType, other.AppliesToEndNodeType);
            swap(IsRelationshipEstablisher, other.IsRelationshipEstablisher);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::CodeValue::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(InteractionTypeCodeValue& left, InteractionTypeCodeValue& right)
    {
        left.swap(right);
    }

    
    struct Interaction
      : ::HealthCare::Schemas::BaseItem
    {
        bond::maybe<bond::nullable<int64_t> > StartNode;
        bond::maybe<bond::nullable<int64_t> > EndNode;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::InteractionTypeCodeValue> > Type;
        
        Interaction()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Interaction(const Interaction& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Interaction(Interaction&& other)
          : ::HealthCare::Schemas::BaseItem(std::move(other)),
            StartNode(std::move(other.StartNode)),
            EndNode(std::move(other.EndNode)),
            Type(std::move(other.Type))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Interaction& operator=(const Interaction& other) = default;
#endif

        bool operator==(const Interaction& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseItem&>( other))
                && (StartNode == other.StartNode)
                && (EndNode == other.EndNode)
                && (Type == other.Type);
        }

        bool operator!=(const Interaction& other) const
        {
            return !(*this == other);
        }

        void swap(Interaction& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseItem::swap( other);
            swap(StartNode, other.StartNode);
            swap(EndNode, other.EndNode);
            swap(Type, other.Type);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(Interaction& left, Interaction& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

