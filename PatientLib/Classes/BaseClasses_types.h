
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : BaseClasses_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>
#include <bond/core/nullable.h>


namespace HealthCare
{
namespace Schemas
{
    
    struct BaseItem
    {
        bond::maybe<std::string> Id;
        bond::maybe<int64_t> CreatedDate;
        bond::maybe<int64_t> LastModifiedDate;
        
        BaseItem()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        BaseItem(const BaseItem& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        BaseItem(BaseItem&& other)
          : Id(std::move(other.Id)),
            CreatedDate(std::move(other.CreatedDate)),
            LastModifiedDate(std::move(other.LastModifiedDate))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        BaseItem& operator=(const BaseItem& other) = default;
#endif

        bool operator==(const BaseItem& other) const
        {
            return true
                && (Id == other.Id)
                && (CreatedDate == other.CreatedDate)
                && (LastModifiedDate == other.LastModifiedDate);
        }

        bool operator!=(const BaseItem& other) const
        {
            return !(*this == other);
        }

        void swap(BaseItem& other)
        {
            using std::swap;
            swap(Id, other.Id);
            swap(CreatedDate, other.CreatedDate);
            swap(LastModifiedDate, other.LastModifiedDate);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(BaseItem& left, BaseItem& right)
    {
        left.swap(right);
    }

    
    struct BaseEntity
    {
        int64_t Id;
        bond::maybe<int64_t> CreatedDate;
        bond::maybe<int64_t> LastModifiedDate;
        
        BaseEntity()
          : Id()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        BaseEntity(const BaseEntity& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        BaseEntity(BaseEntity&& other)
          : Id(std::move(other.Id)),
            CreatedDate(std::move(other.CreatedDate)),
            LastModifiedDate(std::move(other.LastModifiedDate))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        BaseEntity& operator=(const BaseEntity& other) = default;
#endif

        bool operator==(const BaseEntity& other) const
        {
            return true
                && (Id == other.Id)
                && (CreatedDate == other.CreatedDate)
                && (LastModifiedDate == other.LastModifiedDate);
        }

        bool operator!=(const BaseEntity& other) const
        {
            return !(*this == other);
        }

        void swap(BaseEntity& other)
        {
            using std::swap;
            swap(Id, other.Id);
            swap(CreatedDate, other.CreatedDate);
            swap(LastModifiedDate, other.LastModifiedDate);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(BaseEntity& left, BaseEntity& right)
    {
        left.swap(right);
    }

    
    struct Coordinates
    {
        bond::maybe<bond::nullable<double> > Longitude;
        bond::maybe<bond::nullable<double> > Latitude;
        
        Coordinates()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Coordinates(const Coordinates& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Coordinates(Coordinates&& other)
          : Longitude(std::move(other.Longitude)),
            Latitude(std::move(other.Latitude))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Coordinates& operator=(const Coordinates& other) = default;
#endif

        bool operator==(const Coordinates& other) const
        {
            return true
                && (Longitude == other.Longitude)
                && (Latitude == other.Latitude);
        }

        bool operator!=(const Coordinates& other) const
        {
            return !(*this == other);
        }

        void swap(Coordinates& other)
        {
            using std::swap;
            swap(Longitude, other.Longitude);
            swap(Latitude, other.Latitude);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(Coordinates& left, Coordinates& right)
    {
        left.swap(right);
    }

    
    struct LocatableBaseEntity
      : ::HealthCare::Schemas::BaseEntity
    {
        bond::nullable< ::HealthCare::Schemas::Coordinates> Coordinates;
        
        LocatableBaseEntity()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        LocatableBaseEntity(const LocatableBaseEntity& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        LocatableBaseEntity(LocatableBaseEntity&& other)
          : ::HealthCare::Schemas::BaseEntity(std::move(other)),
            Coordinates(std::move(other.Coordinates))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        LocatableBaseEntity& operator=(const LocatableBaseEntity& other) = default;
#endif

        bool operator==(const LocatableBaseEntity& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseEntity&>(*this) == static_cast<const ::HealthCare::Schemas::BaseEntity&>( other))
                && (Coordinates == other.Coordinates);
        }

        bool operator!=(const LocatableBaseEntity& other) const
        {
            return !(*this == other);
        }

        void swap(LocatableBaseEntity& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseEntity::swap( other);
            swap(Coordinates, other.Coordinates);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseEntity::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(LocatableBaseEntity& left, LocatableBaseEntity& right)
    {
        left.swap(right);
    }

    
    template <typename T>
    struct BaseItemCollection
    {
        std::vector<T> Collection;
        
        BaseItemCollection()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        BaseItemCollection(const BaseItemCollection& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        BaseItemCollection(BaseItemCollection&& other)
          : Collection(std::move(other.Collection))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        BaseItemCollection& operator=(const BaseItemCollection& other) = default;
#endif

        bool operator==(const BaseItemCollection& other) const
        {
            return true
                && (Collection == other.Collection);
        }

        bool operator!=(const BaseItemCollection& other) const
        {
            return !(*this == other);
        }

        void swap(BaseItemCollection& other)
        {
            using std::swap;
            swap(Collection, other.Collection);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    template <typename T>
    inline void swap(BaseItemCollection<T>& left, BaseItemCollection<T>& right)
    {
        left.swap(right);
    }

    
    namespace _bond_enumerators
    {
    namespace NomenclatureType
    {
        enum NomenclatureType
        {
            ICD10,
            ICD9,
            SnoMed,
            Unii,
            RxNorm,
            Cvx,
            Loinc,
            NDC,
            CPT,
            MEDCIN,
            DDI
        };
        
        extern const std::map<enum NomenclatureType, std::string> _value_to_name_NomenclatureType;
        extern const std::map<std::string, enum NomenclatureType> _name_to_value_NomenclatureType;

        inline
        const char* GetTypeName(enum NomenclatureType)
        {
            return "NomenclatureType";
        }

        inline
        const char* GetTypeName(enum NomenclatureType, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.NomenclatureType";
        }

        inline
        const std::map<enum NomenclatureType, std::string>& GetValueToNameMap(enum NomenclatureType)
        {
            return _value_to_name_NomenclatureType;
        }

        inline
        const std::map<std::string, enum NomenclatureType>& GetNameToValueMap(enum NomenclatureType)
        {
            return _name_to_value_NomenclatureType;
        }

        const std::string& ToString(enum NomenclatureType value);

        void FromString(const std::string& name, enum NomenclatureType& value);

        inline
        bool ToEnum(enum NomenclatureType& value, const std::string& name)
        {
            std::map<std::string, enum NomenclatureType>::const_iterator it =
                _name_to_value_NomenclatureType.find(name);

            if (_name_to_value_NomenclatureType.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace NomenclatureType
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::NomenclatureType;
    

    
    struct Nomenclature
    {
        bond::maybe<bond::nullable< ::HealthCare::Schemas::NomenclatureType> > Type;
        bond::maybe<bond::nullable<std::string> > Code;
        bond::maybe<bond::nullable<std::string> > Name;
        
        Nomenclature()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Nomenclature(const Nomenclature& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Nomenclature(Nomenclature&& other)
          : Type(std::move(other.Type)),
            Code(std::move(other.Code)),
            Name(std::move(other.Name))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Nomenclature& operator=(const Nomenclature& other) = default;
#endif

        bool operator==(const Nomenclature& other) const
        {
            return true
                && (Type == other.Type)
                && (Code == other.Code)
                && (Name == other.Name);
        }

        bool operator!=(const Nomenclature& other) const
        {
            return !(*this == other);
        }

        void swap(Nomenclature& other)
        {
            using std::swap;
            swap(Type, other.Type);
            swap(Code, other.Code);
            swap(Name, other.Name);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(Nomenclature& left, Nomenclature& right)
    {
        left.swap(right);
    }

    
    struct BaseClinicalItem
      : ::HealthCare::Schemas::BaseItem
    {
        bond::maybe<std::string> Name;
        bond::maybe<std::string> Status;
        std::vector< ::HealthCare::Schemas::Nomenclature> NomenclatureIds;
        bond::maybe<std::string> ClinicalDescription;
        bond::maybe<std::string> ReportingSource;
        bond::maybe<std::string> Comments;
        
        BaseClinicalItem()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        BaseClinicalItem(const BaseClinicalItem& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        BaseClinicalItem(BaseClinicalItem&& other)
          : ::HealthCare::Schemas::BaseItem(std::move(other)),
            Name(std::move(other.Name)),
            Status(std::move(other.Status)),
            NomenclatureIds(std::move(other.NomenclatureIds)),
            ClinicalDescription(std::move(other.ClinicalDescription)),
            ReportingSource(std::move(other.ReportingSource)),
            Comments(std::move(other.Comments))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        BaseClinicalItem& operator=(const BaseClinicalItem& other) = default;
#endif

        bool operator==(const BaseClinicalItem& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseItem&>( other))
                && (Name == other.Name)
                && (Status == other.Status)
                && (NomenclatureIds == other.NomenclatureIds)
                && (ClinicalDescription == other.ClinicalDescription)
                && (ReportingSource == other.ReportingSource)
                && (Comments == other.Comments);
        }

        bool operator!=(const BaseClinicalItem& other) const
        {
            return !(*this == other);
        }

        void swap(BaseClinicalItem& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseItem::swap( other);
            swap(Name, other.Name);
            swap(Status, other.Status);
            swap(NomenclatureIds, other.NomenclatureIds);
            swap(ClinicalDescription, other.ClinicalDescription);
            swap(ReportingSource, other.ReportingSource);
            swap(Comments, other.Comments);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(BaseClinicalItem& left, BaseClinicalItem& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

