
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Measurement_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "Measurement_types.h"
#include <bond/core/reflection.h>
#include "BaseClasses_reflection.h"

namespace HealthCare
{
namespace Schemas
{
    //
    // Measurement
    //
    struct Measurement::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_Value_metadata;
        private: static const bond::Metadata s_Units_metadata;
        private: static const bond::Metadata s_CreatedDate_metadata;
        private: static const bond::Metadata s_ChartedDate_metadata;

        public: struct var
        {
            // Value
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                Measurement,
                bond::maybe<bond::nullable<std::string> >,
                &Measurement::Value,
                &s_Value_metadata
            > Value;
        
            // Units
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                Measurement,
                bond::maybe<bond::nullable<std::string> >,
                &Measurement::Units,
                &s_Units_metadata
            > Units;
        
            // CreatedDate
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                Measurement,
                bond::maybe<bond::nullable<int64_t> >,
                &Measurement::CreatedDate,
                &s_CreatedDate_metadata
            > CreatedDate;
        
            // ChartedDate
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::optional_field_modifier,
                Measurement,
                bond::maybe<bond::nullable<int64_t> >,
                &Measurement::ChartedDate,
                &s_ChartedDate_metadata
            > ChartedDate;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::ChartedDate>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::CreatedDate>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::Units>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::Value>::type fields4;

        public: typedef fields4::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("Measurement", "HealthCare.Schemas.Measurement",
                bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace Schemas
} // namespace HealthCare
