//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Invoice_reflection.h>
#import <InvoiceDto.h>
#import <BillingProcedureDto.h>

@implementation InvoiceDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Invoice* castObj = (::Invoice*)obj;
    if (!castObj->Id.is_nothing()) self.id =  [[NSString alloc] initWithUTF8String: castObj->Id.value().c_str()];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (!castObj->InvoiceDate.is_nothing() && castObj->InvoiceDate.value().hasvalue()) self.invoiceDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->InvoiceDate.value().value()];
    if (!castObj->InvoiceId.is_nothing() && castObj->InvoiceId.value().hasvalue()) self.invoiceId =  [[NSString alloc] initWithUTF8String: castObj->InvoiceId.value().value().c_str()];
    if (!castObj->PatientName.is_nothing() && castObj->PatientName.value().hasvalue()) self.patientName =  [[NSString alloc] initWithUTF8String: castObj->PatientName.value().value().c_str()];
    if (!castObj->ProviderName.is_nothing() && castObj->ProviderName.value().hasvalue()) self.providerName =  [[NSString alloc] initWithUTF8String: castObj->ProviderName.value().value().c_str()];
    if (!castObj->ProcedureName.is_nothing() && castObj->ProcedureName.value().hasvalue()) self.procedureName =  [[NSString alloc] initWithUTF8String: castObj->ProcedureName.value().value().c_str()];
    if (!castObj->Charges.is_nothing() && castObj->Charges.value().hasvalue()) self.charges =  [[NSNumber alloc] initWithDouble: castObj->Charges.value().value()];
    if (!castObj->InsurancePayment.is_nothing() && castObj->InsurancePayment.value().hasvalue()) self.insurancePayment =  [[NSNumber alloc] initWithDouble: castObj->InsurancePayment.value().value()];
    if (!castObj->PatientPayment.is_nothing() && castObj->PatientPayment.value().hasvalue()) self.patientPayment =  [[NSNumber alloc] initWithDouble: castObj->PatientPayment.value().value()];
    if (!castObj->AmountDueNow.is_nothing() && castObj->AmountDueNow.value().hasvalue()) self.amountDueNow =  [[NSNumber alloc] initWithDouble: castObj->AmountDueNow.value().value()];
    if (!castObj->PendingWithInsurance.is_nothing() && castObj->PendingWithInsurance.value().hasvalue()) self.pendingWithInsurance =  [[NSNumber alloc] initWithBool: castObj->PendingWithInsurance.value().value()];
    if (!castObj->InvoiceStatus.is_nothing() && castObj->InvoiceStatus.value().hasvalue()) self.invoiceStatus =  [[NSString alloc] initWithUTF8String: castObj->InvoiceStatus.value().value().c_str()];
    if (!castObj->InvoicePracticeId.is_nothing() && castObj->InvoicePracticeId.value().hasvalue()) self.invoicePracticeId =  [[NSString alloc] initWithUTF8String: castObj->InvoicePracticeId.value().value().c_str()];
    if (!castObj->PendingPayment.is_nothing() && castObj->PendingPayment.value().hasvalue()) self.pendingPayment =  [[NSNumber alloc] initWithBool: castObj->PendingPayment.value().value()];
      self.billingProcedures = [[NSMutableArray alloc] init];
      for (auto it = castObj->BillingProcedures.begin(); it != castObj->BillingProcedures.end(); it++) {
        [self.billingProcedures addObject: [[BillingProcedureDto alloc] initWithBondObject: &(*it)]];
      }
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"InvoiceDate" ] && [dictionary objectForKey: @"InvoiceDate"] != (id)[NSNull null]) {
      self.invoiceDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"InvoiceDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"InvoiceId" ] && [dictionary objectForKey: @"InvoiceId"] != (id)[NSNull null]) {
      self.invoiceId = [dictionary objectForKey: @"InvoiceId"];
    }
    if ([dictionary.allKeys containsObject: @"PatientName" ] && [dictionary objectForKey: @"PatientName"] != (id)[NSNull null]) {
      self.patientName = [dictionary objectForKey: @"PatientName"];
    }
    if ([dictionary.allKeys containsObject: @"ProviderName" ] && [dictionary objectForKey: @"ProviderName"] != (id)[NSNull null]) {
      self.providerName = [dictionary objectForKey: @"ProviderName"];
    }
    if ([dictionary.allKeys containsObject: @"ProcedureName" ] && [dictionary objectForKey: @"ProcedureName"] != (id)[NSNull null]) {
      self.procedureName = [dictionary objectForKey: @"ProcedureName"];
    }
    if ([dictionary.allKeys containsObject: @"Charges" ] && [dictionary objectForKey: @"Charges"] != (id)[NSNull null]) {
      self.charges = [dictionary objectForKey: @"Charges"];
    }
    if ([dictionary.allKeys containsObject: @"InsurancePayment" ] && [dictionary objectForKey: @"InsurancePayment"] != (id)[NSNull null]) {
      self.insurancePayment = [dictionary objectForKey: @"InsurancePayment"];
    }
    if ([dictionary.allKeys containsObject: @"PatientPayment" ] && [dictionary objectForKey: @"PatientPayment"] != (id)[NSNull null]) {
      self.patientPayment = [dictionary objectForKey: @"PatientPayment"];
    }
    if ([dictionary.allKeys containsObject: @"AmountDueNow" ] && [dictionary objectForKey: @"AmountDueNow"] != (id)[NSNull null]) {
      self.amountDueNow = [dictionary objectForKey: @"AmountDueNow"];
    }
    if ([dictionary.allKeys containsObject: @"PendingWithInsurance" ] && [dictionary objectForKey: @"PendingWithInsurance"] != (id)[NSNull null]) {
      self.pendingWithInsurance = [dictionary objectForKey: @"PendingWithInsurance"];
    }
    if ([dictionary.allKeys containsObject: @"InvoiceStatus" ] && [dictionary objectForKey: @"InvoiceStatus"] != (id)[NSNull null]) {
      self.invoiceStatus = [dictionary objectForKey: @"InvoiceStatus"];
    }
    if ([dictionary.allKeys containsObject: @"InvoicePracticeId" ] && [dictionary objectForKey: @"InvoicePracticeId"] != (id)[NSNull null]) {
      self.invoicePracticeId = [dictionary objectForKey: @"InvoicePracticeId"];
    }
    if ([dictionary.allKeys containsObject: @"PendingPayment" ] && [dictionary objectForKey: @"PendingPayment"] != (id)[NSNull null]) {
      self.pendingPayment = [dictionary objectForKey: @"PendingPayment"];
    }
    if ([dictionary.allKeys containsObject: @"BillingProcedures" ] && [dictionary objectForKey: @"BillingProcedures"] != (id)[NSNull null]) {
      self.billingProcedures = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [dictionary objectForKey: @"BillingProcedures"]) {
        [self.billingProcedures addObject: [[BillingProcedureDto alloc] initWithJsonDictionary:item]];
      }
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Invoice obj = CppBondSerializer<::Invoice>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Invoice* obj = new Invoice();
  if (self.id != nil) obj->Id.set_value() = [self.id cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.invoiceDate != nil) obj->InvoiceDate.set_value().set([self.invoiceDate timeIntervalSince1970]);
  if (self.invoiceId != nil) obj->InvoiceId.set_value().set([self.invoiceId cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.patientName != nil) obj->PatientName.set_value().set([self.patientName cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.providerName != nil) obj->ProviderName.set_value().set([self.providerName cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.procedureName != nil) obj->ProcedureName.set_value().set([self.procedureName cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.charges != nil) obj->Charges.set_value().set([self.charges doubleValue]);
  if (self.insurancePayment != nil) obj->InsurancePayment.set_value().set([self.insurancePayment doubleValue]);
  if (self.patientPayment != nil) obj->PatientPayment.set_value().set([self.patientPayment doubleValue]);
  if (self.amountDueNow != nil) obj->AmountDueNow.set_value().set([self.amountDueNow doubleValue]);
  if (self.pendingWithInsurance != nil) obj->PendingWithInsurance.set_value().set([self.pendingWithInsurance boolValue]);
  if (self.invoiceStatus != nil) obj->InvoiceStatus.set_value().set([self.invoiceStatus cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.invoicePracticeId != nil) obj->InvoicePracticeId.set_value().set([self.invoicePracticeId cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.pendingPayment != nil) obj->PendingPayment.set_value().set([self.pendingPayment boolValue]);
  if (self.billingProcedures != nil) {
    for (id item in self.billingProcedures) {
      obj->BillingProcedures.push_back(*(::BillingProcedure*)[item toBondObject]);
    }
  }
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Invoice*)[self toBondObject];
  return CppBondSerializer<::Invoice>::serializeToByteArray(*obj, resultLen);
}

@end
