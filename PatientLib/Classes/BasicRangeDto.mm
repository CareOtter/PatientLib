//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <BaseObservation_reflection.h>
#import <BasicRangeDto.h>

@implementation BasicRangeDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::BasicRange* castObj = (::BasicRange*)obj;
    if (!castObj->Gender.is_nothing() && castObj->Gender.value().hasvalue()) self.gender =  [[NSString alloc] initWithUTF8String: castObj->Gender.value().value().c_str()];
    if (!castObj->MinAgeYears.is_nothing() && castObj->MinAgeYears.value().hasvalue()) self.minAgeYears =  [[NSNumber alloc] initWithShort: castObj->MinAgeYears.value().value()];
    if (!castObj->MinAgeMonths.is_nothing() && castObj->MinAgeMonths.value().hasvalue()) self.minAgeMonths =  [[NSNumber alloc] initWithShort: castObj->MinAgeMonths.value().value()];
    if (!castObj->MinAgeDays.is_nothing() && castObj->MinAgeDays.value().hasvalue()) self.minAgeDays =  [[NSNumber alloc] initWithShort: castObj->MinAgeDays.value().value()];
    if (!castObj->MaxAgeYears.is_nothing() && castObj->MaxAgeYears.value().hasvalue()) self.maxAgeYears =  [[NSNumber alloc] initWithShort: castObj->MaxAgeYears.value().value()];
    if (!castObj->MaxAgeMonths.is_nothing() && castObj->MaxAgeMonths.value().hasvalue()) self.maxAgeMonths =  [[NSNumber alloc] initWithShort: castObj->MaxAgeMonths.value().value()];
    if (!castObj->MaxAgeDays.is_nothing() && castObj->MaxAgeDays.value().hasvalue()) self.maxAgeDays =  [[NSNumber alloc] initWithShort: castObj->MaxAgeDays.value().value()];
    if (!castObj->VeryLowValue.is_nothing() && castObj->VeryLowValue.value().hasvalue()) self.veryLowValue =  [[NSNumber alloc] initWithDouble: castObj->VeryLowValue.value().value()];
    if (!castObj->LowValue.is_nothing() && castObj->LowValue.value().hasvalue()) self.lowValue =  [[NSNumber alloc] initWithDouble: castObj->LowValue.value().value()];
    if (!castObj->HighValue.is_nothing() && castObj->HighValue.value().hasvalue()) self.highValue =  [[NSNumber alloc] initWithDouble: castObj->HighValue.value().value()];
    if (!castObj->VeryHighValue.is_nothing() && castObj->VeryHighValue.value().hasvalue()) self.veryHighValue =  [[NSNumber alloc] initWithDouble: castObj->VeryHighValue.value().value()];
    if (!castObj->OutofBoundsLow.is_nothing() && castObj->OutofBoundsLow.value().hasvalue()) self.outofBoundsLow =  [[NSNumber alloc] initWithDouble: castObj->OutofBoundsLow.value().value()];
    if (!castObj->OutofBoundsHigh.is_nothing() && castObj->OutofBoundsHigh.value().hasvalue()) self.outofBoundsHigh =  [[NSNumber alloc] initWithDouble: castObj->OutofBoundsHigh.value().value()];
    if (!castObj->VeryLowSuggestedMessage.is_nothing() && castObj->VeryLowSuggestedMessage.value().hasvalue()) self.veryLowSuggestedMessage =  [[NSString alloc] initWithUTF8String: castObj->VeryLowSuggestedMessage.value().value().c_str()];
    if (!castObj->LowSuggestedMessage.is_nothing() && castObj->LowSuggestedMessage.value().hasvalue()) self.lowSuggestedMessage =  [[NSString alloc] initWithUTF8String: castObj->LowSuggestedMessage.value().value().c_str()];
    if (!castObj->NormalSuggestedMessage.is_nothing() && castObj->NormalSuggestedMessage.value().hasvalue()) self.normalSuggestedMessage =  [[NSString alloc] initWithUTF8String: castObj->NormalSuggestedMessage.value().value().c_str()];
    if (!castObj->HighSuggestedMessage.is_nothing() && castObj->HighSuggestedMessage.value().hasvalue()) self.highSuggestedMessage =  [[NSString alloc] initWithUTF8String: castObj->HighSuggestedMessage.value().value().c_str()];
    if (!castObj->VeryHighSuggestedMessage.is_nothing() && castObj->VeryHighSuggestedMessage.value().hasvalue()) self.veryHighSuggestedMessage =  [[NSString alloc] initWithUTF8String: castObj->VeryHighSuggestedMessage.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Gender" ] && [dictionary objectForKey: @"Gender"] != (id)[NSNull null]) {
      self.gender = [dictionary objectForKey: @"Gender"];
    }
    if ([dictionary.allKeys containsObject: @"MinAgeYears" ] && [dictionary objectForKey: @"MinAgeYears"] != (id)[NSNull null]) {
      self.minAgeYears = [dictionary objectForKey: @"MinAgeYears"];
    }
    if ([dictionary.allKeys containsObject: @"MinAgeMonths" ] && [dictionary objectForKey: @"MinAgeMonths"] != (id)[NSNull null]) {
      self.minAgeMonths = [dictionary objectForKey: @"MinAgeMonths"];
    }
    if ([dictionary.allKeys containsObject: @"MinAgeDays" ] && [dictionary objectForKey: @"MinAgeDays"] != (id)[NSNull null]) {
      self.minAgeDays = [dictionary objectForKey: @"MinAgeDays"];
    }
    if ([dictionary.allKeys containsObject: @"MaxAgeYears" ] && [dictionary objectForKey: @"MaxAgeYears"] != (id)[NSNull null]) {
      self.maxAgeYears = [dictionary objectForKey: @"MaxAgeYears"];
    }
    if ([dictionary.allKeys containsObject: @"MaxAgeMonths" ] && [dictionary objectForKey: @"MaxAgeMonths"] != (id)[NSNull null]) {
      self.maxAgeMonths = [dictionary objectForKey: @"MaxAgeMonths"];
    }
    if ([dictionary.allKeys containsObject: @"MaxAgeDays" ] && [dictionary objectForKey: @"MaxAgeDays"] != (id)[NSNull null]) {
      self.maxAgeDays = [dictionary objectForKey: @"MaxAgeDays"];
    }
    if ([dictionary.allKeys containsObject: @"VeryLowValue" ] && [dictionary objectForKey: @"VeryLowValue"] != (id)[NSNull null]) {
      self.veryLowValue = [dictionary objectForKey: @"VeryLowValue"];
    }
    if ([dictionary.allKeys containsObject: @"LowValue" ] && [dictionary objectForKey: @"LowValue"] != (id)[NSNull null]) {
      self.lowValue = [dictionary objectForKey: @"LowValue"];
    }
    if ([dictionary.allKeys containsObject: @"HighValue" ] && [dictionary objectForKey: @"HighValue"] != (id)[NSNull null]) {
      self.highValue = [dictionary objectForKey: @"HighValue"];
    }
    if ([dictionary.allKeys containsObject: @"VeryHighValue" ] && [dictionary objectForKey: @"VeryHighValue"] != (id)[NSNull null]) {
      self.veryHighValue = [dictionary objectForKey: @"VeryHighValue"];
    }
    if ([dictionary.allKeys containsObject: @"OutofBoundsLow" ] && [dictionary objectForKey: @"OutofBoundsLow"] != (id)[NSNull null]) {
      self.outofBoundsLow = [dictionary objectForKey: @"OutofBoundsLow"];
    }
    if ([dictionary.allKeys containsObject: @"OutofBoundsHigh" ] && [dictionary objectForKey: @"OutofBoundsHigh"] != (id)[NSNull null]) {
      self.outofBoundsHigh = [dictionary objectForKey: @"OutofBoundsHigh"];
    }
    if ([dictionary.allKeys containsObject: @"VeryLowSuggestedMessage" ] && [dictionary objectForKey: @"VeryLowSuggestedMessage"] != (id)[NSNull null]) {
      self.veryLowSuggestedMessage = [dictionary objectForKey: @"VeryLowSuggestedMessage"];
    }
    if ([dictionary.allKeys containsObject: @"LowSuggestedMessage" ] && [dictionary objectForKey: @"LowSuggestedMessage"] != (id)[NSNull null]) {
      self.lowSuggestedMessage = [dictionary objectForKey: @"LowSuggestedMessage"];
    }
    if ([dictionary.allKeys containsObject: @"NormalSuggestedMessage" ] && [dictionary objectForKey: @"NormalSuggestedMessage"] != (id)[NSNull null]) {
      self.normalSuggestedMessage = [dictionary objectForKey: @"NormalSuggestedMessage"];
    }
    if ([dictionary.allKeys containsObject: @"HighSuggestedMessage" ] && [dictionary objectForKey: @"HighSuggestedMessage"] != (id)[NSNull null]) {
      self.highSuggestedMessage = [dictionary objectForKey: @"HighSuggestedMessage"];
    }
    if ([dictionary.allKeys containsObject: @"VeryHighSuggestedMessage" ] && [dictionary objectForKey: @"VeryHighSuggestedMessage"] != (id)[NSNull null]) {
      self.veryHighSuggestedMessage = [dictionary objectForKey: @"VeryHighSuggestedMessage"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::BasicRange obj = CppBondSerializer<::BasicRange>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::BasicRange* obj = new BasicRange();
  if (self.gender != nil) obj->Gender.set_value().set([self.gender cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.minAgeYears != nil) obj->MinAgeYears.set_value().set([self.minAgeYears shortValue]);
  if (self.minAgeMonths != nil) obj->MinAgeMonths.set_value().set([self.minAgeMonths shortValue]);
  if (self.minAgeDays != nil) obj->MinAgeDays.set_value().set([self.minAgeDays shortValue]);
  if (self.maxAgeYears != nil) obj->MaxAgeYears.set_value().set([self.maxAgeYears shortValue]);
  if (self.maxAgeMonths != nil) obj->MaxAgeMonths.set_value().set([self.maxAgeMonths shortValue]);
  if (self.maxAgeDays != nil) obj->MaxAgeDays.set_value().set([self.maxAgeDays shortValue]);
  if (self.veryLowValue != nil) obj->VeryLowValue.set_value().set([self.veryLowValue doubleValue]);
  if (self.lowValue != nil) obj->LowValue.set_value().set([self.lowValue doubleValue]);
  if (self.highValue != nil) obj->HighValue.set_value().set([self.highValue doubleValue]);
  if (self.veryHighValue != nil) obj->VeryHighValue.set_value().set([self.veryHighValue doubleValue]);
  if (self.outofBoundsLow != nil) obj->OutofBoundsLow.set_value().set([self.outofBoundsLow doubleValue]);
  if (self.outofBoundsHigh != nil) obj->OutofBoundsHigh.set_value().set([self.outofBoundsHigh doubleValue]);
  if (self.veryLowSuggestedMessage != nil) obj->VeryLowSuggestedMessage.set_value().set([self.veryLowSuggestedMessage cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.lowSuggestedMessage != nil) obj->LowSuggestedMessage.set_value().set([self.lowSuggestedMessage cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.normalSuggestedMessage != nil) obj->NormalSuggestedMessage.set_value().set([self.normalSuggestedMessage cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.highSuggestedMessage != nil) obj->HighSuggestedMessage.set_value().set([self.highSuggestedMessage cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.veryHighSuggestedMessage != nil) obj->VeryHighSuggestedMessage.set_value().set([self.veryHighSuggestedMessage cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::BasicRange*)[self toBondObject];
  return CppBondSerializer<::BasicRange>::serializeToByteArray(*obj, resultLen);
}

@end
