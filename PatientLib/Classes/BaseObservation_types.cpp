
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : BaseObservation_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "BaseObservation_reflection.h"
#include <bond/core/exception.h>

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace ObservationKind
    {
        const
        std::map<std::string, enum ObservationKind> _name_to_value_ObservationKind =
            boost::assign::map_list_of<std::string, enum ObservationKind>
                ("Textual", Textual)
                ("Numeric", Numeric)
                ("RestrictedDictionary", RestrictedDictionary)
                ("SuggestedDictionary", SuggestedDictionary)
                ("DateTime", DateTime)
                ("none", none);

        const
        std::map<enum ObservationKind, std::string> _value_to_name_ObservationKind =
            bond::reverse_map(_name_to_value_ObservationKind);

        const std::string& ToString(enum ObservationKind value)
        {
            std::map<enum ObservationKind, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "ObservationKind");

            return it->second;
        }

        void FromString(const std::string& name, enum ObservationKind& value)
        {
            std::map<std::string, enum ObservationKind>::const_iterator it =
                _name_to_value_ObservationKind.find(name);

            if (_name_to_value_ObservationKind.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "ObservationKind");

            value = it->second;
        }

    } // namespace ObservationKind
    } // namespace _bond_enumerators

    
    namespace _bond_enumerators
    {
    namespace RangeType
    {
        const
        std::map<std::string, enum RangeType> _name_to_value_RangeType =
            boost::assign::map_list_of<std::string, enum RangeType>
                ("Basic", Basic)
                ("none", none);

        const
        std::map<enum RangeType, std::string> _value_to_name_RangeType =
            bond::reverse_map(_name_to_value_RangeType);

        const std::string& ToString(enum RangeType value)
        {
            std::map<enum RangeType, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "RangeType");

            return it->second;
        }

        void FromString(const std::string& name, enum RangeType& value)
        {
            std::map<std::string, enum RangeType>::const_iterator it =
                _name_to_value_RangeType.find(name);

            if (_name_to_value_RangeType.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "RangeType");

            value = it->second;
        }

    } // namespace RangeType
    } // namespace _bond_enumerators

    
    const bond::Metadata BasicRange::Schema::metadata
        = BasicRange::Schema::GetMetadata();
    
    const bond::Metadata BasicRange::Schema::s_Gender_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Gender");
    
    const bond::Metadata BasicRange::Schema::s_MinAgeYears_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MinAgeYears");
    
    const bond::Metadata BasicRange::Schema::s_MinAgeMonths_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MinAgeMonths");
    
    const bond::Metadata BasicRange::Schema::s_MinAgeDays_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MinAgeDays");
    
    const bond::Metadata BasicRange::Schema::s_MaxAgeYears_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MaxAgeYears");
    
    const bond::Metadata BasicRange::Schema::s_MaxAgeMonths_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MaxAgeMonths");
    
    const bond::Metadata BasicRange::Schema::s_MaxAgeDays_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MaxAgeDays");
    
    const bond::Metadata BasicRange::Schema::s_VeryLowValue_metadata
        = bond::reflection::MetadataInit(bond::nothing, "VeryLowValue");
    
    const bond::Metadata BasicRange::Schema::s_LowValue_metadata
        = bond::reflection::MetadataInit(bond::nothing, "LowValue");
    
    const bond::Metadata BasicRange::Schema::s_HighValue_metadata
        = bond::reflection::MetadataInit(bond::nothing, "HighValue");
    
    const bond::Metadata BasicRange::Schema::s_VeryHighValue_metadata
        = bond::reflection::MetadataInit(bond::nothing, "VeryHighValue");
    
    const bond::Metadata BasicRange::Schema::s_OutofBoundsLow_metadata
        = bond::reflection::MetadataInit(bond::nothing, "OutofBoundsLow");
    
    const bond::Metadata BasicRange::Schema::s_OutofBoundsHigh_metadata
        = bond::reflection::MetadataInit(bond::nothing, "OutofBoundsHigh");
    
    const bond::Metadata BasicRange::Schema::s_VeryLowSuggestedMessage_metadata
        = bond::reflection::MetadataInit(bond::nothing, "VeryLowSuggestedMessage");
    
    const bond::Metadata BasicRange::Schema::s_LowSuggestedMessage_metadata
        = bond::reflection::MetadataInit(bond::nothing, "LowSuggestedMessage");
    
    const bond::Metadata BasicRange::Schema::s_NormalSuggestedMessage_metadata
        = bond::reflection::MetadataInit(bond::nothing, "NormalSuggestedMessage");
    
    const bond::Metadata BasicRange::Schema::s_HighSuggestedMessage_metadata
        = bond::reflection::MetadataInit(bond::nothing, "HighSuggestedMessage");
    
    const bond::Metadata BasicRange::Schema::s_VeryHighSuggestedMessage_metadata
        = bond::reflection::MetadataInit(bond::nothing, "VeryHighSuggestedMessage");

    
    const bond::Metadata ObservationListItem::Schema::metadata
        = ObservationListItem::Schema::GetMetadata();
    
    const bond::Metadata ObservationListItem::Schema::s_IsActive_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsActive");
    
    const bond::Metadata ObservationListItem::Schema::s_Value_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Value");
    
    const bond::Metadata ObservationListItem::Schema::s_DisplaySequence_metadata
        = bond::reflection::MetadataInit(bond::nothing, "DisplaySequence");
    
    const bond::Metadata ObservationListItem::Schema::s_NumericEquivNum_metadata
        = bond::reflection::MetadataInit(bond::nothing, "NumericEquivNum");
    
    const bond::Metadata ObservationListItem::Schema::s_IsHeader_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsHeader");
    
    const bond::Metadata ObservationListItem::Schema::s_DisplayType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "DisplayType");
    
    const bond::Metadata ObservationListItem::Schema::s_ListValue_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ListValue");
    
    const bond::Metadata ObservationListItem::Schema::s_SuggestedText_metadata
        = bond::reflection::MetadataInit(bond::nothing, "SuggestedText");
    
    const bond::Metadata ObservationListItem::Schema::s_ListItemRanges_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ListItemRanges");

    
    const bond::Metadata ObservationList::Schema::metadata
        = ObservationList::Schema::GetMetadata();
    
    const bond::Metadata ObservationList::Schema::s_code_metadata
        = bond::reflection::MetadataInit(bond::nothing, "code");
    
    const bond::Metadata ObservationList::Schema::s_Description_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Description");
    
    const bond::Metadata ObservationList::Schema::s_MaxValueLength_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MaxValueLength");
    
    const bond::Metadata ObservationList::Schema::s_IsRestricted_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsRestricted");
    
    const bond::Metadata ObservationList::Schema::s_SelectionType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "SelectionType");
    
    const bond::Metadata ObservationList::Schema::s_MultiSelectSeparator_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MultiSelectSeparator");
    
    const bond::Metadata ObservationList::Schema::s_ControlType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ControlType");
    
    const bond::Metadata ObservationList::Schema::s_IsHorizontal_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsHorizontal");
    
    const bond::Metadata ObservationList::Schema::s_ListItems_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ListItems");

    
    const bond::Metadata ObservationDescription::Schema::metadata
        = ObservationDescription::Schema::GetMetadata();
    
    const bond::Metadata ObservationDescription::Schema::s_kind_metadata
        = bond::reflection::MetadataInit(::HealthCare::Schemas::_bond_enumerators::ObservationKind::none, "kind");
    
    const bond::Metadata ObservationDescription::Schema::s_SuggestedValues_metadata
        = bond::reflection::MetadataInit(bond::nothing, "SuggestedValues");
    
    const bond::Metadata ObservationDescription::Schema::s_RestrictedValues_metadata
        = bond::reflection::MetadataInit(bond::nothing, "RestrictedValues");
    
    const bond::Metadata ObservationDescription::Schema::s_Ranges_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Ranges");
    
    const bond::Metadata ObservationDescription::Schema::s_ObsList_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ObsList");
    
    const bond::Metadata ObservationDescription::Schema::s_Name_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Name");
    
    const bond::Metadata ObservationDescription::Schema::s_Description_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Description");
    
    const bond::Metadata ObservationDescription::Schema::s_EffectiveDate_metadata
        = bond::reflection::MetadataInit(bond::nothing, "EffectiveDate");
    
    const bond::Metadata ObservationDescription::Schema::s_ExpiryDate_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ExpiryDate");
    
    const bond::Metadata ObservationDescription::Schema::s_IsGenericItem_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsGenericItem");
    
    const bond::Metadata ObservationDescription::Schema::s_IsClientCharacteristic_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsClientCharacteristic");
    
    const bond::Metadata ObservationDescription::Schema::s_PhysicalNoteType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "PhysicalNoteType");
    
    const bond::Metadata ObservationDescription::Schema::s_IsOutcome_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsOutcome");
    
    const bond::Metadata ObservationDescription::Schema::s_DataType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "DataType");
    
    const bond::Metadata ObservationDescription::Schema::s_CalculationType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "CalculationType");
    
    const bond::Metadata ObservationDescription::Schema::s_FluidBalanceType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "FluidBalanceType");
    
    const bond::Metadata ObservationDescription::Schema::s_SummaryType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "SummaryType");
    
    const bond::Metadata ObservationDescription::Schema::s_CumulativeStartOfDayType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "CumulativeStartOfDayType");
    
    const bond::Metadata ObservationDescription::Schema::s_CalculateCumulative_metadata
        = bond::reflection::MetadataInit(bond::nothing, "CalculateCumulative");
    
    const bond::Metadata ObservationDescription::Schema::s_I0Subtype_metadata
        = bond::reflection::MetadataInit(bond::nothing, "I0Subtype");
    
    const bond::Metadata ObservationDescription::Schema::s_IncludeInTotals_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IncludeInTotals");
    
    const bond::Metadata ObservationDescription::Schema::s_AllowApproximates_metadata
        = bond::reflection::MetadataInit(bond::nothing, "AllowApproximates");
    
    const bond::Metadata ObservationDescription::Schema::s_ShowAbsoluteValues_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ShowAbsoluteValues");
    
    const bond::Metadata ObservationDescription::Schema::s_UnitOfMeasure_metadata
        = bond::reflection::MetadataInit(bond::nothing, "UnitOfMeasure");
    
    const bond::Metadata ObservationDescription::Schema::s_NumDecimalsIn_metadata
        = bond::reflection::MetadataInit(bond::nothing, "NumDecimalsIn");
    
    const bond::Metadata ObservationDescription::Schema::s_NumDecimalsOut_metadata
        = bond::reflection::MetadataInit(bond::nothing, "NumDecimalsOut");
    
    const bond::Metadata ObservationDescription::Schema::s_UseNumericSeparator_metadata
        = bond::reflection::MetadataInit(bond::nothing, "UseNumericSeparator");
    
    const bond::Metadata ObservationDescription::Schema::s_MaximumLength_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MaximumLength");
    
    const bond::Metadata ObservationDescription::Schema::s_NumberOfLines_metadata
        = bond::reflection::MetadataInit(bond::nothing, "NumberOfLines");
    
    const bond::Metadata ObservationDescription::Schema::s_IsMultiSelect_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsMultiSelect");
    
    const bond::Metadata ObservationDescription::Schema::s_ValueSeparator_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ValueSeparator");
    
    const bond::Metadata ObservationDescription::Schema::s_TextValidationDict_metadata
        = bond::reflection::MetadataInit(bond::nothing, "TextValidationDict");
    
    const bond::Metadata ObservationDescription::Schema::s_HasNumericEquiv_metadata
        = bond::reflection::MetadataInit(bond::nothing, "HasNumericEquiv");
    
    const bond::Metadata ObservationDescription::Schema::s_TrueText_metadata
        = bond::reflection::MetadataInit(bond::nothing, "TrueText");
    
    const bond::Metadata ObservationDescription::Schema::s_FalseText_metadata
        = bond::reflection::MetadataInit(bond::nothing, "FalseText");
    
    const bond::Metadata ObservationDescription::Schema::s_DisplayUOM_metadata
        = bond::reflection::MetadataInit(bond::nothing, "DisplayUOM");
    
    const bond::Metadata ObservationDescription::Schema::s_ModifyFormFilter_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ModifyFormFilter");
    
    const bond::Metadata ObservationDescription::Schema::s_IsDeviceInterface_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsDeviceInterface");
    
    const bond::Metadata ObservationDescription::Schema::s_ParameterType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ParameterType");
    
    const bond::Metadata ObservationDescription::Schema::s_RoundOffResult_metadata
        = bond::reflection::MetadataInit(bond::nothing, "RoundOffResult");
    
    const bond::Metadata ObservationDescription::Schema::s_OutputNumDecimalsIn_metadata
        = bond::reflection::MetadataInit(bond::nothing, "OutputNumDecimalsIn");
    
    const bond::Metadata ObservationDescription::Schema::s_OutputNumDecimalsOut_metadata
        = bond::reflection::MetadataInit(bond::nothing, "OutputNumDecimalsOut");
    
    const bond::Metadata ObservationDescription::Schema::s_RateNumDecimalsIn_metadata
        = bond::reflection::MetadataInit(bond::nothing, "RateNumDecimalsIn");
    
    const bond::Metadata ObservationDescription::Schema::s_RateNumDecimalsOut_metadata
        = bond::reflection::MetadataInit(bond::nothing, "RateNumDecimalsOut");
    
    const bond::Metadata ObservationDescription::Schema::s_DoseNumDecimalsIn_metadata
        = bond::reflection::MetadataInit(bond::nothing, "DoseNumDecimalsIn");
    
    const bond::Metadata ObservationDescription::Schema::s_DoseNumDecimalsOut_metadata
        = bond::reflection::MetadataInit(bond::nothing, "DoseNumDecimalsOut");
    
    const bond::Metadata ObservationDescription::Schema::s_EnterDetailDialog_metadata
        = bond::reflection::MetadataInit(bond::nothing, "EnterDetailDialog");
    
    const bond::Metadata ObservationDescription::Schema::s_UserDictionaryCode_metadata
        = bond::reflection::MetadataInit(bond::nothing, "UserDictionaryCode");
    
    const bond::Metadata ObservationDescription::Schema::s_Formula_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Formula");
    
    const bond::Metadata ObservationDescription::Schema::s_CalculationHeading_metadata
        = bond::reflection::MetadataInit(bond::nothing, "CalculationHeading");
    
    const bond::Metadata ObservationDescription::Schema::s_MaskingFormat_metadata
        = bond::reflection::MetadataInit(bond::nothing, "MaskingFormat");
    
    const bond::Metadata ObservationDescription::Schema::s_IsHorizontal_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsHorizontal");
    
    const bond::Metadata ObservationDescription::Schema::s_RightJustifiedLabel_metadata
        = bond::reflection::MetadataInit(bond::nothing, "RightJustifiedLabel");
    
    const bond::Metadata ObservationDescription::Schema::s_RightJustifiedLabelFontSize_metadata
        = bond::reflection::MetadataInit(bond::nothing, "RightJustifiedLabelFontSize");
    
    const bond::Metadata ObservationDescription::Schema::s_LeftJustifiedLabel_metadata
        = bond::reflection::MetadataInit(bond::nothing, "LeftJustifiedLabel");
    
    const bond::Metadata ObservationDescription::Schema::s_LeftJustifiedLabelFontSize_metadata
        = bond::reflection::MetadataInit(bond::nothing, "LeftJustifiedLabelFontSize");
    
    const bond::Metadata ObservationDescription::Schema::s_CommentFontSize_metadata
        = bond::reflection::MetadataInit(bond::nothing, "CommentFontSize");
    
    const bond::Metadata ObservationDescription::Schema::s_ModifyFormFilterFontSize_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ModifyFormFilterFontSize");
    
    const bond::Metadata ObservationDescription::Schema::s_FontSize_metadata
        = bond::reflection::MetadataInit(bond::nothing, "FontSize");
    
    const bond::Metadata ObservationDescription::Schema::s_ComponentFontSize_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ComponentFontSize");
    
    const bond::Metadata ObservationDescription::Schema::s_EnterIntake_metadata
        = bond::reflection::MetadataInit(bond::nothing, "EnterIntake");
    
    const bond::Metadata ObservationDescription::Schema::s_EnterOutput_metadata
        = bond::reflection::MetadataInit(bond::nothing, "EnterOutput");
    
    const bond::Metadata ObservationDescription::Schema::s_EnterNet_metadata
        = bond::reflection::MetadataInit(bond::nothing, "EnterNet");
    
    const bond::Metadata ObservationDescription::Schema::s_Enter24Hr_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Enter24Hr");
    
    const bond::Metadata ObservationDescription::Schema::s_LabelIn_metadata
        = bond::reflection::MetadataInit(bond::nothing, "LabelIn");
    
    const bond::Metadata ObservationDescription::Schema::s_LabelOut_metadata
        = bond::reflection::MetadataInit(bond::nothing, "LabelOut");
    
    const bond::Metadata ObservationDescription::Schema::s_LabelNet_metadata
        = bond::reflection::MetadataInit(bond::nothing, "LabelNet");
    
    const bond::Metadata ObservationDescription::Schema::s_Label24Hr_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Label24Hr");
    
    const bond::Metadata ObservationDescription::Schema::s_TotalVolume_metadata
        = bond::reflection::MetadataInit(bond::nothing, "TotalVolume");
    
    const bond::Metadata ObservationDescription::Schema::s_TotalVolumeUnit_metadata
        = bond::reflection::MetadataInit(bond::nothing, "TotalVolumeUnit");
    
    const bond::Metadata ObservationDescription::Schema::s_Rate_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Rate");
    
    const bond::Metadata ObservationDescription::Schema::s_RateUnit_metadata
        = bond::reflection::MetadataInit(bond::nothing, "RateUnit");
    
    const bond::Metadata ObservationDescription::Schema::s_NoEditing_metadata
        = bond::reflection::MetadataInit(bond::nothing, "NoEditing");
    
    const bond::Metadata ObservationDescription::Schema::s_HasModifier_metadata
        = bond::reflection::MetadataInit(bond::nothing, "HasModifier");
    
    const bond::Metadata ObservationDescription::Schema::s_IsLocked_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsLocked");
    
    const bond::Metadata ObservationDescription::Schema::s_HasWDL_metadata
        = bond::reflection::MetadataInit(bond::nothing, "HasWDL");
    
    const bond::Metadata ObservationDescription::Schema::s_SiteFontSize_metadata
        = bond::reflection::MetadataInit(bond::nothing, "SiteFontSize");
    
    const bond::Metadata ObservationDescription::Schema::s_SiteDeviceFontSize_metadata
        = bond::reflection::MetadataInit(bond::nothing, "SiteDeviceFontSize");
    
    const bond::Metadata ObservationDescription::Schema::s_IsRTFInput_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsRTFInput");

    
} // namespace Schemas
} // namespace HealthCare
