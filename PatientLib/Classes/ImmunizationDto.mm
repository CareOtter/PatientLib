//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Immunization_reflection.h>
#import <ImmunizationDto.h>
#import <NomenclatureDto.h>
#import <ReactionDto.h>

@implementation ImmunizationDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Immunization* castObj = (::Immunization*)obj;
    if (!castObj->Id.is_nothing()) self.id =  [[NSString alloc] initWithUTF8String: castObj->Id.value().c_str()];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (!castObj->Name.is_nothing()) self.name =  [[NSString alloc] initWithUTF8String: castObj->Name.value().c_str()];
    if (!castObj->Status.is_nothing()) self.status =  [[NSString alloc] initWithUTF8String: castObj->Status.value().c_str()];
      self.nomenclatureIds = [[NSMutableArray alloc] init];
      for (auto it = castObj->NomenclatureIds.begin(); it != castObj->NomenclatureIds.end(); it++) {
        [self.nomenclatureIds addObject: [[NomenclatureDto alloc] initWithBondObject: &(*it)]];
      }
    if (!castObj->ClinicalDescription.is_nothing()) self.clinicalDescription =  [[NSString alloc] initWithUTF8String: castObj->ClinicalDescription.value().c_str()];
    if (!castObj->ReportingSource.is_nothing()) self.reportingSource =  [[NSString alloc] initWithUTF8String: castObj->ReportingSource.value().c_str()];
    if (!castObj->Comments.is_nothing()) self.comments =  [[NSString alloc] initWithUTF8String: castObj->Comments.value().c_str()];
    if (!castObj->OrderId.is_nothing()) self.orderId =  [[NSString alloc] initWithUTF8String: castObj->OrderId.value().c_str()];
    if (!castObj->AdministeredDate.is_nothing() && castObj->AdministeredDate.value().hasvalue()) self.administeredDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->AdministeredDate.value().value()];
    if (!castObj->AdministeringProvider.is_nothing() && castObj->AdministeringProvider.value().hasvalue()) self.administeringProvider =  [[NSNumber alloc] initWithLongLong: castObj->AdministeringProvider.value().value()];
    if (!castObj->OrderingProvider.is_nothing() && castObj->OrderingProvider.value().hasvalue()) self.orderingProvider =  [[NSNumber alloc] initWithLongLong: castObj->OrderingProvider.value().value()];
    if (!castObj->LotId.is_nothing() && castObj->LotId.value().hasvalue()) self.lotId =  [[NSString alloc] initWithUTF8String: castObj->LotId.value().value().c_str()];
    if (!castObj->LotExpirationDate.is_nothing() && castObj->LotExpirationDate.value().hasvalue()) self.lotExpirationDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LotExpirationDate.value().value()];
    if (!castObj->RouteOfAdministration.is_nothing() && castObj->RouteOfAdministration.value().hasvalue()) self.routeOfAdministration =  [[NSString alloc] initWithUTF8String: castObj->RouteOfAdministration.value().value().c_str()];
    if (!castObj->SiteOfInjection.is_nothing() && castObj->SiteOfInjection.value().hasvalue()) self.siteOfInjection =  [[NSString alloc] initWithUTF8String: castObj->SiteOfInjection.value().value().c_str()];
    if (!castObj->Manufacturer.is_nothing() && castObj->Manufacturer.value().hasvalue()) self.manufacturer =  [[NSString alloc] initWithUTF8String: castObj->Manufacturer.value().value().c_str()];
    if (!castObj->Series.is_nothing() && castObj->Series.value().hasvalue()) self.series =  [[NSString alloc] initWithUTF8String: castObj->Series.value().value().c_str()];
    if (!castObj->Dose.is_nothing() && castObj->Dose.value().hasvalue()) self.dose =  [[NSString alloc] initWithUTF8String: castObj->Dose.value().value().c_str()];
    if (!castObj->DoseUnit.is_nothing() && castObj->DoseUnit.value().hasvalue()) self.doseUnit =  [[NSString alloc] initWithUTF8String: castObj->DoseUnit.value().value().c_str()];
    if (!castObj->ReasonDeclined.is_nothing() && castObj->ReasonDeclined.value().hasvalue()) self.reasonDeclined =  [[NSString alloc] initWithUTF8String: castObj->ReasonDeclined.value().value().c_str()];
    if (!castObj->IsDeclined.is_nothing() && castObj->IsDeclined.value().hasvalue()) self.isDeclined =  [[NSNumber alloc] initWithBool: castObj->IsDeclined.value().value()];
    if (!castObj->DeclinedDate.is_nothing() && castObj->DeclinedDate.value().hasvalue()) self.declinedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->DeclinedDate.value().value()];
      self.reactions = [[NSMutableArray alloc] init];
      for (auto it = castObj->Reactions.begin(); it != castObj->Reactions.end(); it++) {
        [self.reactions addObject: [[ReactionDto alloc] initWithBondObject: &(*it)]];
      }
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Name" ] && [dictionary objectForKey: @"Name"] != (id)[NSNull null]) {
      self.name = [dictionary objectForKey: @"Name"];
    }
    if ([dictionary.allKeys containsObject: @"Status" ] && [dictionary objectForKey: @"Status"] != (id)[NSNull null]) {
      self.status = [dictionary objectForKey: @"Status"];
    }
    if ([dictionary.allKeys containsObject: @"NomenclatureIds" ] && [dictionary objectForKey: @"NomenclatureIds"] != (id)[NSNull null]) {
      self.nomenclatureIds = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [dictionary objectForKey: @"NomenclatureIds"]) {
        [self.nomenclatureIds addObject: [[NomenclatureDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"ClinicalDescription" ] && [dictionary objectForKey: @"ClinicalDescription"] != (id)[NSNull null]) {
      self.clinicalDescription = [dictionary objectForKey: @"ClinicalDescription"];
    }
    if ([dictionary.allKeys containsObject: @"ReportingSource" ] && [dictionary objectForKey: @"ReportingSource"] != (id)[NSNull null]) {
      self.reportingSource = [dictionary objectForKey: @"ReportingSource"];
    }
    if ([dictionary.allKeys containsObject: @"Comments" ] && [dictionary objectForKey: @"Comments"] != (id)[NSNull null]) {
      self.comments = [dictionary objectForKey: @"Comments"];
    }
    if ([dictionary.allKeys containsObject: @"OrderId" ] && [dictionary objectForKey: @"OrderId"] != (id)[NSNull null]) {
      self.orderId = [dictionary objectForKey: @"OrderId"];
    }
    if ([dictionary.allKeys containsObject: @"AdministeredDate" ] && [dictionary objectForKey: @"AdministeredDate"] != (id)[NSNull null]) {
      self.administeredDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"AdministeredDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"AdministeringProvider" ] && [dictionary objectForKey: @"AdministeringProvider"] != (id)[NSNull null]) {
      self.administeringProvider = [dictionary objectForKey: @"AdministeringProvider"];
    }
    if ([dictionary.allKeys containsObject: @"OrderingProvider" ] && [dictionary objectForKey: @"OrderingProvider"] != (id)[NSNull null]) {
      self.orderingProvider = [dictionary objectForKey: @"OrderingProvider"];
    }
    if ([dictionary.allKeys containsObject: @"LotId" ] && [dictionary objectForKey: @"LotId"] != (id)[NSNull null]) {
      self.lotId = [dictionary objectForKey: @"LotId"];
    }
    if ([dictionary.allKeys containsObject: @"LotExpirationDate" ] && [dictionary objectForKey: @"LotExpirationDate"] != (id)[NSNull null]) {
      self.lotExpirationDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LotExpirationDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"RouteOfAdministration" ] && [dictionary objectForKey: @"RouteOfAdministration"] != (id)[NSNull null]) {
      self.routeOfAdministration = [dictionary objectForKey: @"RouteOfAdministration"];
    }
    if ([dictionary.allKeys containsObject: @"SiteOfInjection" ] && [dictionary objectForKey: @"SiteOfInjection"] != (id)[NSNull null]) {
      self.siteOfInjection = [dictionary objectForKey: @"SiteOfInjection"];
    }
    if ([dictionary.allKeys containsObject: @"Manufacturer" ] && [dictionary objectForKey: @"Manufacturer"] != (id)[NSNull null]) {
      self.manufacturer = [dictionary objectForKey: @"Manufacturer"];
    }
    if ([dictionary.allKeys containsObject: @"Series" ] && [dictionary objectForKey: @"Series"] != (id)[NSNull null]) {
      self.series = [dictionary objectForKey: @"Series"];
    }
    if ([dictionary.allKeys containsObject: @"Dose" ] && [dictionary objectForKey: @"Dose"] != (id)[NSNull null]) {
      self.dose = [dictionary objectForKey: @"Dose"];
    }
    if ([dictionary.allKeys containsObject: @"DoseUnit" ] && [dictionary objectForKey: @"DoseUnit"] != (id)[NSNull null]) {
      self.doseUnit = [dictionary objectForKey: @"DoseUnit"];
    }
    if ([dictionary.allKeys containsObject: @"ReasonDeclined" ] && [dictionary objectForKey: @"ReasonDeclined"] != (id)[NSNull null]) {
      self.reasonDeclined = [dictionary objectForKey: @"ReasonDeclined"];
    }
    if ([dictionary.allKeys containsObject: @"IsDeclined" ] && [dictionary objectForKey: @"IsDeclined"] != (id)[NSNull null]) {
      self.isDeclined = [dictionary objectForKey: @"IsDeclined"];
    }
    if ([dictionary.allKeys containsObject: @"DeclinedDate" ] && [dictionary objectForKey: @"DeclinedDate"] != (id)[NSNull null]) {
      self.declinedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"DeclinedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Reactions" ] && [dictionary objectForKey: @"Reactions"] != (id)[NSNull null]) {
      self.reactions = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [dictionary objectForKey: @"Reactions"]) {
        [self.reactions addObject: [[ReactionDto alloc] initWithJsonDictionary:item]];
      }
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Immunization obj = CppBondSerializer<::Immunization>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Immunization* obj = new Immunization();
  if (self.id != nil) obj->Id.set_value() = [self.id cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.name != nil) obj->Name.set_value() = [self.name cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.status != nil) obj->Status.set_value() = [self.status cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.nomenclatureIds != nil) {
    for (id item in self.nomenclatureIds) {
      obj->NomenclatureIds.push_back(*(::Nomenclature*)[item toBondObject]);
    }
  }
  if (self.clinicalDescription != nil) obj->ClinicalDescription.set_value() = [self.clinicalDescription cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.reportingSource != nil) obj->ReportingSource.set_value() = [self.reportingSource cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.comments != nil) obj->Comments.set_value() = [self.comments cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.orderId != nil) obj->OrderId.set_value() = [self.orderId cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.administeredDate != nil) obj->AdministeredDate.set_value().set([self.administeredDate timeIntervalSince1970]);
  if (self.administeringProvider != nil) obj->AdministeringProvider.set_value().set([self.administeringProvider longValue]);
  if (self.orderingProvider != nil) obj->OrderingProvider.set_value().set([self.orderingProvider longValue]);
  if (self.lotId != nil) obj->LotId.set_value().set([self.lotId cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.lotExpirationDate != nil) obj->LotExpirationDate.set_value().set([self.lotExpirationDate timeIntervalSince1970]);
  if (self.routeOfAdministration != nil) obj->RouteOfAdministration.set_value().set([self.routeOfAdministration cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.siteOfInjection != nil) obj->SiteOfInjection.set_value().set([self.siteOfInjection cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.manufacturer != nil) obj->Manufacturer.set_value().set([self.manufacturer cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.series != nil) obj->Series.set_value().set([self.series cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.dose != nil) obj->Dose.set_value().set([self.dose cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.doseUnit != nil) obj->DoseUnit.set_value().set([self.doseUnit cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.reasonDeclined != nil) obj->ReasonDeclined.set_value().set([self.reasonDeclined cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.isDeclined != nil) obj->IsDeclined.set_value().set([self.isDeclined boolValue]);
  if (self.declinedDate != nil) obj->DeclinedDate.set_value().set([self.declinedDate timeIntervalSince1970]);
  if (self.reactions != nil) {
    for (id item in self.reactions) {
      obj->Reactions.push_back(*(::Reaction*)[item toBondObject]);
    }
  }
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Immunization*)[self toBondObject];
  return CppBondSerializer<::Immunization>::serializeToByteArray(*obj, resultLen);
}

@end
