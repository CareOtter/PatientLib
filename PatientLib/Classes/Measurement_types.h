
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Measurement_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    struct Measurement
    {
        bond::maybe<bond::nullable<std::string> > Value;
        bond::maybe<bond::nullable<std::string> > Units;
        bond::maybe<bond::nullable<int64_t> > CreatedDate;
        bond::maybe<bond::nullable<int64_t> > ChartedDate;
        
        Measurement()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Measurement(const Measurement& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Measurement(Measurement&& other)
          : Value(std::move(other.Value)),
            Units(std::move(other.Units)),
            CreatedDate(std::move(other.CreatedDate)),
            ChartedDate(std::move(other.ChartedDate))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Measurement& operator=(const Measurement& other) = default;
#endif

        bool operator==(const Measurement& other) const
        {
            return true
                && (Value == other.Value)
                && (Units == other.Units)
                && (CreatedDate == other.CreatedDate)
                && (ChartedDate == other.ChartedDate);
        }

        bool operator!=(const Measurement& other) const
        {
            return !(*this == other);
        }

        void swap(Measurement& other)
        {
            using std::swap;
            swap(Value, other.Value);
            swap(Units, other.Units);
            swap(CreatedDate, other.CreatedDate);
            swap(ChartedDate, other.ChartedDate);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(Measurement& left, Measurement& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

