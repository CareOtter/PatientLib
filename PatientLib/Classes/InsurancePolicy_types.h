
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : InsurancePolicy_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"
#include "BasePerson_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    struct InsurancePolicy
      : ::HealthCare::Schemas::BaseItem
    {
        bond::maybe<bond::nullable< ::HealthCare::Schemas::Address> > Address;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::PersonName> > SubscriberName;
        bond::maybe<bond::nullable<std::string> > SubscriberSocialSecurityNumber;
        bond::maybe<bond::nullable<std::string> > Relationship;
        bond::maybe<bond::nullable<std::string> > GroupNumber;
        bond::maybe<bond::nullable<std::string> > SubscriberNumber;
        bond::maybe<bond::nullable<int64_t> > EffectiveDate;
        bond::maybe<bond::nullable<int64_t> > TerminationDate;
        bond::maybe<bond::nullable<double> > CoPay;
        bond::maybe<bond::nullable<std::string> > Employer;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::Address> > EmployerAddress;
        bond::maybe<bond::nullable<int64_t> > SubscriberDateOfBirth;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::Address> > SubscriberAddress;
        bond::maybe<bond::nullable<std::string> > InsurerOrganization;
        bond::maybe<bond::nullable<std::string> > InsuranceName;
        
        InsurancePolicy()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        InsurancePolicy(const InsurancePolicy& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        InsurancePolicy(InsurancePolicy&& other)
          : ::HealthCare::Schemas::BaseItem(std::move(other)),
            Address(std::move(other.Address)),
            SubscriberName(std::move(other.SubscriberName)),
            SubscriberSocialSecurityNumber(std::move(other.SubscriberSocialSecurityNumber)),
            Relationship(std::move(other.Relationship)),
            GroupNumber(std::move(other.GroupNumber)),
            SubscriberNumber(std::move(other.SubscriberNumber)),
            EffectiveDate(std::move(other.EffectiveDate)),
            TerminationDate(std::move(other.TerminationDate)),
            CoPay(std::move(other.CoPay)),
            Employer(std::move(other.Employer)),
            EmployerAddress(std::move(other.EmployerAddress)),
            SubscriberDateOfBirth(std::move(other.SubscriberDateOfBirth)),
            SubscriberAddress(std::move(other.SubscriberAddress)),
            InsurerOrganization(std::move(other.InsurerOrganization)),
            InsuranceName(std::move(other.InsuranceName))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        InsurancePolicy& operator=(const InsurancePolicy& other) = default;
#endif

        bool operator==(const InsurancePolicy& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseItem&>( other))
                && (Address == other.Address)
                && (SubscriberName == other.SubscriberName)
                && (SubscriberSocialSecurityNumber == other.SubscriberSocialSecurityNumber)
                && (Relationship == other.Relationship)
                && (GroupNumber == other.GroupNumber)
                && (SubscriberNumber == other.SubscriberNumber)
                && (EffectiveDate == other.EffectiveDate)
                && (TerminationDate == other.TerminationDate)
                && (CoPay == other.CoPay)
                && (Employer == other.Employer)
                && (EmployerAddress == other.EmployerAddress)
                && (SubscriberDateOfBirth == other.SubscriberDateOfBirth)
                && (SubscriberAddress == other.SubscriberAddress)
                && (InsurerOrganization == other.InsurerOrganization)
                && (InsuranceName == other.InsuranceName);
        }

        bool operator!=(const InsurancePolicy& other) const
        {
            return !(*this == other);
        }

        void swap(InsurancePolicy& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseItem::swap( other);
            swap(Address, other.Address);
            swap(SubscriberName, other.SubscriberName);
            swap(SubscriberSocialSecurityNumber, other.SubscriberSocialSecurityNumber);
            swap(Relationship, other.Relationship);
            swap(GroupNumber, other.GroupNumber);
            swap(SubscriberNumber, other.SubscriberNumber);
            swap(EffectiveDate, other.EffectiveDate);
            swap(TerminationDate, other.TerminationDate);
            swap(CoPay, other.CoPay);
            swap(Employer, other.Employer);
            swap(EmployerAddress, other.EmployerAddress);
            swap(SubscriberDateOfBirth, other.SubscriberDateOfBirth);
            swap(SubscriberAddress, other.SubscriberAddress);
            swap(InsurerOrganization, other.InsurerOrganization);
            swap(InsuranceName, other.InsuranceName);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(InsurancePolicy& left, InsurancePolicy& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

