//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Content_reflection.h>
#import <AllergyContentItemDto.h>
#import <NomenclatureDto.h>

@implementation AllergyContentItemDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::AllergyContentItem* castObj = (::AllergyContentItem*)obj;
    if (!castObj->Name.is_nothing() && castObj->Name.value().hasvalue()) self.name =  [[NSString alloc] initWithUTF8String: castObj->Name.value().value().c_str()];
    if (!castObj->Nomenclatures.is_nothing()) {
      self.nomenclatures = [[NSMutableArray alloc] init];
      for (auto it = castObj->Nomenclatures.value().begin(); it != castObj->Nomenclatures.value().end(); it++) {
        [self.nomenclatures addObject: [[NomenclatureDto alloc] initWithBondObject: &(*it)]];
      }
    }
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Name" ] && [dictionary objectForKey: @"Name"] != (id)[NSNull null]) {
      self.name = [dictionary objectForKey: @"Name"];
    }
    if ([dictionary.allKeys containsObject: @"Nomenclatures" ] && [dictionary objectForKey: @"Nomenclatures"] != (id)[NSNull null]) {
      self.nomenclatures = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [dictionary objectForKey: @"Nomenclatures"]) {
        [self.nomenclatures addObject: [[NomenclatureDto alloc] initWithJsonDictionary:item]];
      }
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::AllergyContentItem obj = CppBondSerializer<::AllergyContentItem>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::AllergyContentItem* obj = new AllergyContentItem();
  if (self.name != nil) obj->Name.set_value().set([self.name cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.nomenclatures != nil) {
    for (id item in self.nomenclatures) {
      obj->Nomenclatures.set_value().push_back(*(::Nomenclature*)[item toBondObject]);
    }
  }
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::AllergyContentItem*)[self toBondObject];
  return CppBondSerializer<::AllergyContentItem>::serializeToByteArray(*obj, resultLen);
}

@end
