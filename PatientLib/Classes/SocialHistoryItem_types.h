
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : SocialHistoryItem_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace SocialBehavior
    {
        enum SocialBehavior
        {
            Smoking,
            AlcoholUsage,
            IllicitDrugUsage,
            SexualActivity,
            Exercise
        };
        
        extern const std::map<enum SocialBehavior, std::string> _value_to_name_SocialBehavior;
        extern const std::map<std::string, enum SocialBehavior> _name_to_value_SocialBehavior;

        inline
        const char* GetTypeName(enum SocialBehavior)
        {
            return "SocialBehavior";
        }

        inline
        const char* GetTypeName(enum SocialBehavior, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.SocialBehavior";
        }

        inline
        const std::map<enum SocialBehavior, std::string>& GetValueToNameMap(enum SocialBehavior)
        {
            return _value_to_name_SocialBehavior;
        }

        inline
        const std::map<std::string, enum SocialBehavior>& GetNameToValueMap(enum SocialBehavior)
        {
            return _name_to_value_SocialBehavior;
        }

        const std::string& ToString(enum SocialBehavior value);

        void FromString(const std::string& name, enum SocialBehavior& value);

        inline
        bool ToEnum(enum SocialBehavior& value, const std::string& name)
        {
            std::map<std::string, enum SocialBehavior>::const_iterator it =
                _name_to_value_SocialBehavior.find(name);

            if (_name_to_value_SocialBehavior.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace SocialBehavior
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::SocialBehavior;
    

    
    struct SocialHistoryItem
      : ::HealthCare::Schemas::BaseClinicalItem
    {
        bond::maybe<bond::nullable< ::HealthCare::Schemas::SocialBehavior> > SocialBehavior;
        
        SocialHistoryItem()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        SocialHistoryItem(const SocialHistoryItem& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        SocialHistoryItem(SocialHistoryItem&& other)
          : ::HealthCare::Schemas::BaseClinicalItem(std::move(other)),
            SocialBehavior(std::move(other.SocialBehavior))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        SocialHistoryItem& operator=(const SocialHistoryItem& other) = default;
#endif

        bool operator==(const SocialHistoryItem& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>( other))
                && (SocialBehavior == other.SocialBehavior);
        }

        bool operator!=(const SocialHistoryItem& other) const
        {
            return !(*this == other);
        }

        void swap(SocialHistoryItem& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseClinicalItem::swap( other);
            swap(SocialBehavior, other.SocialBehavior);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseClinicalItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(SocialHistoryItem& left, SocialHistoryItem& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

