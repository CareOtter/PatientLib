//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <BasePerson_reflection.h>
#import <PersonContactInformationDto.h>
#import <AddressDto.h>
#import <TelephoneNumberDto.h>

@implementation PersonContactInformationDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::PersonContactInformation* castObj = (::PersonContactInformation*)obj;
    if (!castObj->MailingAddress.is_nothing() && castObj->MailingAddress.value().hasvalue()) self.mailingAddress =  [[AddressDto alloc] initWithBondObject: &(castObj->MailingAddress.value().value())];
    if (!castObj->HomeTelephoneNumber.is_nothing() && castObj->HomeTelephoneNumber.value().hasvalue()) self.homeTelephoneNumber =  [[TelephoneNumberDto alloc] initWithBondObject: &(castObj->HomeTelephoneNumber.value().value())];
    if (!castObj->CellularTelephoneNumber.is_nothing() && castObj->CellularTelephoneNumber.value().hasvalue()) self.cellularTelephoneNumber =  [[TelephoneNumberDto alloc] initWithBondObject: &(castObj->CellularTelephoneNumber.value().value())];
    if (!castObj->WorkTelephoneNumber.is_nothing() && castObj->WorkTelephoneNumber.value().hasvalue()) self.workTelephoneNumber =  [[TelephoneNumberDto alloc] initWithBondObject: &(castObj->WorkTelephoneNumber.value().value())];
    if (!castObj->EmailAddress.is_nothing() && castObj->EmailAddress.value().hasvalue()) self.emailAddress =  [[NSString alloc] initWithUTF8String: castObj->EmailAddress.value().value().c_str()];
    if (!castObj->FaxTelephoneNumber.is_nothing() && castObj->FaxTelephoneNumber.value().hasvalue()) self.faxTelephoneNumber =  [[TelephoneNumberDto alloc] initWithBondObject: &(castObj->FaxTelephoneNumber.value().value())];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"MailingAddress" ] && [dictionary objectForKey: @"MailingAddress"] != (id)[NSNull null]) {
      self.mailingAddress = [[AddressDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"MailingAddress"]];
    }
    if ([dictionary.allKeys containsObject: @"HomeTelephoneNumber" ] && [dictionary objectForKey: @"HomeTelephoneNumber"] != (id)[NSNull null]) {
      self.homeTelephoneNumber = [[TelephoneNumberDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"HomeTelephoneNumber"]];
    }
    if ([dictionary.allKeys containsObject: @"CellularTelephoneNumber" ] && [dictionary objectForKey: @"CellularTelephoneNumber"] != (id)[NSNull null]) {
      self.cellularTelephoneNumber = [[TelephoneNumberDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"CellularTelephoneNumber"]];
    }
    if ([dictionary.allKeys containsObject: @"WorkTelephoneNumber" ] && [dictionary objectForKey: @"WorkTelephoneNumber"] != (id)[NSNull null]) {
      self.workTelephoneNumber = [[TelephoneNumberDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"WorkTelephoneNumber"]];
    }
    if ([dictionary.allKeys containsObject: @"EmailAddress" ] && [dictionary objectForKey: @"EmailAddress"] != (id)[NSNull null]) {
      self.emailAddress = [dictionary objectForKey: @"EmailAddress"];
    }
    if ([dictionary.allKeys containsObject: @"FaxTelephoneNumber" ] && [dictionary objectForKey: @"FaxTelephoneNumber"] != (id)[NSNull null]) {
      self.faxTelephoneNumber = [[TelephoneNumberDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"FaxTelephoneNumber"]];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::PersonContactInformation obj = CppBondSerializer<::PersonContactInformation>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::PersonContactInformation* obj = new PersonContactInformation();
  if (self.mailingAddress != nil) obj->MailingAddress.set_value().set(*(::Address*)[self.mailingAddress toBondObject]);
  if (self.homeTelephoneNumber != nil) obj->HomeTelephoneNumber.set_value().set(*(::TelephoneNumber*)[self.homeTelephoneNumber toBondObject]);
  if (self.cellularTelephoneNumber != nil) obj->CellularTelephoneNumber.set_value().set(*(::TelephoneNumber*)[self.cellularTelephoneNumber toBondObject]);
  if (self.workTelephoneNumber != nil) obj->WorkTelephoneNumber.set_value().set(*(::TelephoneNumber*)[self.workTelephoneNumber toBondObject]);
  if (self.emailAddress != nil) obj->EmailAddress.set_value().set([self.emailAddress cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.faxTelephoneNumber != nil) obj->FaxTelephoneNumber.set_value().set(*(::TelephoneNumber*)[self.faxTelephoneNumber toBondObject]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::PersonContactInformation*)[self toBondObject];
  return CppBondSerializer<::PersonContactInformation>::serializeToByteArray(*obj, resultLen);
}

@end
