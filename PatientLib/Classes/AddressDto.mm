//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <BasePerson_reflection.h>
#import <AddressDto.h>

@implementation AddressDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Address* castObj = (::Address*)obj;
    if (!castObj->Line1.is_nothing() && castObj->Line1.value().hasvalue()) self.line1 =  [[NSString alloc] initWithUTF8String: castObj->Line1.value().value().c_str()];
    if (!castObj->Line2.is_nothing() && castObj->Line2.value().hasvalue()) self.line2 =  [[NSString alloc] initWithUTF8String: castObj->Line2.value().value().c_str()];
    if (!castObj->Line3.is_nothing() && castObj->Line3.value().hasvalue()) self.line3 =  [[NSString alloc] initWithUTF8String: castObj->Line3.value().value().c_str()];
    if (!castObj->City.is_nothing() && castObj->City.value().hasvalue()) self.city =  [[NSString alloc] initWithUTF8String: castObj->City.value().value().c_str()];
    if (!castObj->State.is_nothing() && castObj->State.value().hasvalue()) self.state =  [[NSString alloc] initWithUTF8String: castObj->State.value().value().c_str()];
    if (!castObj->ZipCode.is_nothing() && castObj->ZipCode.value().hasvalue()) self.zipCode =  [[NSString alloc] initWithUTF8String: castObj->ZipCode.value().value().c_str()];
    if (!castObj->Country.is_nothing() && castObj->Country.value().hasvalue()) self.country =  [[NSString alloc] initWithUTF8String: castObj->Country.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Line1" ] && [dictionary objectForKey: @"Line1"] != (id)[NSNull null]) {
      self.line1 = [dictionary objectForKey: @"Line1"];
    }
    if ([dictionary.allKeys containsObject: @"Line2" ] && [dictionary objectForKey: @"Line2"] != (id)[NSNull null]) {
      self.line2 = [dictionary objectForKey: @"Line2"];
    }
    if ([dictionary.allKeys containsObject: @"Line3" ] && [dictionary objectForKey: @"Line3"] != (id)[NSNull null]) {
      self.line3 = [dictionary objectForKey: @"Line3"];
    }
    if ([dictionary.allKeys containsObject: @"City" ] && [dictionary objectForKey: @"City"] != (id)[NSNull null]) {
      self.city = [dictionary objectForKey: @"City"];
    }
    if ([dictionary.allKeys containsObject: @"State" ] && [dictionary objectForKey: @"State"] != (id)[NSNull null]) {
      self.state = [dictionary objectForKey: @"State"];
    }
    if ([dictionary.allKeys containsObject: @"ZipCode" ] && [dictionary objectForKey: @"ZipCode"] != (id)[NSNull null]) {
      self.zipCode = [dictionary objectForKey: @"ZipCode"];
    }
    if ([dictionary.allKeys containsObject: @"Country" ] && [dictionary objectForKey: @"Country"] != (id)[NSNull null]) {
      self.country = [dictionary objectForKey: @"Country"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Address obj = CppBondSerializer<::Address>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Address* obj = new Address();
  if (self.line1 != nil) obj->Line1.set_value().set([self.line1 cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.line2 != nil) obj->Line2.set_value().set([self.line2 cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.line3 != nil) obj->Line3.set_value().set([self.line3 cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.city != nil) obj->City.set_value().set([self.city cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.state != nil) obj->State.set_value().set([self.state cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.zipCode != nil) obj->ZipCode.set_value().set([self.zipCode cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.country != nil) obj->Country.set_value().set([self.country cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Address*)[self toBondObject];
  return CppBondSerializer<::Address>::serializeToByteArray(*obj, resultLen);
}

@end
