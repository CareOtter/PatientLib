//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <BasePerson_reflection.h>
#import <TelephoneNumberDto.h>

@implementation TelephoneNumberDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::TelephoneNumber* castObj = (::TelephoneNumber*)obj;
    if (!castObj->CountryCode.is_nothing() && castObj->CountryCode.value().hasvalue()) self.countryCode =  [[NSNumber alloc] initWithShort: castObj->CountryCode.value().value()];
    if (!castObj->Number.is_nothing() && castObj->Number.value().hasvalue()) self.number =  [[NSString alloc] initWithUTF8String: castObj->Number.value().value().c_str()];
    if (!castObj->Ext.is_nothing() && castObj->Ext.value().hasvalue()) self.ext =  [[NSString alloc] initWithUTF8String: castObj->Ext.value().value().c_str()];
    if (!castObj->Kind.is_nothing() && castObj->Kind.value().hasvalue()) self.kind =  [[NSNumber alloc] initWithInt: castObj->Kind.value().value()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"CountryCode" ] && [dictionary objectForKey: @"CountryCode"] != (id)[NSNull null]) {
      self.countryCode = [dictionary objectForKey: @"CountryCode"];
    }
    if ([dictionary.allKeys containsObject: @"Number" ] && [dictionary objectForKey: @"Number"] != (id)[NSNull null]) {
      self.number = [dictionary objectForKey: @"Number"];
    }
    if ([dictionary.allKeys containsObject: @"Ext" ] && [dictionary objectForKey: @"Ext"] != (id)[NSNull null]) {
      self.ext = [dictionary objectForKey: @"Ext"];
    }
    if ([dictionary.allKeys containsObject: @"Kind" ] && [dictionary objectForKey: @"Kind"] != (id)[NSNull null]) {
      self.kindStringValue = [dictionary objectForKey: @"Kind"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::TelephoneNumber obj = CppBondSerializer<::TelephoneNumber>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::TelephoneNumber* obj = new TelephoneNumber();
  if (self.countryCode != nil) obj->CountryCode.set_value().set([self.countryCode shortValue]);
  if (self.number != nil) obj->Number.set_value().set([self.number cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.ext != nil) obj->Ext.set_value().set([self.ext cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.kind != nil) obj->Kind.set_value().set(static_cast<::TelephoneNumberKind>([self.kind intValue]));
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::TelephoneNumber*)[self toBondObject];
  return CppBondSerializer<::TelephoneNumber>::serializeToByteArray(*obj, resultLen);
}

@end
