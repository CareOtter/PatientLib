//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <UserSchema_reflection.h>
#import <FeedbackDto.h>

@implementation FeedbackDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Feedback* castObj = (::Feedback*)obj;
    if (!castObj->Id.is_nothing()) self.id =  [[NSString alloc] initWithUTF8String: castObj->Id.value().c_str()];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (!castObj->Type.is_nothing() && castObj->Type.value().hasvalue()) self.type =  [[NSNumber alloc] initWithInt: castObj->Type.value().value()];
    if (!castObj->Text.is_nothing() && castObj->Text.value().hasvalue()) self.text =  [[NSString alloc] initWithUTF8String: castObj->Text.value().value().c_str()];
    if (!castObj->PageName.is_nothing() && castObj->PageName.value().hasvalue()) self.pageName =  [[NSString alloc] initWithUTF8String: castObj->PageName.value().value().c_str()];
    if (!castObj->IsPageInfoIncluded.is_nothing() && castObj->IsPageInfoIncluded.value().hasvalue()) self.isPageInfoIncluded =  [[NSNumber alloc] initWithBool: castObj->IsPageInfoIncluded.value().value()];
    if (!castObj->IsUserInfoIncluded.is_nothing() && castObj->IsUserInfoIncluded.value().hasvalue()) self.isUserInfoIncluded =  [[NSNumber alloc] initWithBool: castObj->IsUserInfoIncluded.value().value()];
    if (!castObj->Status.is_nothing() && castObj->Status.value().hasvalue()) self.status =  [[NSNumber alloc] initWithInt: castObj->Status.value().value()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Type" ] && [dictionary objectForKey: @"Type"] != (id)[NSNull null]) {
      self.typeStringValue = [dictionary objectForKey: @"Type"];
    }
    if ([dictionary.allKeys containsObject: @"Text" ] && [dictionary objectForKey: @"Text"] != (id)[NSNull null]) {
      self.text = [dictionary objectForKey: @"Text"];
    }
    if ([dictionary.allKeys containsObject: @"PageName" ] && [dictionary objectForKey: @"PageName"] != (id)[NSNull null]) {
      self.pageName = [dictionary objectForKey: @"PageName"];
    }
    if ([dictionary.allKeys containsObject: @"IsPageInfoIncluded" ] && [dictionary objectForKey: @"IsPageInfoIncluded"] != (id)[NSNull null]) {
      self.isPageInfoIncluded = [dictionary objectForKey: @"IsPageInfoIncluded"];
    }
    if ([dictionary.allKeys containsObject: @"IsUserInfoIncluded" ] && [dictionary objectForKey: @"IsUserInfoIncluded"] != (id)[NSNull null]) {
      self.isUserInfoIncluded = [dictionary objectForKey: @"IsUserInfoIncluded"];
    }
    if ([dictionary.allKeys containsObject: @"Status" ] && [dictionary objectForKey: @"Status"] != (id)[NSNull null]) {
      self.statusStringValue = [dictionary objectForKey: @"Status"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Feedback obj = CppBondSerializer<::Feedback>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Feedback* obj = new Feedback();
  if (self.id != nil) obj->Id.set_value() = [self.id cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.type != nil) obj->Type.set_value().set(static_cast<::FeedbackType>([self.type intValue]));
  if (self.text != nil) obj->Text.set_value().set([self.text cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.pageName != nil) obj->PageName.set_value().set([self.pageName cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.isPageInfoIncluded != nil) obj->IsPageInfoIncluded.set_value().set([self.isPageInfoIncluded boolValue]);
  if (self.isUserInfoIncluded != nil) obj->IsUserInfoIncluded.set_value().set([self.isUserInfoIncluded boolValue]);
  if (self.status != nil) obj->Status.set_value().set(static_cast<::FeedbackStatus>([self.status intValue]));
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Feedback*)[self toBondObject];
  return CppBondSerializer<::Feedback>::serializeToByteArray(*obj, resultLen);
}

@end
