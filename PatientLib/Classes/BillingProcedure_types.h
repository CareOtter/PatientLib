
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : BillingProcedure_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    struct BillingProcedure
    {
        bond::maybe<bond::nullable<std::string> > Name;
        bond::maybe<bond::nullable<std::string> > Id;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::Nomenclature> > Nomenclature;
        
        BillingProcedure()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        BillingProcedure(const BillingProcedure& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        BillingProcedure(BillingProcedure&& other)
          : Name(std::move(other.Name)),
            Id(std::move(other.Id)),
            Nomenclature(std::move(other.Nomenclature))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        BillingProcedure& operator=(const BillingProcedure& other) = default;
#endif

        bool operator==(const BillingProcedure& other) const
        {
            return true
                && (Name == other.Name)
                && (Id == other.Id)
                && (Nomenclature == other.Nomenclature);
        }

        bool operator!=(const BillingProcedure& other) const
        {
            return !(*this == other);
        }

        void swap(BillingProcedure& other)
        {
            using std::swap;
            swap(Name, other.Name);
            swap(Id, other.Id);
            swap(Nomenclature, other.Nomenclature);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(BillingProcedure& left, BillingProcedure& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

