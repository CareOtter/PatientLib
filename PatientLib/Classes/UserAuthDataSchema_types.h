
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : UserAuthDataSchema_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    struct AppAuthorization
    {
        bond::maybe<bond::nullable<std::string> > ClientId;
        std::vector<std::string> Scopes;
        
        AppAuthorization()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        AppAuthorization(const AppAuthorization& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        AppAuthorization(AppAuthorization&& other)
          : ClientId(std::move(other.ClientId)),
            Scopes(std::move(other.Scopes))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        AppAuthorization& operator=(const AppAuthorization& other) = default;
#endif

        bool operator==(const AppAuthorization& other) const
        {
            return true
                && (ClientId == other.ClientId)
                && (Scopes == other.Scopes);
        }

        bool operator!=(const AppAuthorization& other) const
        {
            return !(*this == other);
        }

        void swap(AppAuthorization& other)
        {
            using std::swap;
            swap(ClientId, other.ClientId);
            swap(Scopes, other.Scopes);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(AppAuthorization& left, AppAuthorization& right)
    {
        left.swap(right);
    }

    
    struct UserAuthData
      : ::HealthCare::Schemas::BaseEntity
    {
        bond::maybe<bond::nullable<std::string> > PasswordHash;
        bond::maybe<bond::nullable<bool> > IsLockoutEnabled;
        bond::maybe<bond::nullable<int64_t> > LockoutEndDate;
        bond::maybe<bond::nullable<bool> > IsPasswordResetRequired;
        bond::maybe<bond::nullable<std::string> > OriginalJson;
        bond::maybe<bond::nullable<std::string> > LatestJson;
        bond::maybe<bond::nullable<int64_t> > LastLogin;
        std::vector< ::HealthCare::Schemas::AppAuthorization> Authorizations;
        
        UserAuthData()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        UserAuthData(const UserAuthData& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        UserAuthData(UserAuthData&& other)
          : ::HealthCare::Schemas::BaseEntity(std::move(other)),
            PasswordHash(std::move(other.PasswordHash)),
            IsLockoutEnabled(std::move(other.IsLockoutEnabled)),
            LockoutEndDate(std::move(other.LockoutEndDate)),
            IsPasswordResetRequired(std::move(other.IsPasswordResetRequired)),
            OriginalJson(std::move(other.OriginalJson)),
            LatestJson(std::move(other.LatestJson)),
            LastLogin(std::move(other.LastLogin)),
            Authorizations(std::move(other.Authorizations))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        UserAuthData& operator=(const UserAuthData& other) = default;
#endif

        bool operator==(const UserAuthData& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseEntity&>(*this) == static_cast<const ::HealthCare::Schemas::BaseEntity&>( other))
                && (PasswordHash == other.PasswordHash)
                && (IsLockoutEnabled == other.IsLockoutEnabled)
                && (LockoutEndDate == other.LockoutEndDate)
                && (IsPasswordResetRequired == other.IsPasswordResetRequired)
                && (OriginalJson == other.OriginalJson)
                && (LatestJson == other.LatestJson)
                && (LastLogin == other.LastLogin)
                && (Authorizations == other.Authorizations);
        }

        bool operator!=(const UserAuthData& other) const
        {
            return !(*this == other);
        }

        void swap(UserAuthData& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseEntity::swap( other);
            swap(PasswordHash, other.PasswordHash);
            swap(IsLockoutEnabled, other.IsLockoutEnabled);
            swap(LockoutEndDate, other.LockoutEndDate);
            swap(IsPasswordResetRequired, other.IsPasswordResetRequired);
            swap(OriginalJson, other.OriginalJson);
            swap(LatestJson, other.LatestJson);
            swap(LastLogin, other.LastLogin);
            swap(Authorizations, other.Authorizations);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseEntity::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(UserAuthData& left, UserAuthData& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

