//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <BaseClasses_reflection.h>
#import <CoordinatesDto.h>

@implementation CoordinatesDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Coordinates* castObj = (::Coordinates*)obj;
    if (!castObj->Longitude.is_nothing() && castObj->Longitude.value().hasvalue()) self.longitude =  [[NSNumber alloc] initWithDouble: castObj->Longitude.value().value()];
    if (!castObj->Latitude.is_nothing() && castObj->Latitude.value().hasvalue()) self.latitude =  [[NSNumber alloc] initWithDouble: castObj->Latitude.value().value()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Longitude" ] && [dictionary objectForKey: @"Longitude"] != (id)[NSNull null]) {
      self.longitude = [dictionary objectForKey: @"Longitude"];
    }
    if ([dictionary.allKeys containsObject: @"Latitude" ] && [dictionary objectForKey: @"Latitude"] != (id)[NSNull null]) {
      self.latitude = [dictionary objectForKey: @"Latitude"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Coordinates obj = CppBondSerializer<::Coordinates>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Coordinates* obj = new Coordinates();
  if (self.longitude != nil) obj->Longitude.set_value().set([self.longitude doubleValue]);
  if (self.latitude != nil) obj->Latitude.set_value().set([self.latitude doubleValue]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Coordinates*)[self toBondObject];
  return CppBondSerializer<::Coordinates>::serializeToByteArray(*obj, resultLen);
}

@end
