
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Observation_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "Observation_types.h"
#include <bond/core/reflection.h>
#include "BaseClasses_reflection.h"
#include "Measurement_reflection.h"
#include "ImageResource_reflection.h"

namespace HealthCare
{
namespace Schemas
{
    //
    // Observation
    //
    struct Observation::Schema
    {
        typedef ::HealthCare::Schemas::BaseClinicalItem base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_ObservationDate_metadata;
        private: static const bond::Metadata s_Measurements_metadata;
        private: static const bond::Metadata s_ObservationDescriptionId_metadata;
        private: static const bond::Metadata s_ObservationGroupName_metadata;

        public: struct var
        {
            // ObservationDate
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                Observation,
                bond::maybe<bond::nullable<int64_t> >,
                &Observation::ObservationDate,
                &s_ObservationDate_metadata
            > ObservationDate;
        
            // Measurements
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                Observation,
                bond::maybe<std::vector< ::HealthCare::Schemas::Measurement> >,
                &Observation::Measurements,
                &s_Measurements_metadata
            > Measurements;
        
            // ObservationDescriptionId
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                Observation,
                bond::maybe<bond::nullable<int64_t> >,
                &Observation::ObservationDescriptionId,
                &s_ObservationDescriptionId_metadata
            > ObservationDescriptionId;
        
            // ObservationGroupName
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::optional_field_modifier,
                Observation,
                bond::maybe<bond::nullable<std::string> >,
                &Observation::ObservationGroupName,
                &s_ObservationGroupName_metadata
            > ObservationGroupName;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::ObservationGroupName>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::ObservationDescriptionId>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::Measurements>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::ObservationDate>::type fields4;

        public: typedef fields4::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("Observation", "HealthCare.Schemas.Observation",
                bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace Schemas
} // namespace HealthCare
