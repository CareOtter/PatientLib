
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Note_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>
#include <bond/core/nullable.h>
#include <bond/core/bonded.h>

#include "BaseClasses_types.h"
#include "HealthRecord_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace NoteStatus
    {
        enum NoteStatus
        {
            Open,
            Closed
        };
        
        extern const std::map<enum NoteStatus, std::string> _value_to_name_NoteStatus;
        extern const std::map<std::string, enum NoteStatus> _name_to_value_NoteStatus;

        inline
        const char* GetTypeName(enum NoteStatus)
        {
            return "NoteStatus";
        }

        inline
        const char* GetTypeName(enum NoteStatus, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.NoteStatus";
        }

        inline
        const std::map<enum NoteStatus, std::string>& GetValueToNameMap(enum NoteStatus)
        {
            return _value_to_name_NoteStatus;
        }

        inline
        const std::map<std::string, enum NoteStatus>& GetNameToValueMap(enum NoteStatus)
        {
            return _name_to_value_NoteStatus;
        }

        const std::string& ToString(enum NoteStatus value);

        void FromString(const std::string& name, enum NoteStatus& value);

        inline
        bool ToEnum(enum NoteStatus& value, const std::string& name)
        {
            std::map<std::string, enum NoteStatus>::const_iterator it =
                _name_to_value_NoteStatus.find(name);

            if (_name_to_value_NoteStatus.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace NoteStatus
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::NoteStatus;
    

    
    namespace _bond_enumerators
    {
    namespace ReferenceType
    {
        enum ReferenceType
        {
            Allergies,
            Medications,
            SurgicalProcedures,
            FamilyProblems,
            SocialHistoryItems,
            Problems,
            Observations,
            Immunizations,
            Orders,
            Examinations
        };
        
        extern const std::map<enum ReferenceType, std::string> _value_to_name_ReferenceType;
        extern const std::map<std::string, enum ReferenceType> _name_to_value_ReferenceType;

        inline
        const char* GetTypeName(enum ReferenceType)
        {
            return "ReferenceType";
        }

        inline
        const char* GetTypeName(enum ReferenceType, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.ReferenceType";
        }

        inline
        const std::map<enum ReferenceType, std::string>& GetValueToNameMap(enum ReferenceType)
        {
            return _value_to_name_ReferenceType;
        }

        inline
        const std::map<std::string, enum ReferenceType>& GetNameToValueMap(enum ReferenceType)
        {
            return _name_to_value_ReferenceType;
        }

        const std::string& ToString(enum ReferenceType value);

        void FromString(const std::string& name, enum ReferenceType& value);

        inline
        bool ToEnum(enum ReferenceType& value, const std::string& name)
        {
            std::map<std::string, enum ReferenceType>::const_iterator it =
                _name_to_value_ReferenceType.find(name);

            if (_name_to_value_ReferenceType.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace ReferenceType
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::ReferenceType;
    

    
    struct NoteReference
    {
        bond::maybe<bond::nullable< ::HealthCare::Schemas::ReferenceType> > ReferenceType;
        bond::maybe<std::string> ReferenceId;
        
        NoteReference()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        NoteReference(const NoteReference& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        NoteReference(NoteReference&& other)
          : ReferenceType(std::move(other.ReferenceType)),
            ReferenceId(std::move(other.ReferenceId))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        NoteReference& operator=(const NoteReference& other) = default;
#endif

        bool operator==(const NoteReference& other) const
        {
            return true
                && (ReferenceType == other.ReferenceType)
                && (ReferenceId == other.ReferenceId);
        }

        bool operator!=(const NoteReference& other) const
        {
            return !(*this == other);
        }

        void swap(NoteReference& other)
        {
            using std::swap;
            swap(ReferenceType, other.ReferenceType);
            swap(ReferenceId, other.ReferenceId);
        }

        struct Schema;

    protected:
        void InitMetadata(const char*, const char*)
        {
        }
    };

    inline void swap(NoteReference& left, NoteReference& right)
    {
        left.swap(right);
    }

    
    struct Note
      : ::HealthCare::Schemas::BaseItem
    {
        bond::maybe<bond::nullable< ::HealthCare::Schemas::NoteStatus> > NoteStatus;
        bond::maybe<bond::nullable<int64_t> > NoteDate;
        bond::nullable<bond::bonded< ::HealthCare::Schemas::BaseItemCollection< ::HealthCare::Schemas::NoteReference> > > References;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::HealthRecord> > HealthRecordSnapshot;
        bond::maybe<bond::nullable<std::string> > Comments;
        bond::maybe<bond::nullable<std::string> > ChiefComplaint;
        
        Note()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Note(const Note& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Note(Note&& other)
          : ::HealthCare::Schemas::BaseItem(std::move(other)),
            NoteStatus(std::move(other.NoteStatus)),
            NoteDate(std::move(other.NoteDate)),
            References(std::move(other.References)),
            HealthRecordSnapshot(std::move(other.HealthRecordSnapshot)),
            Comments(std::move(other.Comments)),
            ChiefComplaint(std::move(other.ChiefComplaint))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Note& operator=(const Note& other) = default;
#endif

        bool operator==(const Note& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseItem&>( other))
                && (NoteStatus == other.NoteStatus)
                && (NoteDate == other.NoteDate)
                && (References == other.References)
                && (HealthRecordSnapshot == other.HealthRecordSnapshot)
                && (Comments == other.Comments)
                && (ChiefComplaint == other.ChiefComplaint);
        }

        bool operator!=(const Note& other) const
        {
            return !(*this == other);
        }

        void swap(Note& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseItem::swap( other);
            swap(NoteStatus, other.NoteStatus);
            swap(NoteDate, other.NoteDate);
            swap(References, other.References);
            swap(HealthRecordSnapshot, other.HealthRecordSnapshot);
            swap(Comments, other.Comments);
            swap(ChiefComplaint, other.ChiefComplaint);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(Note& left, Note& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

