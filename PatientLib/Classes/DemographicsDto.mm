//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <BasePerson_reflection.h>
#import <DemographicsDto.h>
#import <PersonContactInformationDto.h>

@implementation DemographicsDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Demographics* castObj = (::Demographics*)obj;
    if (!castObj->Gender.is_nothing() && castObj->Gender.value().hasvalue()) self.gender =  [[NSNumber alloc] initWithInt: castObj->Gender.value().value()];
    if (!castObj->Language.is_nothing() && castObj->Language.value().hasvalue()) self.language =  [[NSString alloc] initWithUTF8String: castObj->Language.value().value().c_str()];
    if (!castObj->ContactInformation.is_nothing() && castObj->ContactInformation.value().hasvalue()) self.contactInformation =  [[PersonContactInformationDto alloc] initWithBondObject: &(castObj->ContactInformation.value().value())];
    if (!castObj->Ethnicity.is_nothing() && castObj->Ethnicity.value().hasvalue()) self.ethnicity =  [[NSNumber alloc] initWithInt: castObj->Ethnicity.value().value()];
    if (!castObj->Race.is_nothing() && castObj->Race.value().hasvalue()) self.race =  [[NSNumber alloc] initWithInt: castObj->Race.value().value()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Gender" ] && [dictionary objectForKey: @"Gender"] != (id)[NSNull null]) {
      self.genderStringValue = [dictionary objectForKey: @"Gender"];
    }
    if ([dictionary.allKeys containsObject: @"Language" ] && [dictionary objectForKey: @"Language"] != (id)[NSNull null]) {
      self.language = [dictionary objectForKey: @"Language"];
    }
    if ([dictionary.allKeys containsObject: @"ContactInformation" ] && [dictionary objectForKey: @"ContactInformation"] != (id)[NSNull null]) {
      self.contactInformation = [[PersonContactInformationDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"ContactInformation"]];
    }
    if ([dictionary.allKeys containsObject: @"Ethnicity" ] && [dictionary objectForKey: @"Ethnicity"] != (id)[NSNull null]) {
      self.ethnicityStringValue = [dictionary objectForKey: @"Ethnicity"];
    }
    if ([dictionary.allKeys containsObject: @"Race" ] && [dictionary objectForKey: @"Race"] != (id)[NSNull null]) {
      self.raceStringValue = [dictionary objectForKey: @"Race"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Demographics obj = CppBondSerializer<::Demographics>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Demographics* obj = new Demographics();
  if (self.gender != nil) obj->Gender.set_value().set(static_cast<::Gender>([self.gender intValue]));
  if (self.language != nil) obj->Language.set_value().set([self.language cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.contactInformation != nil) obj->ContactInformation.set_value().set(*(::PersonContactInformation*)[self.contactInformation toBondObject]);
  if (self.ethnicity != nil) obj->Ethnicity.set_value().set(static_cast<::EthnicityFlag>([self.ethnicity intValue]));
  if (self.race != nil) obj->Race.set_value().set(static_cast<::RaceFlag>([self.race intValue]));
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Demographics*)[self toBondObject];
  return CppBondSerializer<::Demographics>::serializeToByteArray(*obj, resultLen);
}

@end
