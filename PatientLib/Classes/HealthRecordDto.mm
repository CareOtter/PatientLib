//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <HealthRecord_reflection.h>
#import <HealthRecordDto.h>
#import <AllergyDto.h>
#import <ProblemDto.h>
#import <SurgicalProcedureDto.h>
#import <FamilyProblemDto.h>
#import <SocialHistoryItemDto.h>
#import <MedicationDto.h>
#import <ObservationDto.h>
#import <OrderDto.h>
#import <ImmunizationDto.h>
#import <ExaminationDto.h>

@implementation HealthRecordDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::HealthRecord* castObj = (::HealthRecord*)obj;
    if(castObj->Allergies.hasvalue()) {
      self.allergies = [[NSMutableArray alloc] init];
      auto allergiesCollection = castObj->Allergies.value().Deserialize().Collection;
      for (auto it = allergiesCollection.begin(); it != allergiesCollection.end(); it++) {
        [self.allergies addObject: [[AllergyDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if(castObj->Problems.hasvalue()) {
      self.problems = [[NSMutableArray alloc] init];
      auto problemsCollection = castObj->Problems.value().Deserialize().Collection;
      for (auto it = problemsCollection.begin(); it != problemsCollection.end(); it++) {
        [self.problems addObject: [[ProblemDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if(castObj->SurgicalProcedures.hasvalue()) {
      self.surgicalProcedures = [[NSMutableArray alloc] init];
      auto surgicalProceduresCollection = castObj->SurgicalProcedures.value().Deserialize().Collection;
      for (auto it = surgicalProceduresCollection.begin(); it != surgicalProceduresCollection.end(); it++) {
        [self.surgicalProcedures addObject: [[SurgicalProcedureDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if(castObj->FamilyProblems.hasvalue()) {
      self.familyProblems = [[NSMutableArray alloc] init];
      auto familyProblemsCollection = castObj->FamilyProblems.value().Deserialize().Collection;
      for (auto it = familyProblemsCollection.begin(); it != familyProblemsCollection.end(); it++) {
        [self.familyProblems addObject: [[FamilyProblemDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if(castObj->SocialHistoryItems.hasvalue()) {
      self.socialHistoryItems = [[NSMutableArray alloc] init];
      auto socialHistoryItemsCollection = castObj->SocialHistoryItems.value().Deserialize().Collection;
      for (auto it = socialHistoryItemsCollection.begin(); it != socialHistoryItemsCollection.end(); it++) {
        [self.socialHistoryItems addObject: [[SocialHistoryItemDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if(castObj->Medications.hasvalue()) {
      self.medications = [[NSMutableArray alloc] init];
      auto medicationsCollection = castObj->Medications.value().Deserialize().Collection;
      for (auto it = medicationsCollection.begin(); it != medicationsCollection.end(); it++) {
        [self.medications addObject: [[MedicationDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if(castObj->Observations.hasvalue()) {
      self.observations = [[NSMutableArray alloc] init];
      auto observationsCollection = castObj->Observations.value().Deserialize().Collection;
      for (auto it = observationsCollection.begin(); it != observationsCollection.end(); it++) {
        [self.observations addObject: [[ObservationDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if(castObj->Orders.hasvalue()) {
      self.orders = [[NSMutableArray alloc] init];
      auto ordersCollection = castObj->Orders.value().Deserialize().Collection;
      for (auto it = ordersCollection.begin(); it != ordersCollection.end(); it++) {
        [self.orders addObject: [[OrderDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if(castObj->Immunizations.hasvalue()) {
      self.immunizations = [[NSMutableArray alloc] init];
      auto immunizationsCollection = castObj->Immunizations.value().Deserialize().Collection;
      for (auto it = immunizationsCollection.begin(); it != immunizationsCollection.end(); it++) {
        [self.immunizations addObject: [[ImmunizationDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if(castObj->Examinations.hasvalue()) {
      self.examinations = [[NSMutableArray alloc] init];
      auto examinationsCollection = castObj->Examinations.value().Deserialize().Collection;
      for (auto it = examinationsCollection.begin(); it != examinationsCollection.end(); it++) {
        [self.examinations addObject: [[ExaminationDto alloc] initWithBondObject: &(*it)]];
      }
    }
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Allergies" ] && [dictionary objectForKey: @"Allergies"] != (id)[NSNull null]) {
      self.allergies = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Allergies"] objectForKey: @"Collection"]) {
        [self.allergies addObject: [[AllergyDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"Problems" ] && [dictionary objectForKey: @"Problems"] != (id)[NSNull null]) {
      self.problems = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Problems"] objectForKey: @"Collection"]) {
        [self.problems addObject: [[ProblemDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"SurgicalProcedures" ] && [dictionary objectForKey: @"SurgicalProcedures"] != (id)[NSNull null]) {
      self.surgicalProcedures = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"SurgicalProcedures"] objectForKey: @"Collection"]) {
        [self.surgicalProcedures addObject: [[SurgicalProcedureDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"FamilyProblems" ] && [dictionary objectForKey: @"FamilyProblems"] != (id)[NSNull null]) {
      self.familyProblems = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"FamilyProblems"] objectForKey: @"Collection"]) {
        [self.familyProblems addObject: [[FamilyProblemDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"SocialHistoryItems" ] && [dictionary objectForKey: @"SocialHistoryItems"] != (id)[NSNull null]) {
      self.socialHistoryItems = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"SocialHistoryItems"] objectForKey: @"Collection"]) {
        [self.socialHistoryItems addObject: [[SocialHistoryItemDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"Medications" ] && [dictionary objectForKey: @"Medications"] != (id)[NSNull null]) {
      self.medications = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Medications"] objectForKey: @"Collection"]) {
        [self.medications addObject: [[MedicationDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"Observations" ] && [dictionary objectForKey: @"Observations"] != (id)[NSNull null]) {
      self.observations = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Observations"] objectForKey: @"Collection"]) {
        [self.observations addObject: [[ObservationDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"Orders" ] && [dictionary objectForKey: @"Orders"] != (id)[NSNull null]) {
      self.orders = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Orders"] objectForKey: @"Collection"]) {
        [self.orders addObject: [[OrderDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"Immunizations" ] && [dictionary objectForKey: @"Immunizations"] != (id)[NSNull null]) {
      self.immunizations = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Immunizations"] objectForKey: @"Collection"]) {
        [self.immunizations addObject: [[ImmunizationDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"Examinations" ] && [dictionary objectForKey: @"Examinations"] != (id)[NSNull null]) {
      self.examinations = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Examinations"] objectForKey: @"Collection"]) {
        [self.examinations addObject: [[ExaminationDto alloc] initWithJsonDictionary:item]];
      }
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::HealthRecord obj = CppBondSerializer<::HealthRecord>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::HealthRecord* obj = new HealthRecord();
  BaseItemCollection<::Allergy> allergiesCollection = BaseItemCollection<::Allergy>();
  if (self.allergies != nil) {
    for (AllergyDto* item in self.allergies) {
      auto bondObj = *(::Allergy*)[item toBondObject];
      allergiesCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedallergiesCollection = CppBondSerializer<BaseItemCollection<Allergy>>::getBondedObject(allergiesCollection);
  obj->Allergies.set(bondedallergiesCollection);
  BaseItemCollection<::Problem> problemsCollection = BaseItemCollection<::Problem>();
  if (self.problems != nil) {
    for (ProblemDto* item in self.problems) {
      auto bondObj = *(::Problem*)[item toBondObject];
      problemsCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedproblemsCollection = CppBondSerializer<BaseItemCollection<Problem>>::getBondedObject(problemsCollection);
  obj->Problems.set(bondedproblemsCollection);
  BaseItemCollection<::SurgicalProcedure> surgicalProceduresCollection = BaseItemCollection<::SurgicalProcedure>();
  if (self.surgicalProcedures != nil) {
    for (SurgicalProcedureDto* item in self.surgicalProcedures) {
      auto bondObj = *(::SurgicalProcedure*)[item toBondObject];
      surgicalProceduresCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedsurgicalProceduresCollection = CppBondSerializer<BaseItemCollection<SurgicalProcedure>>::getBondedObject(surgicalProceduresCollection);
  obj->SurgicalProcedures.set(bondedsurgicalProceduresCollection);
  BaseItemCollection<::FamilyProblem> familyProblemsCollection = BaseItemCollection<::FamilyProblem>();
  if (self.familyProblems != nil) {
    for (FamilyProblemDto* item in self.familyProblems) {
      auto bondObj = *(::FamilyProblem*)[item toBondObject];
      familyProblemsCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedfamilyProblemsCollection = CppBondSerializer<BaseItemCollection<FamilyProblem>>::getBondedObject(familyProblemsCollection);
  obj->FamilyProblems.set(bondedfamilyProblemsCollection);
  BaseItemCollection<::SocialHistoryItem> socialHistoryItemsCollection = BaseItemCollection<::SocialHistoryItem>();
  if (self.socialHistoryItems != nil) {
    for (SocialHistoryItemDto* item in self.socialHistoryItems) {
      auto bondObj = *(::SocialHistoryItem*)[item toBondObject];
      socialHistoryItemsCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedsocialHistoryItemsCollection = CppBondSerializer<BaseItemCollection<SocialHistoryItem>>::getBondedObject(socialHistoryItemsCollection);
  obj->SocialHistoryItems.set(bondedsocialHistoryItemsCollection);
  BaseItemCollection<::Medication> medicationsCollection = BaseItemCollection<::Medication>();
  if (self.medications != nil) {
    for (MedicationDto* item in self.medications) {
      auto bondObj = *(::Medication*)[item toBondObject];
      medicationsCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedmedicationsCollection = CppBondSerializer<BaseItemCollection<Medication>>::getBondedObject(medicationsCollection);
  obj->Medications.set(bondedmedicationsCollection);
  BaseItemCollection<::Observation> observationsCollection = BaseItemCollection<::Observation>();
  if (self.observations != nil) {
    for (ObservationDto* item in self.observations) {
      auto bondObj = *(::Observation*)[item toBondObject];
      observationsCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedobservationsCollection = CppBondSerializer<BaseItemCollection<Observation>>::getBondedObject(observationsCollection);
  obj->Observations.set(bondedobservationsCollection);
  BaseItemCollection<::Order> ordersCollection = BaseItemCollection<::Order>();
  if (self.orders != nil) {
    for (OrderDto* item in self.orders) {
      auto bondObj = *(::Order*)[item toBondObject];
      ordersCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedordersCollection = CppBondSerializer<BaseItemCollection<Order>>::getBondedObject(ordersCollection);
  obj->Orders.set(bondedordersCollection);
  BaseItemCollection<::Immunization> immunizationsCollection = BaseItemCollection<::Immunization>();
  if (self.immunizations != nil) {
    for (ImmunizationDto* item in self.immunizations) {
      auto bondObj = *(::Immunization*)[item toBondObject];
      immunizationsCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedimmunizationsCollection = CppBondSerializer<BaseItemCollection<Immunization>>::getBondedObject(immunizationsCollection);
  obj->Immunizations.set(bondedimmunizationsCollection);
  BaseItemCollection<::Examination> examinationsCollection = BaseItemCollection<::Examination>();
  if (self.examinations != nil) {
    for (ExaminationDto* item in self.examinations) {
      auto bondObj = *(::Examination*)[item toBondObject];
      examinationsCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedexaminationsCollection = CppBondSerializer<BaseItemCollection<Examination>>::getBondedObject(examinationsCollection);
  obj->Examinations.set(bondedexaminationsCollection);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::HealthRecord*)[self toBondObject];
  return CppBondSerializer<::HealthRecord>::serializeToByteArray(*obj, resultLen);
}

@end
