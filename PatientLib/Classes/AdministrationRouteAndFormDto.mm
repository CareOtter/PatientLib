//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Content_reflection.h>
#import <AdministrationRouteAndFormDto.h>

@implementation AdministrationRouteAndFormDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::AdministrationRouteAndForm* castObj = (::AdministrationRouteAndForm*)obj;
    if (!castObj->Form.is_nothing() && castObj->Form.value().hasvalue()) self.form =  [[NSString alloc] initWithUTF8String: castObj->Form.value().value().c_str()];
    if (!castObj->Route.is_nothing() && castObj->Route.value().hasvalue()) self.route =  [[NSString alloc] initWithUTF8String: castObj->Route.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Form" ] && [dictionary objectForKey: @"Form"] != (id)[NSNull null]) {
      self.form = [dictionary objectForKey: @"Form"];
    }
    if ([dictionary.allKeys containsObject: @"Route" ] && [dictionary objectForKey: @"Route"] != (id)[NSNull null]) {
      self.route = [dictionary objectForKey: @"Route"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::AdministrationRouteAndForm obj = CppBondSerializer<::AdministrationRouteAndForm>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::AdministrationRouteAndForm* obj = new AdministrationRouteAndForm();
  if (self.form != nil) obj->Form.set_value().set([self.form cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.route != nil) obj->Route.set_value().set([self.route cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::AdministrationRouteAndForm*)[self toBondObject];
  return CppBondSerializer<::AdministrationRouteAndForm>::serializeToByteArray(*obj, resultLen);
}

@end
