//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <InsurancePolicy_reflection.h>
#import <InsurancePolicyDto.h>
#import <AddressDto.h>
#import <PersonNameDto.h>

@implementation InsurancePolicyDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::InsurancePolicy* castObj = (::InsurancePolicy*)obj;
    if (!castObj->Id.is_nothing()) self.id =  [[NSString alloc] initWithUTF8String: castObj->Id.value().c_str()];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (!castObj->Address.is_nothing() && castObj->Address.value().hasvalue()) self.address =  [[AddressDto alloc] initWithBondObject: &(castObj->Address.value().value())];
    if (!castObj->SubscriberName.is_nothing() && castObj->SubscriberName.value().hasvalue()) self.subscriberName =  [[PersonNameDto alloc] initWithBondObject: &(castObj->SubscriberName.value().value())];
    if (!castObj->SubscriberSocialSecurityNumber.is_nothing() && castObj->SubscriberSocialSecurityNumber.value().hasvalue()) self.subscriberSocialSecurityNumber =  [[NSString alloc] initWithUTF8String: castObj->SubscriberSocialSecurityNumber.value().value().c_str()];
    if (!castObj->Relationship.is_nothing() && castObj->Relationship.value().hasvalue()) self.relationship =  [[NSString alloc] initWithUTF8String: castObj->Relationship.value().value().c_str()];
    if (!castObj->GroupNumber.is_nothing() && castObj->GroupNumber.value().hasvalue()) self.groupNumber =  [[NSString alloc] initWithUTF8String: castObj->GroupNumber.value().value().c_str()];
    if (!castObj->SubscriberNumber.is_nothing() && castObj->SubscriberNumber.value().hasvalue()) self.subscriberNumber =  [[NSString alloc] initWithUTF8String: castObj->SubscriberNumber.value().value().c_str()];
    if (!castObj->EffectiveDate.is_nothing() && castObj->EffectiveDate.value().hasvalue()) self.effectiveDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->EffectiveDate.value().value()];
    if (!castObj->TerminationDate.is_nothing() && castObj->TerminationDate.value().hasvalue()) self.terminationDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->TerminationDate.value().value()];
    if (!castObj->CoPay.is_nothing() && castObj->CoPay.value().hasvalue()) self.coPay =  [[NSNumber alloc] initWithDouble: castObj->CoPay.value().value()];
    if (!castObj->Employer.is_nothing() && castObj->Employer.value().hasvalue()) self.employer =  [[NSString alloc] initWithUTF8String: castObj->Employer.value().value().c_str()];
    if (!castObj->EmployerAddress.is_nothing() && castObj->EmployerAddress.value().hasvalue()) self.employerAddress =  [[AddressDto alloc] initWithBondObject: &(castObj->EmployerAddress.value().value())];
    if (!castObj->SubscriberDateOfBirth.is_nothing() && castObj->SubscriberDateOfBirth.value().hasvalue()) self.subscriberDateOfBirth =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->SubscriberDateOfBirth.value().value()];
    if (!castObj->SubscriberAddress.is_nothing() && castObj->SubscriberAddress.value().hasvalue()) self.subscriberAddress =  [[AddressDto alloc] initWithBondObject: &(castObj->SubscriberAddress.value().value())];
    if (!castObj->InsurerOrganization.is_nothing() && castObj->InsurerOrganization.value().hasvalue()) self.insurerOrganization =  [[NSString alloc] initWithUTF8String: castObj->InsurerOrganization.value().value().c_str()];
    if (!castObj->InsuranceName.is_nothing() && castObj->InsuranceName.value().hasvalue()) self.insuranceName =  [[NSString alloc] initWithUTF8String: castObj->InsuranceName.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Address" ] && [dictionary objectForKey: @"Address"] != (id)[NSNull null]) {
      self.address = [[AddressDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"Address"]];
    }
    if ([dictionary.allKeys containsObject: @"SubscriberName" ] && [dictionary objectForKey: @"SubscriberName"] != (id)[NSNull null]) {
      self.subscriberName = [[PersonNameDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"SubscriberName"]];
    }
    if ([dictionary.allKeys containsObject: @"SubscriberSocialSecurityNumber" ] && [dictionary objectForKey: @"SubscriberSocialSecurityNumber"] != (id)[NSNull null]) {
      self.subscriberSocialSecurityNumber = [dictionary objectForKey: @"SubscriberSocialSecurityNumber"];
    }
    if ([dictionary.allKeys containsObject: @"Relationship" ] && [dictionary objectForKey: @"Relationship"] != (id)[NSNull null]) {
      self.relationship = [dictionary objectForKey: @"Relationship"];
    }
    if ([dictionary.allKeys containsObject: @"GroupNumber" ] && [dictionary objectForKey: @"GroupNumber"] != (id)[NSNull null]) {
      self.groupNumber = [dictionary objectForKey: @"GroupNumber"];
    }
    if ([dictionary.allKeys containsObject: @"SubscriberNumber" ] && [dictionary objectForKey: @"SubscriberNumber"] != (id)[NSNull null]) {
      self.subscriberNumber = [dictionary objectForKey: @"SubscriberNumber"];
    }
    if ([dictionary.allKeys containsObject: @"EffectiveDate" ] && [dictionary objectForKey: @"EffectiveDate"] != (id)[NSNull null]) {
      self.effectiveDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"EffectiveDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"TerminationDate" ] && [dictionary objectForKey: @"TerminationDate"] != (id)[NSNull null]) {
      self.terminationDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"TerminationDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"CoPay" ] && [dictionary objectForKey: @"CoPay"] != (id)[NSNull null]) {
      self.coPay = [dictionary objectForKey: @"CoPay"];
    }
    if ([dictionary.allKeys containsObject: @"Employer" ] && [dictionary objectForKey: @"Employer"] != (id)[NSNull null]) {
      self.employer = [dictionary objectForKey: @"Employer"];
    }
    if ([dictionary.allKeys containsObject: @"EmployerAddress" ] && [dictionary objectForKey: @"EmployerAddress"] != (id)[NSNull null]) {
      self.employerAddress = [[AddressDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"EmployerAddress"]];
    }
    if ([dictionary.allKeys containsObject: @"SubscriberDateOfBirth" ] && [dictionary objectForKey: @"SubscriberDateOfBirth"] != (id)[NSNull null]) {
      self.subscriberDateOfBirth = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"SubscriberDateOfBirth"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"SubscriberAddress" ] && [dictionary objectForKey: @"SubscriberAddress"] != (id)[NSNull null]) {
      self.subscriberAddress = [[AddressDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"SubscriberAddress"]];
    }
    if ([dictionary.allKeys containsObject: @"InsurerOrganization" ] && [dictionary objectForKey: @"InsurerOrganization"] != (id)[NSNull null]) {
      self.insurerOrganization = [dictionary objectForKey: @"InsurerOrganization"];
    }
    if ([dictionary.allKeys containsObject: @"InsuranceName" ] && [dictionary objectForKey: @"InsuranceName"] != (id)[NSNull null]) {
      self.insuranceName = [dictionary objectForKey: @"InsuranceName"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::InsurancePolicy obj = CppBondSerializer<::InsurancePolicy>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::InsurancePolicy* obj = new InsurancePolicy();
  if (self.id != nil) obj->Id.set_value() = [self.id cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.address != nil) obj->Address.set_value().set(*(::Address*)[self.address toBondObject]);
  if (self.subscriberName != nil) obj->SubscriberName.set_value().set(*(::PersonName*)[self.subscriberName toBondObject]);
  if (self.subscriberSocialSecurityNumber != nil) obj->SubscriberSocialSecurityNumber.set_value().set([self.subscriberSocialSecurityNumber cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.relationship != nil) obj->Relationship.set_value().set([self.relationship cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.groupNumber != nil) obj->GroupNumber.set_value().set([self.groupNumber cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.subscriberNumber != nil) obj->SubscriberNumber.set_value().set([self.subscriberNumber cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.effectiveDate != nil) obj->EffectiveDate.set_value().set([self.effectiveDate timeIntervalSince1970]);
  if (self.terminationDate != nil) obj->TerminationDate.set_value().set([self.terminationDate timeIntervalSince1970]);
  if (self.coPay != nil) obj->CoPay.set_value().set([self.coPay doubleValue]);
  if (self.employer != nil) obj->Employer.set_value().set([self.employer cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.employerAddress != nil) obj->EmployerAddress.set_value().set(*(::Address*)[self.employerAddress toBondObject]);
  if (self.subscriberDateOfBirth != nil) obj->SubscriberDateOfBirth.set_value().set([self.subscriberDateOfBirth timeIntervalSince1970]);
  if (self.subscriberAddress != nil) obj->SubscriberAddress.set_value().set(*(::Address*)[self.subscriberAddress toBondObject]);
  if (self.insurerOrganization != nil) obj->InsurerOrganization.set_value().set([self.insurerOrganization cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.insuranceName != nil) obj->InsuranceName.set_value().set([self.insuranceName cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::InsurancePolicy*)[self toBondObject];
  return CppBondSerializer<::InsurancePolicy>::serializeToByteArray(*obj, resultLen);
}

@end
