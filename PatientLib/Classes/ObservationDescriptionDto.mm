//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <BaseObservation_reflection.h>
#import <ObservationDescriptionDto.h>
#import <BasicRangeDto.h>
#import <ObservationListDto.h>

@implementation ObservationDescriptionDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::ObservationDescription* castObj = (::ObservationDescription*)obj;
    self.id = [[NSNumber alloc] initWithLongLong: castObj->Id];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    self.kind = [[NSNumber alloc] initWithInt: castObj->kind];
    if (!castObj->Ranges.is_nothing()) {
      self.ranges = [[NSMutableArray alloc] init];
      for (auto it = castObj->Ranges.value().begin(); it != castObj->Ranges.value().end(); it++) {
        [self.ranges addObject: [[BasicRangeDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if (!castObj->ObsList.is_nothing() && castObj->ObsList.value().hasvalue()) self.obsList =  [[ObservationListDto alloc] initWithBondObject: &(castObj->ObsList.value().value())];
    if (!castObj->Name.is_nothing() && castObj->Name.value().hasvalue()) self.name =  [[NSString alloc] initWithUTF8String: castObj->Name.value().value().c_str()];
    if (!castObj->Description.is_nothing() && castObj->Description.value().hasvalue()) self.desc =  [[NSString alloc] initWithUTF8String: castObj->Description.value().value().c_str()];
    if (!castObj->EffectiveDate.is_nothing() && castObj->EffectiveDate.value().hasvalue()) self.effectiveDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->EffectiveDate.value().value()];
    if (!castObj->ExpiryDate.is_nothing() && castObj->ExpiryDate.value().hasvalue()) self.expiryDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->ExpiryDate.value().value()];
    if (!castObj->IsGenericItem.is_nothing() && castObj->IsGenericItem.value().hasvalue()) self.isGenericItem =  [[NSNumber alloc] initWithShort: castObj->IsGenericItem.value().value()];
    if (!castObj->IsClientCharacteristic.is_nothing() && castObj->IsClientCharacteristic.value().hasvalue()) self.isClientCharacteristic =  [[NSNumber alloc] initWithShort: castObj->IsClientCharacteristic.value().value()];
    if (!castObj->PhysicalNoteType.is_nothing() && castObj->PhysicalNoteType.value().hasvalue()) self.physicalNoteType =  [[NSString alloc] initWithUTF8String: castObj->PhysicalNoteType.value().value().c_str()];
    if (!castObj->IsOutcome.is_nothing() && castObj->IsOutcome.value().hasvalue()) self.isOutcome =  [[NSNumber alloc] initWithShort: castObj->IsOutcome.value().value()];
    if (!castObj->DataType.is_nothing() && castObj->DataType.value().hasvalue()) self.dataType =  [[NSString alloc] initWithUTF8String: castObj->DataType.value().value().c_str()];
    if (!castObj->CalculationType.is_nothing() && castObj->CalculationType.value().hasvalue()) self.calculationType =  [[NSString alloc] initWithUTF8String: castObj->CalculationType.value().value().c_str()];
    if (!castObj->FluidBalanceType.is_nothing() && castObj->FluidBalanceType.value().hasvalue()) self.fluidBalanceType =  [[NSString alloc] initWithUTF8String: castObj->FluidBalanceType.value().value().c_str()];
    if (!castObj->SummaryType.is_nothing() && castObj->SummaryType.value().hasvalue()) self.summaryType =  [[NSString alloc] initWithUTF8String: castObj->SummaryType.value().value().c_str()];
    if (!castObj->CumulativeStartOfDayType.is_nothing() && castObj->CumulativeStartOfDayType.value().hasvalue()) self.cumulativeStartOfDayType =  [[NSString alloc] initWithUTF8String: castObj->CumulativeStartOfDayType.value().value().c_str()];
    if (!castObj->CalculateCumulative.is_nothing() && castObj->CalculateCumulative.value().hasvalue()) self.calculateCumulative =  [[NSNumber alloc] initWithShort: castObj->CalculateCumulative.value().value()];
    if (!castObj->I0Subtype.is_nothing() && castObj->I0Subtype.value().hasvalue()) self.i0Subtype =  [[NSString alloc] initWithUTF8String: castObj->I0Subtype.value().value().c_str()];
    if (!castObj->IncludeInTotals.is_nothing() && castObj->IncludeInTotals.value().hasvalue()) self.includeInTotals =  [[NSNumber alloc] initWithShort: castObj->IncludeInTotals.value().value()];
    if (!castObj->AllowApproximates.is_nothing() && castObj->AllowApproximates.value().hasvalue()) self.allowApproximates =  [[NSNumber alloc] initWithShort: castObj->AllowApproximates.value().value()];
    if (!castObj->ShowAbsoluteValues.is_nothing() && castObj->ShowAbsoluteValues.value().hasvalue()) self.showAbsoluteValues =  [[NSNumber alloc] initWithShort: castObj->ShowAbsoluteValues.value().value()];
    if (!castObj->UnitOfMeasure.is_nothing() && castObj->UnitOfMeasure.value().hasvalue()) self.unitOfMeasure =  [[NSString alloc] initWithUTF8String: castObj->UnitOfMeasure.value().value().c_str()];
    if (!castObj->NumDecimalsIn.is_nothing() && castObj->NumDecimalsIn.value().hasvalue()) self.numDecimalsIn =  [[NSNumber alloc] initWithShort: castObj->NumDecimalsIn.value().value()];
    if (!castObj->NumDecimalsOut.is_nothing() && castObj->NumDecimalsOut.value().hasvalue()) self.numDecimalsOut =  [[NSNumber alloc] initWithShort: castObj->NumDecimalsOut.value().value()];
    if (!castObj->UseNumericSeparator.is_nothing() && castObj->UseNumericSeparator.value().hasvalue()) self.useNumericSeparator =  [[NSNumber alloc] initWithShort: castObj->UseNumericSeparator.value().value()];
    if (!castObj->MaximumLength.is_nothing() && castObj->MaximumLength.value().hasvalue()) self.maximumLength =  [[NSNumber alloc] initWithShort: castObj->MaximumLength.value().value()];
    if (!castObj->NumberOfLines.is_nothing() && castObj->NumberOfLines.value().hasvalue()) self.numberOfLines =  [[NSNumber alloc] initWithShort: castObj->NumberOfLines.value().value()];
    if (!castObj->IsMultiSelect.is_nothing() && castObj->IsMultiSelect.value().hasvalue()) self.isMultiSelect =  [[NSNumber alloc] initWithShort: castObj->IsMultiSelect.value().value()];
    if (!castObj->ValueSeparator.is_nothing() && castObj->ValueSeparator.value().hasvalue()) self.valueSeparator =  [[NSString alloc] initWithUTF8String: castObj->ValueSeparator.value().value().c_str()];
    if (!castObj->TextValidationDict.is_nothing() && castObj->TextValidationDict.value().hasvalue()) self.textValidationDict =  [[NSString alloc] initWithUTF8String: castObj->TextValidationDict.value().value().c_str()];
    if (!castObj->HasNumericEquiv.is_nothing() && castObj->HasNumericEquiv.value().hasvalue()) self.hasNumericEquiv =  [[NSNumber alloc] initWithShort: castObj->HasNumericEquiv.value().value()];
    if (!castObj->TrueText.is_nothing() && castObj->TrueText.value().hasvalue()) self.trueText =  [[NSString alloc] initWithUTF8String: castObj->TrueText.value().value().c_str()];
    if (!castObj->FalseText.is_nothing() && castObj->FalseText.value().hasvalue()) self.falseText =  [[NSString alloc] initWithUTF8String: castObj->FalseText.value().value().c_str()];
    if (!castObj->DisplayUOM.is_nothing() && castObj->DisplayUOM.value().hasvalue()) self.displayUOM =  [[NSNumber alloc] initWithShort: castObj->DisplayUOM.value().value()];
    if (!castObj->ModifyFormFilter.is_nothing() && castObj->ModifyFormFilter.value().hasvalue()) self.modifyFormFilter =  [[NSString alloc] initWithUTF8String: castObj->ModifyFormFilter.value().value().c_str()];
    if (!castObj->IsDeviceInterface.is_nothing() && castObj->IsDeviceInterface.value().hasvalue()) self.isDeviceInterface =  [[NSNumber alloc] initWithShort: castObj->IsDeviceInterface.value().value()];
    if (!castObj->ParameterType.is_nothing() && castObj->ParameterType.value().hasvalue()) self.parameterType =  [[NSString alloc] initWithUTF8String: castObj->ParameterType.value().value().c_str()];
    if (!castObj->RoundOffResult.is_nothing() && castObj->RoundOffResult.value().hasvalue()) self.roundOffResult =  [[NSNumber alloc] initWithShort: castObj->RoundOffResult.value().value()];
    if (!castObj->OutputNumDecimalsIn.is_nothing() && castObj->OutputNumDecimalsIn.value().hasvalue()) self.outputNumDecimalsIn =  [[NSNumber alloc] initWithShort: castObj->OutputNumDecimalsIn.value().value()];
    if (!castObj->OutputNumDecimalsOut.is_nothing() && castObj->OutputNumDecimalsOut.value().hasvalue()) self.outputNumDecimalsOut =  [[NSNumber alloc] initWithShort: castObj->OutputNumDecimalsOut.value().value()];
    if (!castObj->RateNumDecimalsIn.is_nothing() && castObj->RateNumDecimalsIn.value().hasvalue()) self.rateNumDecimalsIn =  [[NSNumber alloc] initWithShort: castObj->RateNumDecimalsIn.value().value()];
    if (!castObj->RateNumDecimalsOut.is_nothing() && castObj->RateNumDecimalsOut.value().hasvalue()) self.rateNumDecimalsOut =  [[NSNumber alloc] initWithShort: castObj->RateNumDecimalsOut.value().value()];
    if (!castObj->DoseNumDecimalsIn.is_nothing() && castObj->DoseNumDecimalsIn.value().hasvalue()) self.doseNumDecimalsIn =  [[NSNumber alloc] initWithShort: castObj->DoseNumDecimalsIn.value().value()];
    if (!castObj->DoseNumDecimalsOut.is_nothing() && castObj->DoseNumDecimalsOut.value().hasvalue()) self.doseNumDecimalsOut =  [[NSNumber alloc] initWithShort: castObj->DoseNumDecimalsOut.value().value()];
    if (!castObj->EnterDetailDialog.is_nothing() && castObj->EnterDetailDialog.value().hasvalue()) self.enterDetailDialog =  [[NSNumber alloc] initWithShort: castObj->EnterDetailDialog.value().value()];
    if (!castObj->UserDictionaryCode.is_nothing() && castObj->UserDictionaryCode.value().hasvalue()) self.userDictionaryCode =  [[NSString alloc] initWithUTF8String: castObj->UserDictionaryCode.value().value().c_str()];
    if (!castObj->Formula.is_nothing() && castObj->Formula.value().hasvalue()) self.formula =  [[NSString alloc] initWithUTF8String: castObj->Formula.value().value().c_str()];
    if (!castObj->CalculationHeading.is_nothing() && castObj->CalculationHeading.value().hasvalue()) self.calculationHeading =  [[NSString alloc] initWithUTF8String: castObj->CalculationHeading.value().value().c_str()];
    if (!castObj->MaskingFormat.is_nothing() && castObj->MaskingFormat.value().hasvalue()) self.maskingFormat =  [[NSString alloc] initWithUTF8String: castObj->MaskingFormat.value().value().c_str()];
    if (!castObj->IsHorizontal.is_nothing() && castObj->IsHorizontal.value().hasvalue()) self.isHorizontal =  [[NSNumber alloc] initWithShort: castObj->IsHorizontal.value().value()];
    if (!castObj->RightJustifiedLabel.is_nothing() && castObj->RightJustifiedLabel.value().hasvalue()) self.rightJustifiedLabel =  [[NSString alloc] initWithUTF8String: castObj->RightJustifiedLabel.value().value().c_str()];
    if (!castObj->RightJustifiedLabelFontSize.is_nothing() && castObj->RightJustifiedLabelFontSize.value().hasvalue()) self.rightJustifiedLabelFontSize =  [[NSString alloc] initWithUTF8String: castObj->RightJustifiedLabelFontSize.value().value().c_str()];
    if (!castObj->LeftJustifiedLabel.is_nothing() && castObj->LeftJustifiedLabel.value().hasvalue()) self.leftJustifiedLabel =  [[NSString alloc] initWithUTF8String: castObj->LeftJustifiedLabel.value().value().c_str()];
    if (!castObj->LeftJustifiedLabelFontSize.is_nothing() && castObj->LeftJustifiedLabelFontSize.value().hasvalue()) self.leftJustifiedLabelFontSize =  [[NSString alloc] initWithUTF8String: castObj->LeftJustifiedLabelFontSize.value().value().c_str()];
    if (!castObj->CommentFontSize.is_nothing() && castObj->CommentFontSize.value().hasvalue()) self.commentFontSize =  [[NSString alloc] initWithUTF8String: castObj->CommentFontSize.value().value().c_str()];
    if (!castObj->ModifyFormFilterFontSize.is_nothing() && castObj->ModifyFormFilterFontSize.value().hasvalue()) self.modifyFormFilterFontSize =  [[NSString alloc] initWithUTF8String: castObj->ModifyFormFilterFontSize.value().value().c_str()];
    if (!castObj->FontSize.is_nothing() && castObj->FontSize.value().hasvalue()) self.fontSize =  [[NSString alloc] initWithUTF8String: castObj->FontSize.value().value().c_str()];
    if (!castObj->ComponentFontSize.is_nothing() && castObj->ComponentFontSize.value().hasvalue()) self.componentFontSize =  [[NSString alloc] initWithUTF8String: castObj->ComponentFontSize.value().value().c_str()];
    if (!castObj->EnterIntake.is_nothing() && castObj->EnterIntake.value().hasvalue()) self.enterIntake =  [[NSNumber alloc] initWithShort: castObj->EnterIntake.value().value()];
    if (!castObj->EnterOutput.is_nothing() && castObj->EnterOutput.value().hasvalue()) self.enterOutput =  [[NSNumber alloc] initWithShort: castObj->EnterOutput.value().value()];
    if (!castObj->EnterNet.is_nothing() && castObj->EnterNet.value().hasvalue()) self.enterNet =  [[NSNumber alloc] initWithShort: castObj->EnterNet.value().value()];
    if (!castObj->Enter24Hr.is_nothing() && castObj->Enter24Hr.value().hasvalue()) self.enter24Hr =  [[NSNumber alloc] initWithShort: castObj->Enter24Hr.value().value()];
    if (!castObj->LabelIn.is_nothing() && castObj->LabelIn.value().hasvalue()) self.labelIn =  [[NSString alloc] initWithUTF8String: castObj->LabelIn.value().value().c_str()];
    if (!castObj->LabelOut.is_nothing() && castObj->LabelOut.value().hasvalue()) self.labelOut =  [[NSString alloc] initWithUTF8String: castObj->LabelOut.value().value().c_str()];
    if (!castObj->LabelNet.is_nothing() && castObj->LabelNet.value().hasvalue()) self.labelNet =  [[NSString alloc] initWithUTF8String: castObj->LabelNet.value().value().c_str()];
    if (!castObj->Label24Hr.is_nothing() && castObj->Label24Hr.value().hasvalue()) self.label24Hr =  [[NSString alloc] initWithUTF8String: castObj->Label24Hr.value().value().c_str()];
    if (!castObj->TotalVolume.is_nothing() && castObj->TotalVolume.value().hasvalue()) self.totalVolume =  [[NSString alloc] initWithUTF8String: castObj->TotalVolume.value().value().c_str()];
    if (!castObj->TotalVolumeUnit.is_nothing() && castObj->TotalVolumeUnit.value().hasvalue()) self.totalVolumeUnit =  [[NSString alloc] initWithUTF8String: castObj->TotalVolumeUnit.value().value().c_str()];
    if (!castObj->Rate.is_nothing() && castObj->Rate.value().hasvalue()) self.rate =  [[NSString alloc] initWithUTF8String: castObj->Rate.value().value().c_str()];
    if (!castObj->RateUnit.is_nothing() && castObj->RateUnit.value().hasvalue()) self.rateUnit =  [[NSString alloc] initWithUTF8String: castObj->RateUnit.value().value().c_str()];
    if (!castObj->NoEditing.is_nothing() && castObj->NoEditing.value().hasvalue()) self.noEditing =  [[NSNumber alloc] initWithShort: castObj->NoEditing.value().value()];
    if (!castObj->HasModifier.is_nothing() && castObj->HasModifier.value().hasvalue()) self.hasModifier =  [[NSNumber alloc] initWithShort: castObj->HasModifier.value().value()];
    if (!castObj->IsLocked.is_nothing() && castObj->IsLocked.value().hasvalue()) self.isLocked =  [[NSNumber alloc] initWithShort: castObj->IsLocked.value().value()];
    if (!castObj->HasWDL.is_nothing() && castObj->HasWDL.value().hasvalue()) self.hasWDL =  [[NSNumber alloc] initWithShort: castObj->HasWDL.value().value()];
    if (!castObj->SiteFontSize.is_nothing() && castObj->SiteFontSize.value().hasvalue()) self.siteFontSize =  [[NSString alloc] initWithUTF8String: castObj->SiteFontSize.value().value().c_str()];
    if (!castObj->SiteDeviceFontSize.is_nothing() && castObj->SiteDeviceFontSize.value().hasvalue()) self.siteDeviceFontSize =  [[NSString alloc] initWithUTF8String: castObj->SiteDeviceFontSize.value().value().c_str()];
    if (!castObj->IsRTFInput.is_nothing() && castObj->IsRTFInput.value().hasvalue()) self.isRTFInput =  [[NSNumber alloc] initWithShort: castObj->IsRTFInput.value().value()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"kind" ] && [dictionary objectForKey: @"kind"] != (id)[NSNull null]) {
      self.kindStringValue = [dictionary objectForKey: @"kind"];
    }
    if ([dictionary.allKeys containsObject: @"Ranges" ] && [dictionary objectForKey: @"Ranges"] != (id)[NSNull null]) {
      self.ranges = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [dictionary objectForKey: @"Ranges"]) {
        [self.ranges addObject: [[BasicRangeDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"ObsList" ] && [dictionary objectForKey: @"ObsList"] != (id)[NSNull null]) {
      self.obsList = [[ObservationListDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"ObsList"]];
    }
    if ([dictionary.allKeys containsObject: @"Name" ] && [dictionary objectForKey: @"Name"] != (id)[NSNull null]) {
      self.name = [dictionary objectForKey: @"Name"];
    }
    if ([dictionary.allKeys containsObject: @"Description" ] && [dictionary objectForKey: @"Description"] != (id)[NSNull null]) {
      self.desc = [dictionary objectForKey: @"Description"];
    }
    if ([dictionary.allKeys containsObject: @"EffectiveDate" ] && [dictionary objectForKey: @"EffectiveDate"] != (id)[NSNull null]) {
      self.effectiveDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"EffectiveDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"ExpiryDate" ] && [dictionary objectForKey: @"ExpiryDate"] != (id)[NSNull null]) {
      self.expiryDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"ExpiryDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"IsGenericItem" ] && [dictionary objectForKey: @"IsGenericItem"] != (id)[NSNull null]) {
      self.isGenericItem = [dictionary objectForKey: @"IsGenericItem"];
    }
    if ([dictionary.allKeys containsObject: @"IsClientCharacteristic" ] && [dictionary objectForKey: @"IsClientCharacteristic"] != (id)[NSNull null]) {
      self.isClientCharacteristic = [dictionary objectForKey: @"IsClientCharacteristic"];
    }
    if ([dictionary.allKeys containsObject: @"PhysicalNoteType" ] && [dictionary objectForKey: @"PhysicalNoteType"] != (id)[NSNull null]) {
      self.physicalNoteType = [dictionary objectForKey: @"PhysicalNoteType"];
    }
    if ([dictionary.allKeys containsObject: @"IsOutcome" ] && [dictionary objectForKey: @"IsOutcome"] != (id)[NSNull null]) {
      self.isOutcome = [dictionary objectForKey: @"IsOutcome"];
    }
    if ([dictionary.allKeys containsObject: @"DataType" ] && [dictionary objectForKey: @"DataType"] != (id)[NSNull null]) {
      self.dataType = [dictionary objectForKey: @"DataType"];
    }
    if ([dictionary.allKeys containsObject: @"CalculationType" ] && [dictionary objectForKey: @"CalculationType"] != (id)[NSNull null]) {
      self.calculationType = [dictionary objectForKey: @"CalculationType"];
    }
    if ([dictionary.allKeys containsObject: @"FluidBalanceType" ] && [dictionary objectForKey: @"FluidBalanceType"] != (id)[NSNull null]) {
      self.fluidBalanceType = [dictionary objectForKey: @"FluidBalanceType"];
    }
    if ([dictionary.allKeys containsObject: @"SummaryType" ] && [dictionary objectForKey: @"SummaryType"] != (id)[NSNull null]) {
      self.summaryType = [dictionary objectForKey: @"SummaryType"];
    }
    if ([dictionary.allKeys containsObject: @"CumulativeStartOfDayType" ] && [dictionary objectForKey: @"CumulativeStartOfDayType"] != (id)[NSNull null]) {
      self.cumulativeStartOfDayType = [dictionary objectForKey: @"CumulativeStartOfDayType"];
    }
    if ([dictionary.allKeys containsObject: @"CalculateCumulative" ] && [dictionary objectForKey: @"CalculateCumulative"] != (id)[NSNull null]) {
      self.calculateCumulative = [dictionary objectForKey: @"CalculateCumulative"];
    }
    if ([dictionary.allKeys containsObject: @"I0Subtype" ] && [dictionary objectForKey: @"I0Subtype"] != (id)[NSNull null]) {
      self.i0Subtype = [dictionary objectForKey: @"I0Subtype"];
    }
    if ([dictionary.allKeys containsObject: @"IncludeInTotals" ] && [dictionary objectForKey: @"IncludeInTotals"] != (id)[NSNull null]) {
      self.includeInTotals = [dictionary objectForKey: @"IncludeInTotals"];
    }
    if ([dictionary.allKeys containsObject: @"AllowApproximates" ] && [dictionary objectForKey: @"AllowApproximates"] != (id)[NSNull null]) {
      self.allowApproximates = [dictionary objectForKey: @"AllowApproximates"];
    }
    if ([dictionary.allKeys containsObject: @"ShowAbsoluteValues" ] && [dictionary objectForKey: @"ShowAbsoluteValues"] != (id)[NSNull null]) {
      self.showAbsoluteValues = [dictionary objectForKey: @"ShowAbsoluteValues"];
    }
    if ([dictionary.allKeys containsObject: @"UnitOfMeasure" ] && [dictionary objectForKey: @"UnitOfMeasure"] != (id)[NSNull null]) {
      self.unitOfMeasure = [dictionary objectForKey: @"UnitOfMeasure"];
    }
    if ([dictionary.allKeys containsObject: @"NumDecimalsIn" ] && [dictionary objectForKey: @"NumDecimalsIn"] != (id)[NSNull null]) {
      self.numDecimalsIn = [dictionary objectForKey: @"NumDecimalsIn"];
    }
    if ([dictionary.allKeys containsObject: @"NumDecimalsOut" ] && [dictionary objectForKey: @"NumDecimalsOut"] != (id)[NSNull null]) {
      self.numDecimalsOut = [dictionary objectForKey: @"NumDecimalsOut"];
    }
    if ([dictionary.allKeys containsObject: @"UseNumericSeparator" ] && [dictionary objectForKey: @"UseNumericSeparator"] != (id)[NSNull null]) {
      self.useNumericSeparator = [dictionary objectForKey: @"UseNumericSeparator"];
    }
    if ([dictionary.allKeys containsObject: @"MaximumLength" ] && [dictionary objectForKey: @"MaximumLength"] != (id)[NSNull null]) {
      self.maximumLength = [dictionary objectForKey: @"MaximumLength"];
    }
    if ([dictionary.allKeys containsObject: @"NumberOfLines" ] && [dictionary objectForKey: @"NumberOfLines"] != (id)[NSNull null]) {
      self.numberOfLines = [dictionary objectForKey: @"NumberOfLines"];
    }
    if ([dictionary.allKeys containsObject: @"IsMultiSelect" ] && [dictionary objectForKey: @"IsMultiSelect"] != (id)[NSNull null]) {
      self.isMultiSelect = [dictionary objectForKey: @"IsMultiSelect"];
    }
    if ([dictionary.allKeys containsObject: @"ValueSeparator" ] && [dictionary objectForKey: @"ValueSeparator"] != (id)[NSNull null]) {
      self.valueSeparator = [dictionary objectForKey: @"ValueSeparator"];
    }
    if ([dictionary.allKeys containsObject: @"TextValidationDict" ] && [dictionary objectForKey: @"TextValidationDict"] != (id)[NSNull null]) {
      self.textValidationDict = [dictionary objectForKey: @"TextValidationDict"];
    }
    if ([dictionary.allKeys containsObject: @"HasNumericEquiv" ] && [dictionary objectForKey: @"HasNumericEquiv"] != (id)[NSNull null]) {
      self.hasNumericEquiv = [dictionary objectForKey: @"HasNumericEquiv"];
    }
    if ([dictionary.allKeys containsObject: @"TrueText" ] && [dictionary objectForKey: @"TrueText"] != (id)[NSNull null]) {
      self.trueText = [dictionary objectForKey: @"TrueText"];
    }
    if ([dictionary.allKeys containsObject: @"FalseText" ] && [dictionary objectForKey: @"FalseText"] != (id)[NSNull null]) {
      self.falseText = [dictionary objectForKey: @"FalseText"];
    }
    if ([dictionary.allKeys containsObject: @"DisplayUOM" ] && [dictionary objectForKey: @"DisplayUOM"] != (id)[NSNull null]) {
      self.displayUOM = [dictionary objectForKey: @"DisplayUOM"];
    }
    if ([dictionary.allKeys containsObject: @"ModifyFormFilter" ] && [dictionary objectForKey: @"ModifyFormFilter"] != (id)[NSNull null]) {
      self.modifyFormFilter = [dictionary objectForKey: @"ModifyFormFilter"];
    }
    if ([dictionary.allKeys containsObject: @"IsDeviceInterface" ] && [dictionary objectForKey: @"IsDeviceInterface"] != (id)[NSNull null]) {
      self.isDeviceInterface = [dictionary objectForKey: @"IsDeviceInterface"];
    }
    if ([dictionary.allKeys containsObject: @"ParameterType" ] && [dictionary objectForKey: @"ParameterType"] != (id)[NSNull null]) {
      self.parameterType = [dictionary objectForKey: @"ParameterType"];
    }
    if ([dictionary.allKeys containsObject: @"RoundOffResult" ] && [dictionary objectForKey: @"RoundOffResult"] != (id)[NSNull null]) {
      self.roundOffResult = [dictionary objectForKey: @"RoundOffResult"];
    }
    if ([dictionary.allKeys containsObject: @"OutputNumDecimalsIn" ] && [dictionary objectForKey: @"OutputNumDecimalsIn"] != (id)[NSNull null]) {
      self.outputNumDecimalsIn = [dictionary objectForKey: @"OutputNumDecimalsIn"];
    }
    if ([dictionary.allKeys containsObject: @"OutputNumDecimalsOut" ] && [dictionary objectForKey: @"OutputNumDecimalsOut"] != (id)[NSNull null]) {
      self.outputNumDecimalsOut = [dictionary objectForKey: @"OutputNumDecimalsOut"];
    }
    if ([dictionary.allKeys containsObject: @"RateNumDecimalsIn" ] && [dictionary objectForKey: @"RateNumDecimalsIn"] != (id)[NSNull null]) {
      self.rateNumDecimalsIn = [dictionary objectForKey: @"RateNumDecimalsIn"];
    }
    if ([dictionary.allKeys containsObject: @"RateNumDecimalsOut" ] && [dictionary objectForKey: @"RateNumDecimalsOut"] != (id)[NSNull null]) {
      self.rateNumDecimalsOut = [dictionary objectForKey: @"RateNumDecimalsOut"];
    }
    if ([dictionary.allKeys containsObject: @"DoseNumDecimalsIn" ] && [dictionary objectForKey: @"DoseNumDecimalsIn"] != (id)[NSNull null]) {
      self.doseNumDecimalsIn = [dictionary objectForKey: @"DoseNumDecimalsIn"];
    }
    if ([dictionary.allKeys containsObject: @"DoseNumDecimalsOut" ] && [dictionary objectForKey: @"DoseNumDecimalsOut"] != (id)[NSNull null]) {
      self.doseNumDecimalsOut = [dictionary objectForKey: @"DoseNumDecimalsOut"];
    }
    if ([dictionary.allKeys containsObject: @"EnterDetailDialog" ] && [dictionary objectForKey: @"EnterDetailDialog"] != (id)[NSNull null]) {
      self.enterDetailDialog = [dictionary objectForKey: @"EnterDetailDialog"];
    }
    if ([dictionary.allKeys containsObject: @"UserDictionaryCode" ] && [dictionary objectForKey: @"UserDictionaryCode"] != (id)[NSNull null]) {
      self.userDictionaryCode = [dictionary objectForKey: @"UserDictionaryCode"];
    }
    if ([dictionary.allKeys containsObject: @"Formula" ] && [dictionary objectForKey: @"Formula"] != (id)[NSNull null]) {
      self.formula = [dictionary objectForKey: @"Formula"];
    }
    if ([dictionary.allKeys containsObject: @"CalculationHeading" ] && [dictionary objectForKey: @"CalculationHeading"] != (id)[NSNull null]) {
      self.calculationHeading = [dictionary objectForKey: @"CalculationHeading"];
    }
    if ([dictionary.allKeys containsObject: @"MaskingFormat" ] && [dictionary objectForKey: @"MaskingFormat"] != (id)[NSNull null]) {
      self.maskingFormat = [dictionary objectForKey: @"MaskingFormat"];
    }
    if ([dictionary.allKeys containsObject: @"IsHorizontal" ] && [dictionary objectForKey: @"IsHorizontal"] != (id)[NSNull null]) {
      self.isHorizontal = [dictionary objectForKey: @"IsHorizontal"];
    }
    if ([dictionary.allKeys containsObject: @"RightJustifiedLabel" ] && [dictionary objectForKey: @"RightJustifiedLabel"] != (id)[NSNull null]) {
      self.rightJustifiedLabel = [dictionary objectForKey: @"RightJustifiedLabel"];
    }
    if ([dictionary.allKeys containsObject: @"RightJustifiedLabelFontSize" ] && [dictionary objectForKey: @"RightJustifiedLabelFontSize"] != (id)[NSNull null]) {
      self.rightJustifiedLabelFontSize = [dictionary objectForKey: @"RightJustifiedLabelFontSize"];
    }
    if ([dictionary.allKeys containsObject: @"LeftJustifiedLabel" ] && [dictionary objectForKey: @"LeftJustifiedLabel"] != (id)[NSNull null]) {
      self.leftJustifiedLabel = [dictionary objectForKey: @"LeftJustifiedLabel"];
    }
    if ([dictionary.allKeys containsObject: @"LeftJustifiedLabelFontSize" ] && [dictionary objectForKey: @"LeftJustifiedLabelFontSize"] != (id)[NSNull null]) {
      self.leftJustifiedLabelFontSize = [dictionary objectForKey: @"LeftJustifiedLabelFontSize"];
    }
    if ([dictionary.allKeys containsObject: @"CommentFontSize" ] && [dictionary objectForKey: @"CommentFontSize"] != (id)[NSNull null]) {
      self.commentFontSize = [dictionary objectForKey: @"CommentFontSize"];
    }
    if ([dictionary.allKeys containsObject: @"ModifyFormFilterFontSize" ] && [dictionary objectForKey: @"ModifyFormFilterFontSize"] != (id)[NSNull null]) {
      self.modifyFormFilterFontSize = [dictionary objectForKey: @"ModifyFormFilterFontSize"];
    }
    if ([dictionary.allKeys containsObject: @"FontSize" ] && [dictionary objectForKey: @"FontSize"] != (id)[NSNull null]) {
      self.fontSize = [dictionary objectForKey: @"FontSize"];
    }
    if ([dictionary.allKeys containsObject: @"ComponentFontSize" ] && [dictionary objectForKey: @"ComponentFontSize"] != (id)[NSNull null]) {
      self.componentFontSize = [dictionary objectForKey: @"ComponentFontSize"];
    }
    if ([dictionary.allKeys containsObject: @"EnterIntake" ] && [dictionary objectForKey: @"EnterIntake"] != (id)[NSNull null]) {
      self.enterIntake = [dictionary objectForKey: @"EnterIntake"];
    }
    if ([dictionary.allKeys containsObject: @"EnterOutput" ] && [dictionary objectForKey: @"EnterOutput"] != (id)[NSNull null]) {
      self.enterOutput = [dictionary objectForKey: @"EnterOutput"];
    }
    if ([dictionary.allKeys containsObject: @"EnterNet" ] && [dictionary objectForKey: @"EnterNet"] != (id)[NSNull null]) {
      self.enterNet = [dictionary objectForKey: @"EnterNet"];
    }
    if ([dictionary.allKeys containsObject: @"Enter24Hr" ] && [dictionary objectForKey: @"Enter24Hr"] != (id)[NSNull null]) {
      self.enter24Hr = [dictionary objectForKey: @"Enter24Hr"];
    }
    if ([dictionary.allKeys containsObject: @"LabelIn" ] && [dictionary objectForKey: @"LabelIn"] != (id)[NSNull null]) {
      self.labelIn = [dictionary objectForKey: @"LabelIn"];
    }
    if ([dictionary.allKeys containsObject: @"LabelOut" ] && [dictionary objectForKey: @"LabelOut"] != (id)[NSNull null]) {
      self.labelOut = [dictionary objectForKey: @"LabelOut"];
    }
    if ([dictionary.allKeys containsObject: @"LabelNet" ] && [dictionary objectForKey: @"LabelNet"] != (id)[NSNull null]) {
      self.labelNet = [dictionary objectForKey: @"LabelNet"];
    }
    if ([dictionary.allKeys containsObject: @"Label24Hr" ] && [dictionary objectForKey: @"Label24Hr"] != (id)[NSNull null]) {
      self.label24Hr = [dictionary objectForKey: @"Label24Hr"];
    }
    if ([dictionary.allKeys containsObject: @"TotalVolume" ] && [dictionary objectForKey: @"TotalVolume"] != (id)[NSNull null]) {
      self.totalVolume = [dictionary objectForKey: @"TotalVolume"];
    }
    if ([dictionary.allKeys containsObject: @"TotalVolumeUnit" ] && [dictionary objectForKey: @"TotalVolumeUnit"] != (id)[NSNull null]) {
      self.totalVolumeUnit = [dictionary objectForKey: @"TotalVolumeUnit"];
    }
    if ([dictionary.allKeys containsObject: @"Rate" ] && [dictionary objectForKey: @"Rate"] != (id)[NSNull null]) {
      self.rate = [dictionary objectForKey: @"Rate"];
    }
    if ([dictionary.allKeys containsObject: @"RateUnit" ] && [dictionary objectForKey: @"RateUnit"] != (id)[NSNull null]) {
      self.rateUnit = [dictionary objectForKey: @"RateUnit"];
    }
    if ([dictionary.allKeys containsObject: @"NoEditing" ] && [dictionary objectForKey: @"NoEditing"] != (id)[NSNull null]) {
      self.noEditing = [dictionary objectForKey: @"NoEditing"];
    }
    if ([dictionary.allKeys containsObject: @"HasModifier" ] && [dictionary objectForKey: @"HasModifier"] != (id)[NSNull null]) {
      self.hasModifier = [dictionary objectForKey: @"HasModifier"];
    }
    if ([dictionary.allKeys containsObject: @"IsLocked" ] && [dictionary objectForKey: @"IsLocked"] != (id)[NSNull null]) {
      self.isLocked = [dictionary objectForKey: @"IsLocked"];
    }
    if ([dictionary.allKeys containsObject: @"HasWDL" ] && [dictionary objectForKey: @"HasWDL"] != (id)[NSNull null]) {
      self.hasWDL = [dictionary objectForKey: @"HasWDL"];
    }
    if ([dictionary.allKeys containsObject: @"SiteFontSize" ] && [dictionary objectForKey: @"SiteFontSize"] != (id)[NSNull null]) {
      self.siteFontSize = [dictionary objectForKey: @"SiteFontSize"];
    }
    if ([dictionary.allKeys containsObject: @"SiteDeviceFontSize" ] && [dictionary objectForKey: @"SiteDeviceFontSize"] != (id)[NSNull null]) {
      self.siteDeviceFontSize = [dictionary objectForKey: @"SiteDeviceFontSize"];
    }
    if ([dictionary.allKeys containsObject: @"IsRTFInput" ] && [dictionary objectForKey: @"IsRTFInput"] != (id)[NSNull null]) {
      self.isRTFInput = [dictionary objectForKey: @"IsRTFInput"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::ObservationDescription obj = CppBondSerializer<::ObservationDescription>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::ObservationDescription* obj = new ObservationDescription();
  if (self.id != nil) obj->Id = [self.id longValue];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.kind != nil) obj->kind = static_cast<::ObservationKind>([self.kind intValue]);
  if (self.ranges != nil) {
    for (id item in self.ranges) {
      obj->Ranges.set_value().push_back(*(::BasicRange*)[item toBondObject]);
    }
  }
  if (self.obsList != nil) obj->ObsList.set_value().set(*(::ObservationList*)[self.obsList toBondObject]);
  if (self.name != nil) obj->Name.set_value().set([self.name cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.desc != nil) obj->Description.set_value().set([self.desc cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.effectiveDate != nil) obj->EffectiveDate.set_value().set([self.effectiveDate timeIntervalSince1970]);
  if (self.expiryDate != nil) obj->ExpiryDate.set_value().set([self.expiryDate timeIntervalSince1970]);
  if (self.isGenericItem != nil) obj->IsGenericItem.set_value().set([self.isGenericItem shortValue]);
  if (self.isClientCharacteristic != nil) obj->IsClientCharacteristic.set_value().set([self.isClientCharacteristic shortValue]);
  if (self.physicalNoteType != nil) obj->PhysicalNoteType.set_value().set([self.physicalNoteType cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.isOutcome != nil) obj->IsOutcome.set_value().set([self.isOutcome shortValue]);
  if (self.dataType != nil) obj->DataType.set_value().set([self.dataType cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.calculationType != nil) obj->CalculationType.set_value().set([self.calculationType cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.fluidBalanceType != nil) obj->FluidBalanceType.set_value().set([self.fluidBalanceType cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.summaryType != nil) obj->SummaryType.set_value().set([self.summaryType cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.cumulativeStartOfDayType != nil) obj->CumulativeStartOfDayType.set_value().set([self.cumulativeStartOfDayType cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.calculateCumulative != nil) obj->CalculateCumulative.set_value().set([self.calculateCumulative shortValue]);
  if (self.i0Subtype != nil) obj->I0Subtype.set_value().set([self.i0Subtype cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.includeInTotals != nil) obj->IncludeInTotals.set_value().set([self.includeInTotals shortValue]);
  if (self.allowApproximates != nil) obj->AllowApproximates.set_value().set([self.allowApproximates shortValue]);
  if (self.showAbsoluteValues != nil) obj->ShowAbsoluteValues.set_value().set([self.showAbsoluteValues shortValue]);
  if (self.unitOfMeasure != nil) obj->UnitOfMeasure.set_value().set([self.unitOfMeasure cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.numDecimalsIn != nil) obj->NumDecimalsIn.set_value().set([self.numDecimalsIn shortValue]);
  if (self.numDecimalsOut != nil) obj->NumDecimalsOut.set_value().set([self.numDecimalsOut shortValue]);
  if (self.useNumericSeparator != nil) obj->UseNumericSeparator.set_value().set([self.useNumericSeparator shortValue]);
  if (self.maximumLength != nil) obj->MaximumLength.set_value().set([self.maximumLength shortValue]);
  if (self.numberOfLines != nil) obj->NumberOfLines.set_value().set([self.numberOfLines shortValue]);
  if (self.isMultiSelect != nil) obj->IsMultiSelect.set_value().set([self.isMultiSelect shortValue]);
  if (self.valueSeparator != nil) obj->ValueSeparator.set_value().set([self.valueSeparator cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.textValidationDict != nil) obj->TextValidationDict.set_value().set([self.textValidationDict cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.hasNumericEquiv != nil) obj->HasNumericEquiv.set_value().set([self.hasNumericEquiv shortValue]);
  if (self.trueText != nil) obj->TrueText.set_value().set([self.trueText cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.falseText != nil) obj->FalseText.set_value().set([self.falseText cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.displayUOM != nil) obj->DisplayUOM.set_value().set([self.displayUOM shortValue]);
  if (self.modifyFormFilter != nil) obj->ModifyFormFilter.set_value().set([self.modifyFormFilter cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.isDeviceInterface != nil) obj->IsDeviceInterface.set_value().set([self.isDeviceInterface shortValue]);
  if (self.parameterType != nil) obj->ParameterType.set_value().set([self.parameterType cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.roundOffResult != nil) obj->RoundOffResult.set_value().set([self.roundOffResult shortValue]);
  if (self.outputNumDecimalsIn != nil) obj->OutputNumDecimalsIn.set_value().set([self.outputNumDecimalsIn shortValue]);
  if (self.outputNumDecimalsOut != nil) obj->OutputNumDecimalsOut.set_value().set([self.outputNumDecimalsOut shortValue]);
  if (self.rateNumDecimalsIn != nil) obj->RateNumDecimalsIn.set_value().set([self.rateNumDecimalsIn shortValue]);
  if (self.rateNumDecimalsOut != nil) obj->RateNumDecimalsOut.set_value().set([self.rateNumDecimalsOut shortValue]);
  if (self.doseNumDecimalsIn != nil) obj->DoseNumDecimalsIn.set_value().set([self.doseNumDecimalsIn shortValue]);
  if (self.doseNumDecimalsOut != nil) obj->DoseNumDecimalsOut.set_value().set([self.doseNumDecimalsOut shortValue]);
  if (self.enterDetailDialog != nil) obj->EnterDetailDialog.set_value().set([self.enterDetailDialog shortValue]);
  if (self.userDictionaryCode != nil) obj->UserDictionaryCode.set_value().set([self.userDictionaryCode cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.formula != nil) obj->Formula.set_value().set([self.formula cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.calculationHeading != nil) obj->CalculationHeading.set_value().set([self.calculationHeading cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.maskingFormat != nil) obj->MaskingFormat.set_value().set([self.maskingFormat cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.isHorizontal != nil) obj->IsHorizontal.set_value().set([self.isHorizontal shortValue]);
  if (self.rightJustifiedLabel != nil) obj->RightJustifiedLabel.set_value().set([self.rightJustifiedLabel cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.rightJustifiedLabelFontSize != nil) obj->RightJustifiedLabelFontSize.set_value().set([self.rightJustifiedLabelFontSize cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.leftJustifiedLabel != nil) obj->LeftJustifiedLabel.set_value().set([self.leftJustifiedLabel cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.leftJustifiedLabelFontSize != nil) obj->LeftJustifiedLabelFontSize.set_value().set([self.leftJustifiedLabelFontSize cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.commentFontSize != nil) obj->CommentFontSize.set_value().set([self.commentFontSize cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.modifyFormFilterFontSize != nil) obj->ModifyFormFilterFontSize.set_value().set([self.modifyFormFilterFontSize cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.fontSize != nil) obj->FontSize.set_value().set([self.fontSize cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.componentFontSize != nil) obj->ComponentFontSize.set_value().set([self.componentFontSize cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.enterIntake != nil) obj->EnterIntake.set_value().set([self.enterIntake shortValue]);
  if (self.enterOutput != nil) obj->EnterOutput.set_value().set([self.enterOutput shortValue]);
  if (self.enterNet != nil) obj->EnterNet.set_value().set([self.enterNet shortValue]);
  if (self.enter24Hr != nil) obj->Enter24Hr.set_value().set([self.enter24Hr shortValue]);
  if (self.labelIn != nil) obj->LabelIn.set_value().set([self.labelIn cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.labelOut != nil) obj->LabelOut.set_value().set([self.labelOut cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.labelNet != nil) obj->LabelNet.set_value().set([self.labelNet cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.label24Hr != nil) obj->Label24Hr.set_value().set([self.label24Hr cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.totalVolume != nil) obj->TotalVolume.set_value().set([self.totalVolume cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.totalVolumeUnit != nil) obj->TotalVolumeUnit.set_value().set([self.totalVolumeUnit cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.rate != nil) obj->Rate.set_value().set([self.rate cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.rateUnit != nil) obj->RateUnit.set_value().set([self.rateUnit cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.noEditing != nil) obj->NoEditing.set_value().set([self.noEditing shortValue]);
  if (self.hasModifier != nil) obj->HasModifier.set_value().set([self.hasModifier shortValue]);
  if (self.isLocked != nil) obj->IsLocked.set_value().set([self.isLocked shortValue]);
  if (self.hasWDL != nil) obj->HasWDL.set_value().set([self.hasWDL shortValue]);
  if (self.siteFontSize != nil) obj->SiteFontSize.set_value().set([self.siteFontSize cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.siteDeviceFontSize != nil) obj->SiteDeviceFontSize.set_value().set([self.siteDeviceFontSize cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.isRTFInput != nil) obj->IsRTFInput.set_value().set([self.isRTFInput shortValue]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::ObservationDescription*)[self toBondObject];
  return CppBondSerializer<::ObservationDescription>::serializeToByteArray(*obj, resultLen);
}

@end
