//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Provider_reflection.h>
#import <ProviderDto.h>
#import <CoordinatesDto.h>

@implementation ProviderDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Provider* castObj = (::Provider*)obj;
    self.id = [[NSNumber alloc] initWithLongLong: castObj->Id];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (castObj->Coordinates.hasvalue()) self.coordinates =  [[CoordinatesDto alloc] initWithBondObject: &(castObj->Coordinates.value())];
    if (!castObj->NationalProviderIdentifier.is_nothing() && castObj->NationalProviderIdentifier.value().hasvalue()) self.nationalProviderIdentifier =  [[NSString alloc] initWithUTF8String: castObj->NationalProviderIdentifier.value().value().c_str()];
    if (!castObj->Name.is_nothing() && castObj->Name.value().hasvalue()) self.name =  [[NSString alloc] initWithUTF8String: castObj->Name.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Coordinates" ] && [dictionary objectForKey: @"Coordinates"] != (id)[NSNull null]) {
      self.coordinates = [[CoordinatesDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"Coordinates"]];
    }
    if ([dictionary.allKeys containsObject: @"NationalProviderIdentifier" ] && [dictionary objectForKey: @"NationalProviderIdentifier"] != (id)[NSNull null]) {
      self.nationalProviderIdentifier = [dictionary objectForKey: @"NationalProviderIdentifier"];
    }
    if ([dictionary.allKeys containsObject: @"Name" ] && [dictionary objectForKey: @"Name"] != (id)[NSNull null]) {
      self.name = [dictionary objectForKey: @"Name"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Provider obj = CppBondSerializer<::Provider>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Provider* obj = new Provider();
  if (self.id != nil) obj->Id = [self.id longValue];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.coordinates != nil) obj->Coordinates.set(*(::Coordinates*)[self.coordinates toBondObject]);
  if (self.nationalProviderIdentifier != nil) obj->NationalProviderIdentifier.set_value().set([self.nationalProviderIdentifier cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.name != nil) obj->Name.set_value().set([self.name cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Provider*)[self toBondObject];
  return CppBondSerializer<::Provider>::serializeToByteArray(*obj, resultLen);
}

@end
