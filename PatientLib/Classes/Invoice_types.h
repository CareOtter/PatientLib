
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Invoice_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"
#include "BillingProcedure_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    struct Invoice
      : ::HealthCare::Schemas::BaseItem
    {
        bond::maybe<bond::nullable<int64_t> > InvoiceDate;
        bond::maybe<bond::nullable<std::string> > InvoiceId;
        bond::maybe<bond::nullable<std::string> > PatientName;
        bond::maybe<bond::nullable<std::string> > ProviderName;
        bond::maybe<bond::nullable<std::string> > ProcedureName;
        bond::maybe<bond::nullable<double> > Charges;
        bond::maybe<bond::nullable<double> > InsurancePayment;
        bond::maybe<bond::nullable<double> > PatientPayment;
        bond::maybe<bond::nullable<double> > AmountDueNow;
        bond::maybe<bond::nullable<bool> > PendingWithInsurance;
        bond::maybe<bond::nullable<std::string> > InvoiceStatus;
        bond::maybe<bond::nullable<std::string> > InvoicePracticeId;
        bond::maybe<bond::nullable<bool> > PendingPayment;
        std::vector< ::HealthCare::Schemas::BillingProcedure> BillingProcedures;
        
        Invoice()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Invoice(const Invoice& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Invoice(Invoice&& other)
          : ::HealthCare::Schemas::BaseItem(std::move(other)),
            InvoiceDate(std::move(other.InvoiceDate)),
            InvoiceId(std::move(other.InvoiceId)),
            PatientName(std::move(other.PatientName)),
            ProviderName(std::move(other.ProviderName)),
            ProcedureName(std::move(other.ProcedureName)),
            Charges(std::move(other.Charges)),
            InsurancePayment(std::move(other.InsurancePayment)),
            PatientPayment(std::move(other.PatientPayment)),
            AmountDueNow(std::move(other.AmountDueNow)),
            PendingWithInsurance(std::move(other.PendingWithInsurance)),
            InvoiceStatus(std::move(other.InvoiceStatus)),
            InvoicePracticeId(std::move(other.InvoicePracticeId)),
            PendingPayment(std::move(other.PendingPayment)),
            BillingProcedures(std::move(other.BillingProcedures))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Invoice& operator=(const Invoice& other) = default;
#endif

        bool operator==(const Invoice& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseItem&>( other))
                && (InvoiceDate == other.InvoiceDate)
                && (InvoiceId == other.InvoiceId)
                && (PatientName == other.PatientName)
                && (ProviderName == other.ProviderName)
                && (ProcedureName == other.ProcedureName)
                && (Charges == other.Charges)
                && (InsurancePayment == other.InsurancePayment)
                && (PatientPayment == other.PatientPayment)
                && (AmountDueNow == other.AmountDueNow)
                && (PendingWithInsurance == other.PendingWithInsurance)
                && (InvoiceStatus == other.InvoiceStatus)
                && (InvoicePracticeId == other.InvoicePracticeId)
                && (PendingPayment == other.PendingPayment)
                && (BillingProcedures == other.BillingProcedures);
        }

        bool operator!=(const Invoice& other) const
        {
            return !(*this == other);
        }

        void swap(Invoice& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseItem::swap( other);
            swap(InvoiceDate, other.InvoiceDate);
            swap(InvoiceId, other.InvoiceId);
            swap(PatientName, other.PatientName);
            swap(ProviderName, other.ProviderName);
            swap(ProcedureName, other.ProcedureName);
            swap(Charges, other.Charges);
            swap(InsurancePayment, other.InsurancePayment);
            swap(PatientPayment, other.PatientPayment);
            swap(AmountDueNow, other.AmountDueNow);
            swap(PendingWithInsurance, other.PendingWithInsurance);
            swap(InvoiceStatus, other.InvoiceStatus);
            swap(InvoicePracticeId, other.InvoicePracticeId);
            swap(PendingPayment, other.PendingPayment);
            swap(BillingProcedures, other.BillingProcedures);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(Invoice& left, Invoice& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

