
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Order_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "Order_reflection.h"
#include <bond/core/exception.h>

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace OrderPriority
    {
        const
        std::map<std::string, enum OrderPriority> _name_to_value_OrderPriority =
            boost::assign::map_list_of<std::string, enum OrderPriority>
                ("Routine", Routine)
                ("Stat", Stat);

        const
        std::map<enum OrderPriority, std::string> _value_to_name_OrderPriority =
            bond::reverse_map(_name_to_value_OrderPriority);

        const std::string& ToString(enum OrderPriority value)
        {
            std::map<enum OrderPriority, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "OrderPriority");

            return it->second;
        }

        void FromString(const std::string& name, enum OrderPriority& value)
        {
            std::map<std::string, enum OrderPriority>::const_iterator it =
                _name_to_value_OrderPriority.find(name);

            if (_name_to_value_OrderPriority.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "OrderPriority");

            value = it->second;
        }

    } // namespace OrderPriority
    } // namespace _bond_enumerators

    
    namespace _bond_enumerators
    {
    namespace OrderType
    {
        const
        std::map<std::string, enum OrderType> _name_to_value_OrderType =
            boost::assign::map_list_of<std::string, enum OrderType>
                ("Laboratory", Laboratory)
                ("Imaging", Imaging);

        const
        std::map<enum OrderType, std::string> _value_to_name_OrderType =
            bond::reverse_map(_name_to_value_OrderType);

        const std::string& ToString(enum OrderType value)
        {
            std::map<enum OrderType, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "OrderType");

            return it->second;
        }

        void FromString(const std::string& name, enum OrderType& value)
        {
            std::map<std::string, enum OrderType>::const_iterator it =
                _name_to_value_OrderType.find(name);

            if (_name_to_value_OrderType.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "OrderType");

            value = it->second;
        }

    } // namespace OrderType
    } // namespace _bond_enumerators

    
    const bond::Metadata Order::Schema::metadata
        = Order::Schema::GetMetadata();
    
    const bond::Metadata Order::Schema::s_OrderDate_metadata
        = bond::reflection::MetadataInit(bond::nothing, "OrderDate");
    
    const bond::Metadata Order::Schema::s_Results_metadata
        = bond::reflection::MetadataInit("Results");
    
    const bond::Metadata Order::Schema::s_ScheduledDate_metadata
        = bond::reflection::MetadataInit(bond::nothing, "ScheduledDate");
    
    const bond::Metadata Order::Schema::s_Priority_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Priority");
    
    const bond::Metadata Order::Schema::s_OrderingProvider_metadata
        = bond::reflection::MetadataInit(bond::nothing, "OrderingProvider");
    
    const bond::Metadata Order::Schema::s_OrderType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "OrderType");
    
    const bond::Metadata Order::Schema::s_PerformingFacility_metadata
        = bond::reflection::MetadataInit(bond::nothing, "PerformingFacility");
    
    const bond::Metadata Order::Schema::s_CopyTo_metadata
        = bond::reflection::MetadataInit(bond::nothing, "CopyTo");
    
    const bond::Metadata Order::Schema::s_OrderItemSpecificInformation_metadata
        = bond::reflection::MetadataInit(bond::nothing, "OrderItemSpecificInformation");
    
    const bond::Metadata Order::Schema::s_CollectionInfo_metadata
        = bond::reflection::MetadataInit(bond::nothing, "CollectionInfo");
    
    const bond::Metadata Order::Schema::s_PatientInstructions_metadata
        = bond::reflection::MetadataInit(bond::nothing, "PatientInstructions");
    
    const bond::Metadata Order::Schema::s_PerformingFacilityInstructions_metadata
        = bond::reflection::MetadataInit(bond::nothing, "PerformingFacilityInstructions");
    
    const bond::Metadata Order::Schema::s_OrderingProviderName_metadata
        = bond::reflection::MetadataInit(bond::nothing, "OrderingProviderName");

    
} // namespace Schemas
} // namespace HealthCare
