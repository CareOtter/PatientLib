
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Problem_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace ProblemStatus
    {
        enum ProblemStatus
        {
            Active,
            Inactive,
            Historical
        };
        
        extern const std::map<enum ProblemStatus, std::string> _value_to_name_ProblemStatus;
        extern const std::map<std::string, enum ProblemStatus> _name_to_value_ProblemStatus;

        inline
        const char* GetTypeName(enum ProblemStatus)
        {
            return "ProblemStatus";
        }

        inline
        const char* GetTypeName(enum ProblemStatus, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.ProblemStatus";
        }

        inline
        const std::map<enum ProblemStatus, std::string>& GetValueToNameMap(enum ProblemStatus)
        {
            return _value_to_name_ProblemStatus;
        }

        inline
        const std::map<std::string, enum ProblemStatus>& GetNameToValueMap(enum ProblemStatus)
        {
            return _name_to_value_ProblemStatus;
        }

        const std::string& ToString(enum ProblemStatus value);

        void FromString(const std::string& name, enum ProblemStatus& value);

        inline
        bool ToEnum(enum ProblemStatus& value, const std::string& name)
        {
            std::map<std::string, enum ProblemStatus>::const_iterator it =
                _name_to_value_ProblemStatus.find(name);

            if (_name_to_value_ProblemStatus.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace ProblemStatus
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::ProblemStatus;
    

    
    namespace _bond_enumerators
    {
    namespace ProblemType
    {
        enum ProblemType
        {
            Unknown,
            Acute,
            Chronic
        };
        
        extern const std::map<enum ProblemType, std::string> _value_to_name_ProblemType;
        extern const std::map<std::string, enum ProblemType> _name_to_value_ProblemType;

        inline
        const char* GetTypeName(enum ProblemType)
        {
            return "ProblemType";
        }

        inline
        const char* GetTypeName(enum ProblemType, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.ProblemType";
        }

        inline
        const std::map<enum ProblemType, std::string>& GetValueToNameMap(enum ProblemType)
        {
            return _value_to_name_ProblemType;
        }

        inline
        const std::map<std::string, enum ProblemType>& GetNameToValueMap(enum ProblemType)
        {
            return _name_to_value_ProblemType;
        }

        const std::string& ToString(enum ProblemType value);

        void FromString(const std::string& name, enum ProblemType& value);

        inline
        bool ToEnum(enum ProblemType& value, const std::string& name)
        {
            std::map<std::string, enum ProblemType>::const_iterator it =
                _name_to_value_ProblemType.find(name);

            if (_name_to_value_ProblemType.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace ProblemType
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::ProblemType;
    

    
    struct RelatedOrder
      : ::HealthCare::Schemas::BaseItem
    {
        
        RelatedOrder()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        RelatedOrder(const RelatedOrder& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        RelatedOrder(RelatedOrder&& other)
          : ::HealthCare::Schemas::BaseItem(std::move(other))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        RelatedOrder& operator=(const RelatedOrder& other) = default;
#endif

        bool operator==(const RelatedOrder& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseItem&>( other));
        }

        bool operator!=(const RelatedOrder& other) const
        {
            return !(*this == other);
        }

        void swap(RelatedOrder& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseItem::swap( other);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(RelatedOrder& left, RelatedOrder& right)
    {
        left.swap(right);
    }

    
    struct RelatedMedication
      : ::HealthCare::Schemas::BaseItem
    {
        
        RelatedMedication()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        RelatedMedication(const RelatedMedication& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        RelatedMedication(RelatedMedication&& other)
          : ::HealthCare::Schemas::BaseItem(std::move(other))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        RelatedMedication& operator=(const RelatedMedication& other) = default;
#endif

        bool operator==(const RelatedMedication& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseItem&>( other));
        }

        bool operator!=(const RelatedMedication& other) const
        {
            return !(*this == other);
        }

        void swap(RelatedMedication& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseItem::swap( other);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(RelatedMedication& left, RelatedMedication& right)
    {
        left.swap(right);
    }

    
    struct Problem
      : ::HealthCare::Schemas::BaseClinicalItem
    {
        bond::maybe<bond::nullable<int64_t> > Onset;
        bond::maybe<bond::nullable<int64_t> > Resolved;
        std::vector< ::HealthCare::Schemas::RelatedMedication> RelatedMedications;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::ProblemStatus> > ProblemStatus;
        bond::maybe<bond::nullable< ::HealthCare::Schemas::ProblemType> > ProblemType;
        bond::maybe<bond::nullable<std::string> > ManagingProviderName;
        bond::maybe<bond::nullable<int64_t> > LastAssessed;
        std::vector< ::HealthCare::Schemas::RelatedOrder> RelatedOrders;
        
        Problem()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Problem(const Problem& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Problem(Problem&& other)
          : ::HealthCare::Schemas::BaseClinicalItem(std::move(other)),
            Onset(std::move(other.Onset)),
            Resolved(std::move(other.Resolved)),
            RelatedMedications(std::move(other.RelatedMedications)),
            ProblemStatus(std::move(other.ProblemStatus)),
            ProblemType(std::move(other.ProblemType)),
            ManagingProviderName(std::move(other.ManagingProviderName)),
            LastAssessed(std::move(other.LastAssessed)),
            RelatedOrders(std::move(other.RelatedOrders))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Problem& operator=(const Problem& other) = default;
#endif

        bool operator==(const Problem& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>( other))
                && (Onset == other.Onset)
                && (Resolved == other.Resolved)
                && (RelatedMedications == other.RelatedMedications)
                && (ProblemStatus == other.ProblemStatus)
                && (ProblemType == other.ProblemType)
                && (ManagingProviderName == other.ManagingProviderName)
                && (LastAssessed == other.LastAssessed)
                && (RelatedOrders == other.RelatedOrders);
        }

        bool operator!=(const Problem& other) const
        {
            return !(*this == other);
        }

        void swap(Problem& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseClinicalItem::swap( other);
            swap(Onset, other.Onset);
            swap(Resolved, other.Resolved);
            swap(RelatedMedications, other.RelatedMedications);
            swap(ProblemStatus, other.ProblemStatus);
            swap(ProblemType, other.ProblemType);
            swap(ManagingProviderName, other.ManagingProviderName);
            swap(LastAssessed, other.LastAssessed);
            swap(RelatedOrders, other.RelatedOrders);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseClinicalItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(Problem& left, Problem& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

