
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : UserSchema_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "UserSchema_reflection.h"
#include <bond/core/exception.h>

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace FeedbackType
    {
        const
        std::map<std::string, enum FeedbackType> _name_to_value_FeedbackType =
            boost::assign::map_list_of<std::string, enum FeedbackType>
                ("Positive", Positive)
                ("Neutral", Neutral)
                ("Negative", Negative);

        const
        std::map<enum FeedbackType, std::string> _value_to_name_FeedbackType =
            bond::reverse_map(_name_to_value_FeedbackType);

        const std::string& ToString(enum FeedbackType value)
        {
            std::map<enum FeedbackType, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "FeedbackType");

            return it->second;
        }

        void FromString(const std::string& name, enum FeedbackType& value)
        {
            std::map<std::string, enum FeedbackType>::const_iterator it =
                _name_to_value_FeedbackType.find(name);

            if (_name_to_value_FeedbackType.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "FeedbackType");

            value = it->second;
        }

    } // namespace FeedbackType
    } // namespace _bond_enumerators

    
    namespace _bond_enumerators
    {
    namespace FeedbackStatus
    {
        const
        std::map<std::string, enum FeedbackStatus> _name_to_value_FeedbackStatus =
            boost::assign::map_list_of<std::string, enum FeedbackStatus>
                ("Draft", Draft)
                ("Submitted", Submitted);

        const
        std::map<enum FeedbackStatus, std::string> _value_to_name_FeedbackStatus =
            bond::reverse_map(_name_to_value_FeedbackStatus);

        const std::string& ToString(enum FeedbackStatus value)
        {
            std::map<enum FeedbackStatus, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "FeedbackStatus");

            return it->second;
        }

        void FromString(const std::string& name, enum FeedbackStatus& value)
        {
            std::map<std::string, enum FeedbackStatus>::const_iterator it =
                _name_to_value_FeedbackStatus.find(name);

            if (_name_to_value_FeedbackStatus.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "FeedbackStatus");

            value = it->second;
        }

    } // namespace FeedbackStatus
    } // namespace _bond_enumerators

    
    const bond::Metadata Preference::Schema::metadata
        = Preference::Schema::GetMetadata();
    
    const bond::Metadata Preference::Schema::s_Key_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Key");
    
    const bond::Metadata Preference::Schema::s_Value_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Value");

    
    const bond::Metadata Feedback::Schema::metadata
        = Feedback::Schema::GetMetadata();
    
    const bond::Metadata Feedback::Schema::s_Type_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Type");
    
    const bond::Metadata Feedback::Schema::s_Text_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Text");
    
    const bond::Metadata Feedback::Schema::s_PageName_metadata
        = bond::reflection::MetadataInit(bond::nothing, "PageName");
    
    const bond::Metadata Feedback::Schema::s_IsPageInfoIncluded_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsPageInfoIncluded");
    
    const bond::Metadata Feedback::Schema::s_IsUserInfoIncluded_metadata
        = bond::reflection::MetadataInit(bond::nothing, "IsUserInfoIncluded");
    
    const bond::Metadata Feedback::Schema::s_Status_metadata
        = bond::reflection::MetadataInit(bond::nothing, "Status");

    
    namespace _bond_enumerators
    {
    namespace UserType
    {
        const
        std::map<std::string, enum UserType> _name_to_value_UserType =
            boost::assign::map_list_of<std::string, enum UserType>
                ("FrontOffice", FrontOffice)
                ("MedicalStaff", MedicalStaff)
                ("Provider", Provider);

        const
        std::map<enum UserType, std::string> _value_to_name_UserType =
            bond::reverse_map(_name_to_value_UserType);

        const std::string& ToString(enum UserType value)
        {
            std::map<enum UserType, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                bond::InvalidEnumValueException(value, "UserType");

            return it->second;
        }

        void FromString(const std::string& name, enum UserType& value)
        {
            std::map<std::string, enum UserType>::const_iterator it =
                _name_to_value_UserType.find(name);

            if (_name_to_value_UserType.end() == it)
                bond::InvalidEnumValueException(name.c_str(), "UserType");

            value = it->second;
        }

    } // namespace UserType
    } // namespace _bond_enumerators

    
    const bond::Metadata User::Schema::metadata
        = User::Schema::GetMetadata();
    
    const bond::Metadata User::Schema::s_Preferences_metadata
        = bond::reflection::MetadataInit("Preferences");
    
    const bond::Metadata User::Schema::s_Feedback_metadata
        = bond::reflection::MetadataInit("Feedback");
    
    const bond::Metadata User::Schema::s_UserType_metadata
        = bond::reflection::MetadataInit(bond::nothing, "UserType");

    
} // namespace Schemas
} // namespace HealthCare
