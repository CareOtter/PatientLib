//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Examination_reflection.h>
#import <ExaminationDto.h>
#import <ObservationDto.h>

@implementation ExaminationDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Examination* castObj = (::Examination*)obj;
    if (!castObj->Id.is_nothing()) self.id =  [[NSString alloc] initWithUTF8String: castObj->Id.value().c_str()];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (!castObj->Name.is_nothing() && castObj->Name.value().hasvalue()) self.name =  [[NSString alloc] initWithUTF8String: castObj->Name.value().value().c_str()];
    if (!castObj->ExaminationDate.is_nothing() && castObj->ExaminationDate.value().hasvalue()) self.examinationDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->ExaminationDate.value().value()];
    if (!castObj->ExaminationType.is_nothing() && castObj->ExaminationType.value().hasvalue()) self.examinationType =  [[NSString alloc] initWithUTF8String: castObj->ExaminationType.value().value().c_str()];
    if(castObj->Observations.hasvalue()) {
      self.observations = [[NSMutableArray alloc] init];
      auto observationsCollection = castObj->Observations.value().Deserialize().Collection;
      for (auto it = observationsCollection.begin(); it != observationsCollection.end(); it++) {
        [self.observations addObject: [[ObservationDto alloc] initWithBondObject: &(*it)]];
      }
    }
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Name" ] && [dictionary objectForKey: @"Name"] != (id)[NSNull null]) {
      self.name = [dictionary objectForKey: @"Name"];
    }
    if ([dictionary.allKeys containsObject: @"ExaminationDate" ] && [dictionary objectForKey: @"ExaminationDate"] != (id)[NSNull null]) {
      self.examinationDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"ExaminationDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"ExaminationType" ] && [dictionary objectForKey: @"ExaminationType"] != (id)[NSNull null]) {
      self.examinationType = [dictionary objectForKey: @"ExaminationType"];
    }
    if ([dictionary.allKeys containsObject: @"Observations" ] && [dictionary objectForKey: @"Observations"] != (id)[NSNull null]) {
      self.observations = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Observations"] objectForKey: @"Collection"]) {
        [self.observations addObject: [[ObservationDto alloc] initWithJsonDictionary:item]];
      }
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Examination obj = CppBondSerializer<::Examination>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Examination* obj = new Examination();
  if (self.id != nil) obj->Id.set_value() = [self.id cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.name != nil) obj->Name.set_value().set([self.name cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.examinationDate != nil) obj->ExaminationDate.set_value().set([self.examinationDate timeIntervalSince1970]);
  if (self.examinationType != nil) obj->ExaminationType.set_value().set([self.examinationType cStringUsingEncoding:NSUTF8StringEncoding]);
  BaseItemCollection<::Observation> observationsCollection = BaseItemCollection<::Observation>();
  if (self.observations != nil) {
    for (ObservationDto* item in self.observations) {
      auto bondObj = *(::Observation*)[item toBondObject];
      observationsCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedobservationsCollection = CppBondSerializer<BaseItemCollection<Observation>>::getBondedObject(observationsCollection);
  obj->Observations.set(bondedobservationsCollection);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Examination*)[self toBondObject];
  return CppBondSerializer<::Examination>::serializeToByteArray(*obj, resultLen);
}

@end
