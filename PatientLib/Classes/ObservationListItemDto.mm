//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <BaseObservation_reflection.h>
#import <ObservationListItemDto.h>
#import <BasicRangeDto.h>

@implementation ObservationListItemDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::ObservationListItem* castObj = (::ObservationListItem*)obj;
    if (!castObj->IsActive.is_nothing() && castObj->IsActive.value().hasvalue()) self.isActive =  [[NSNumber alloc] initWithShort: castObj->IsActive.value().value()];
    if (!castObj->Value.is_nothing() && castObj->Value.value().hasvalue()) self.value =  [[NSString alloc] initWithUTF8String: castObj->Value.value().value().c_str()];
    if (!castObj->DisplaySequence.is_nothing() && castObj->DisplaySequence.value().hasvalue()) self.displaySequence =  [[NSNumber alloc] initWithShort: castObj->DisplaySequence.value().value()];
    if (!castObj->NumericEquivNum.is_nothing() && castObj->NumericEquivNum.value().hasvalue()) self.numericEquivNum =  [[NSNumber alloc] initWithShort: castObj->NumericEquivNum.value().value()];
    if (!castObj->IsHeader.is_nothing() && castObj->IsHeader.value().hasvalue()) self.isHeader =  [[NSNumber alloc] initWithShort: castObj->IsHeader.value().value()];
    if (!castObj->DisplayType.is_nothing() && castObj->DisplayType.value().hasvalue()) self.displayType =  [[NSString alloc] initWithUTF8String: castObj->DisplayType.value().value().c_str()];
    if (!castObj->ListValue.is_nothing() && castObj->ListValue.value().hasvalue()) self.listValue =  [[NSString alloc] initWithUTF8String: castObj->ListValue.value().value().c_str()];
    if (!castObj->SuggestedText.is_nothing() && castObj->SuggestedText.value().hasvalue()) self.suggestedText =  [[NSString alloc] initWithUTF8String: castObj->SuggestedText.value().value().c_str()];
    if (!castObj->ListItemRanges.is_nothing()) {
      self.listItemRanges = [[NSMutableArray alloc] init];
      for (auto it = castObj->ListItemRanges.value().begin(); it != castObj->ListItemRanges.value().end(); it++) {
        [self.listItemRanges addObject: [[BasicRangeDto alloc] initWithBondObject: &(*it)]];
      }
    }
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"IsActive" ] && [dictionary objectForKey: @"IsActive"] != (id)[NSNull null]) {
      self.isActive = [dictionary objectForKey: @"IsActive"];
    }
    if ([dictionary.allKeys containsObject: @"Value" ] && [dictionary objectForKey: @"Value"] != (id)[NSNull null]) {
      self.value = [dictionary objectForKey: @"Value"];
    }
    if ([dictionary.allKeys containsObject: @"DisplaySequence" ] && [dictionary objectForKey: @"DisplaySequence"] != (id)[NSNull null]) {
      self.displaySequence = [dictionary objectForKey: @"DisplaySequence"];
    }
    if ([dictionary.allKeys containsObject: @"NumericEquivNum" ] && [dictionary objectForKey: @"NumericEquivNum"] != (id)[NSNull null]) {
      self.numericEquivNum = [dictionary objectForKey: @"NumericEquivNum"];
    }
    if ([dictionary.allKeys containsObject: @"IsHeader" ] && [dictionary objectForKey: @"IsHeader"] != (id)[NSNull null]) {
      self.isHeader = [dictionary objectForKey: @"IsHeader"];
    }
    if ([dictionary.allKeys containsObject: @"DisplayType" ] && [dictionary objectForKey: @"DisplayType"] != (id)[NSNull null]) {
      self.displayType = [dictionary objectForKey: @"DisplayType"];
    }
    if ([dictionary.allKeys containsObject: @"ListValue" ] && [dictionary objectForKey: @"ListValue"] != (id)[NSNull null]) {
      self.listValue = [dictionary objectForKey: @"ListValue"];
    }
    if ([dictionary.allKeys containsObject: @"SuggestedText" ] && [dictionary objectForKey: @"SuggestedText"] != (id)[NSNull null]) {
      self.suggestedText = [dictionary objectForKey: @"SuggestedText"];
    }
    if ([dictionary.allKeys containsObject: @"ListItemRanges" ] && [dictionary objectForKey: @"ListItemRanges"] != (id)[NSNull null]) {
      self.listItemRanges = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [dictionary objectForKey: @"ListItemRanges"]) {
        [self.listItemRanges addObject: [[BasicRangeDto alloc] initWithJsonDictionary:item]];
      }
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::ObservationListItem obj = CppBondSerializer<::ObservationListItem>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::ObservationListItem* obj = new ObservationListItem();
  if (self.isActive != nil) obj->IsActive.set_value().set([self.isActive shortValue]);
  if (self.value != nil) obj->Value.set_value().set([self.value cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.displaySequence != nil) obj->DisplaySequence.set_value().set([self.displaySequence shortValue]);
  if (self.numericEquivNum != nil) obj->NumericEquivNum.set_value().set([self.numericEquivNum shortValue]);
  if (self.isHeader != nil) obj->IsHeader.set_value().set([self.isHeader shortValue]);
  if (self.displayType != nil) obj->DisplayType.set_value().set([self.displayType cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.listValue != nil) obj->ListValue.set_value().set([self.listValue cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.suggestedText != nil) obj->SuggestedText.set_value().set([self.suggestedText cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.listItemRanges != nil) {
    for (id item in self.listItemRanges) {
      obj->ListItemRanges.set_value().push_back(*(::BasicRange*)[item toBondObject]);
    }
  }
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::ObservationListItem*)[self toBondObject];
  return CppBondSerializer<::ObservationListItem>::serializeToByteArray(*obj, resultLen);
}

@end
