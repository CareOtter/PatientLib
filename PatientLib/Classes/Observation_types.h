
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : Observation_types.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include <bond/core/bond_version.h>

#if BOND_VERSION < 0x302
#error This file was generated by a newer version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#if BOND_MIN_CODEGEN_VERSION > 0x0305
#error This file was generated by an older version of Bond compiler
#error and is incompatible with your version Bond library.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>


#include "BaseClasses_types.h"
#include "Measurement_types.h"
#include "ImageResource_types.h"

namespace HealthCare
{
namespace Schemas
{
    
    namespace _bond_enumerators
    {
    namespace NormalityFlag
    {
        enum NormalityFlag
        {
            Normal,
            Abnormal,
            High,
            Low,
            AbnormalHigh,
            AbnormalLow
        };
        
        extern const std::map<enum NormalityFlag, std::string> _value_to_name_NormalityFlag;
        extern const std::map<std::string, enum NormalityFlag> _name_to_value_NormalityFlag;

        inline
        const char* GetTypeName(enum NormalityFlag)
        {
            return "NormalityFlag";
        }

        inline
        const char* GetTypeName(enum NormalityFlag, const bond::qualified_name_tag&)
        {
            return "HealthCare.Schemas.NormalityFlag";
        }

        inline
        const std::map<enum NormalityFlag, std::string>& GetValueToNameMap(enum NormalityFlag)
        {
            return _value_to_name_NormalityFlag;
        }

        inline
        const std::map<std::string, enum NormalityFlag>& GetNameToValueMap(enum NormalityFlag)
        {
            return _name_to_value_NormalityFlag;
        }

        const std::string& ToString(enum NormalityFlag value);

        void FromString(const std::string& name, enum NormalityFlag& value);

        inline
        bool ToEnum(enum NormalityFlag& value, const std::string& name)
        {
            std::map<std::string, enum NormalityFlag>::const_iterator it =
                _name_to_value_NormalityFlag.find(name);

            if (_name_to_value_NormalityFlag.end() == it)
                return false;

            value = it->second;

            return true;
        }
    } // namespace NormalityFlag
    } // namespace _bond_enumerators

    using namespace _bond_enumerators::NormalityFlag;
    

    
    struct Observation
      : ::HealthCare::Schemas::BaseClinicalItem
    {
        bond::maybe<bond::nullable<int64_t> > ObservationDate;
        bond::maybe<std::vector< ::HealthCare::Schemas::Measurement> > Measurements;
        bond::maybe<bond::nullable<int64_t> > ObservationDescriptionId;
        bond::maybe<bond::nullable<std::string> > ObservationGroupName;
        
        Observation()
        {
        }

        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated copy ctor OK
        Observation(const Observation& other) = default;
#endif
        
#ifndef BOND_NO_CXX11_RVALUE_REFERENCES
        Observation(Observation&& other)
          : ::HealthCare::Schemas::BaseClinicalItem(std::move(other)),
            ObservationDate(std::move(other.ObservationDate)),
            Measurements(std::move(other.Measurements)),
            ObservationDescriptionId(std::move(other.ObservationDescriptionId)),
            ObservationGroupName(std::move(other.ObservationGroupName))
        {
        }
#endif
        
        
#ifndef BOND_NO_CXX11_DEFAULTED_FUNCTIONS
        // Compiler generated operator= OK
        Observation& operator=(const Observation& other) = default;
#endif

        bool operator==(const Observation& other) const
        {
            return true
                && (static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>(*this) == static_cast<const ::HealthCare::Schemas::BaseClinicalItem&>( other))
                && (ObservationDate == other.ObservationDate)
                && (Measurements == other.Measurements)
                && (ObservationDescriptionId == other.ObservationDescriptionId)
                && (ObservationGroupName == other.ObservationGroupName);
        }

        bool operator!=(const Observation& other) const
        {
            return !(*this == other);
        }

        void swap(Observation& other)
        {
            using std::swap;
            ::HealthCare::Schemas::BaseClinicalItem::swap( other);
            swap(ObservationDate, other.ObservationDate);
            swap(Measurements, other.Measurements);
            swap(ObservationDescriptionId, other.ObservationDescriptionId);
            swap(ObservationGroupName, other.ObservationGroupName);
        }

        struct Schema;

    protected:
        void InitMetadata(const char* name, const char* qualified_name)
        {
            ::HealthCare::Schemas::BaseClinicalItem::InitMetadata(name, qualified_name);
        }
    };

    inline void swap(Observation& left, Observation& right)
    {
        left.swap(right);
    }
} // namespace Schemas
} // namespace HealthCare

