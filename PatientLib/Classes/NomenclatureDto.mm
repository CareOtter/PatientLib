//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <BaseClasses_reflection.h>
#import <NomenclatureDto.h>

@implementation NomenclatureDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Nomenclature* castObj = (::Nomenclature*)obj;
    if (!castObj->Type.is_nothing() && castObj->Type.value().hasvalue()) self.type =  [[NSNumber alloc] initWithInt: castObj->Type.value().value()];
    if (!castObj->Code.is_nothing() && castObj->Code.value().hasvalue()) self.code =  [[NSString alloc] initWithUTF8String: castObj->Code.value().value().c_str()];
    if (!castObj->Name.is_nothing() && castObj->Name.value().hasvalue()) self.name =  [[NSString alloc] initWithUTF8String: castObj->Name.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Type" ] && [dictionary objectForKey: @"Type"] != (id)[NSNull null]) {
      self.typeStringValue = [dictionary objectForKey: @"Type"];
    }
    if ([dictionary.allKeys containsObject: @"Code" ] && [dictionary objectForKey: @"Code"] != (id)[NSNull null]) {
      self.code = [dictionary objectForKey: @"Code"];
    }
    if ([dictionary.allKeys containsObject: @"Name" ] && [dictionary objectForKey: @"Name"] != (id)[NSNull null]) {
      self.name = [dictionary objectForKey: @"Name"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Nomenclature obj = CppBondSerializer<::Nomenclature>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Nomenclature* obj = new Nomenclature();
  if (self.type != nil) obj->Type.set_value().set(static_cast<::NomenclatureType>([self.type intValue]));
  if (self.code != nil) obj->Code.set_value().set([self.code cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.name != nil) obj->Name.set_value().set([self.name cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Nomenclature*)[self toBondObject];
  return CppBondSerializer<::Nomenclature>::serializeToByteArray(*obj, resultLen);
}

@end
