//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Order_reflection.h>
#import <OrderDto.h>
#import <NomenclatureDto.h>
#import <ObservationDto.h>

@implementation OrderDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Order* castObj = (::Order*)obj;
    if (!castObj->Id.is_nothing()) self.id =  [[NSString alloc] initWithUTF8String: castObj->Id.value().c_str()];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (!castObj->Name.is_nothing()) self.name =  [[NSString alloc] initWithUTF8String: castObj->Name.value().c_str()];
    if (!castObj->Status.is_nothing()) self.status =  [[NSString alloc] initWithUTF8String: castObj->Status.value().c_str()];
      self.nomenclatureIds = [[NSMutableArray alloc] init];
      for (auto it = castObj->NomenclatureIds.begin(); it != castObj->NomenclatureIds.end(); it++) {
        [self.nomenclatureIds addObject: [[NomenclatureDto alloc] initWithBondObject: &(*it)]];
      }
    if (!castObj->ClinicalDescription.is_nothing()) self.clinicalDescription =  [[NSString alloc] initWithUTF8String: castObj->ClinicalDescription.value().c_str()];
    if (!castObj->ReportingSource.is_nothing()) self.reportingSource =  [[NSString alloc] initWithUTF8String: castObj->ReportingSource.value().c_str()];
    if (!castObj->Comments.is_nothing()) self.comments =  [[NSString alloc] initWithUTF8String: castObj->Comments.value().c_str()];
    if (!castObj->OrderDate.is_nothing() && castObj->OrderDate.value().hasvalue()) self.orderDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->OrderDate.value().value()];
    if(castObj->Results.hasvalue()) {
      self.results = [[NSMutableArray alloc] init];
      auto resultsCollection = castObj->Results.value().Deserialize().Collection;
      for (auto it = resultsCollection.begin(); it != resultsCollection.end(); it++) {
        [self.results addObject: [[ObservationDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if (!castObj->ScheduledDate.is_nothing() && castObj->ScheduledDate.value().hasvalue()) self.scheduledDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->ScheduledDate.value().value()];
    if (!castObj->Priority.is_nothing() && castObj->Priority.value().hasvalue()) self.priority =  [[NSNumber alloc] initWithInt: castObj->Priority.value().value()];
    if (!castObj->OrderingProvider.is_nothing() && castObj->OrderingProvider.value().hasvalue()) self.orderingProvider =  [[NSNumber alloc] initWithLongLong: castObj->OrderingProvider.value().value()];
    if (!castObj->OrderType.is_nothing() && castObj->OrderType.value().hasvalue()) self.orderType =  [[NSNumber alloc] initWithInt: castObj->OrderType.value().value()];
    if (!castObj->PerformingFacility.is_nothing() && castObj->PerformingFacility.value().hasvalue()) self.performingFacility =  [[NSString alloc] initWithUTF8String: castObj->PerformingFacility.value().value().c_str()];
    if (!castObj->CopyTo.is_nothing() && castObj->CopyTo.value().hasvalue()) self.cpyTo =  [[NSString alloc] initWithUTF8String: castObj->CopyTo.value().value().c_str()];
    if (!castObj->OrderItemSpecificInformation.is_nothing() && castObj->OrderItemSpecificInformation.value().hasvalue()) self.orderItemSpecificInformation =  [[NSString alloc] initWithUTF8String: castObj->OrderItemSpecificInformation.value().value().c_str()];
    if (!castObj->CollectionInfo.is_nothing() && castObj->CollectionInfo.value().hasvalue()) self.collectionInfo =  [[NSString alloc] initWithUTF8String: castObj->CollectionInfo.value().value().c_str()];
    if (!castObj->PatientInstructions.is_nothing() && castObj->PatientInstructions.value().hasvalue()) self.patientInstructions =  [[NSString alloc] initWithUTF8String: castObj->PatientInstructions.value().value().c_str()];
    if (!castObj->PerformingFacilityInstructions.is_nothing() && castObj->PerformingFacilityInstructions.value().hasvalue()) self.performingFacilityInstructions =  [[NSString alloc] initWithUTF8String: castObj->PerformingFacilityInstructions.value().value().c_str()];
    if (!castObj->OrderingProviderName.is_nothing() && castObj->OrderingProviderName.value().hasvalue()) self.orderingProviderName =  [[NSString alloc] initWithUTF8String: castObj->OrderingProviderName.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Name" ] && [dictionary objectForKey: @"Name"] != (id)[NSNull null]) {
      self.name = [dictionary objectForKey: @"Name"];
    }
    if ([dictionary.allKeys containsObject: @"Status" ] && [dictionary objectForKey: @"Status"] != (id)[NSNull null]) {
      self.status = [dictionary objectForKey: @"Status"];
    }
    if ([dictionary.allKeys containsObject: @"NomenclatureIds" ] && [dictionary objectForKey: @"NomenclatureIds"] != (id)[NSNull null]) {
      self.nomenclatureIds = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [dictionary objectForKey: @"NomenclatureIds"]) {
        [self.nomenclatureIds addObject: [[NomenclatureDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"ClinicalDescription" ] && [dictionary objectForKey: @"ClinicalDescription"] != (id)[NSNull null]) {
      self.clinicalDescription = [dictionary objectForKey: @"ClinicalDescription"];
    }
    if ([dictionary.allKeys containsObject: @"ReportingSource" ] && [dictionary objectForKey: @"ReportingSource"] != (id)[NSNull null]) {
      self.reportingSource = [dictionary objectForKey: @"ReportingSource"];
    }
    if ([dictionary.allKeys containsObject: @"Comments" ] && [dictionary objectForKey: @"Comments"] != (id)[NSNull null]) {
      self.comments = [dictionary objectForKey: @"Comments"];
    }
    if ([dictionary.allKeys containsObject: @"OrderDate" ] && [dictionary objectForKey: @"OrderDate"] != (id)[NSNull null]) {
      self.orderDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"OrderDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Results" ] && [dictionary objectForKey: @"Results"] != (id)[NSNull null]) {
      self.results = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"Results"] objectForKey: @"Collection"]) {
        [self.results addObject: [[ObservationDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"ScheduledDate" ] && [dictionary objectForKey: @"ScheduledDate"] != (id)[NSNull null]) {
      self.scheduledDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"ScheduledDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"Priority" ] && [dictionary objectForKey: @"Priority"] != (id)[NSNull null]) {
      self.priorityStringValue = [dictionary objectForKey: @"Priority"];
    }
    if ([dictionary.allKeys containsObject: @"OrderingProvider" ] && [dictionary objectForKey: @"OrderingProvider"] != (id)[NSNull null]) {
      self.orderingProvider = [dictionary objectForKey: @"OrderingProvider"];
    }
    if ([dictionary.allKeys containsObject: @"OrderType" ] && [dictionary objectForKey: @"OrderType"] != (id)[NSNull null]) {
      self.orderTypeStringValue = [dictionary objectForKey: @"OrderType"];
    }
    if ([dictionary.allKeys containsObject: @"PerformingFacility" ] && [dictionary objectForKey: @"PerformingFacility"] != (id)[NSNull null]) {
      self.performingFacility = [dictionary objectForKey: @"PerformingFacility"];
    }
    if ([dictionary.allKeys containsObject: @"CopyTo" ] && [dictionary objectForKey: @"CopyTo"] != (id)[NSNull null]) {
      self.cpyTo = [dictionary objectForKey: @"CopyTo"];
    }
    if ([dictionary.allKeys containsObject: @"OrderItemSpecificInformation" ] && [dictionary objectForKey: @"OrderItemSpecificInformation"] != (id)[NSNull null]) {
      self.orderItemSpecificInformation = [dictionary objectForKey: @"OrderItemSpecificInformation"];
    }
    if ([dictionary.allKeys containsObject: @"CollectionInfo" ] && [dictionary objectForKey: @"CollectionInfo"] != (id)[NSNull null]) {
      self.collectionInfo = [dictionary objectForKey: @"CollectionInfo"];
    }
    if ([dictionary.allKeys containsObject: @"PatientInstructions" ] && [dictionary objectForKey: @"PatientInstructions"] != (id)[NSNull null]) {
      self.patientInstructions = [dictionary objectForKey: @"PatientInstructions"];
    }
    if ([dictionary.allKeys containsObject: @"PerformingFacilityInstructions" ] && [dictionary objectForKey: @"PerformingFacilityInstructions"] != (id)[NSNull null]) {
      self.performingFacilityInstructions = [dictionary objectForKey: @"PerformingFacilityInstructions"];
    }
    if ([dictionary.allKeys containsObject: @"OrderingProviderName" ] && [dictionary objectForKey: @"OrderingProviderName"] != (id)[NSNull null]) {
      self.orderingProviderName = [dictionary objectForKey: @"OrderingProviderName"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Order obj = CppBondSerializer<::Order>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Order* obj = new Order();
  if (self.id != nil) obj->Id.set_value() = [self.id cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.name != nil) obj->Name.set_value() = [self.name cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.status != nil) obj->Status.set_value() = [self.status cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.nomenclatureIds != nil) {
    for (id item in self.nomenclatureIds) {
      obj->NomenclatureIds.push_back(*(::Nomenclature*)[item toBondObject]);
    }
  }
  if (self.clinicalDescription != nil) obj->ClinicalDescription.set_value() = [self.clinicalDescription cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.reportingSource != nil) obj->ReportingSource.set_value() = [self.reportingSource cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.comments != nil) obj->Comments.set_value() = [self.comments cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.orderDate != nil) obj->OrderDate.set_value().set([self.orderDate timeIntervalSince1970]);
  BaseItemCollection<::Observation> resultsCollection = BaseItemCollection<::Observation>();
  if (self.results != nil) {
    for (ObservationDto* item in self.results) {
      auto bondObj = *(::Observation*)[item toBondObject];
      resultsCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedresultsCollection = CppBondSerializer<BaseItemCollection<Observation>>::getBondedObject(resultsCollection);
  obj->Results.set(bondedresultsCollection);
  if (self.scheduledDate != nil) obj->ScheduledDate.set_value().set([self.scheduledDate timeIntervalSince1970]);
  if (self.priority != nil) obj->Priority.set_value().set(static_cast<::OrderPriority>([self.priority intValue]));
  if (self.orderingProvider != nil) obj->OrderingProvider.set_value().set([self.orderingProvider longValue]);
  if (self.orderType != nil) obj->OrderType.set_value().set(static_cast<::OrderType>([self.orderType intValue]));
  if (self.performingFacility != nil) obj->PerformingFacility.set_value().set([self.performingFacility cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.cpyTo != nil) obj->CopyTo.set_value().set([self.cpyTo cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.orderItemSpecificInformation != nil) obj->OrderItemSpecificInformation.set_value().set([self.orderItemSpecificInformation cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.collectionInfo != nil) obj->CollectionInfo.set_value().set([self.collectionInfo cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.patientInstructions != nil) obj->PatientInstructions.set_value().set([self.patientInstructions cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.performingFacilityInstructions != nil) obj->PerformingFacilityInstructions.set_value().set([self.performingFacilityInstructions cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.orderingProviderName != nil) obj->OrderingProviderName.set_value().set([self.orderingProviderName cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Order*)[self toBondObject];
  return CppBondSerializer<::Order>::serializeToByteArray(*obj, resultLen);
}

@end
