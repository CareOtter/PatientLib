//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Appointment_reflection.h>
#import <AppointmentDto.h>

@implementation AppointmentDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Appointment* castObj = (::Appointment*)obj;
    self.id = [[NSNumber alloc] initWithLongLong: castObj->Id];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (!castObj->StartDate.is_nothing() && castObj->StartDate.value().hasvalue()) self.startDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->StartDate.value().value()];
    if (!castObj->DurationMinutes.is_nothing() && castObj->DurationMinutes.value().hasvalue()) self.durationMinutes =  [[NSNumber alloc] initWithLongLong: castObj->DurationMinutes.value().value()];
    if (!castObj->Status.is_nothing() && castObj->Status.value().hasvalue()) self.status =  [[NSNumber alloc] initWithInt: castObj->Status.value().value()];
    if (!castObj->ReasonForAppointment.is_nothing() && castObj->ReasonForAppointment.value().hasvalue()) self.reasonForAppointment =  [[NSString alloc] initWithUTF8String: castObj->ReasonForAppointment.value().value().c_str()];
    if (!castObj->AppointmentType.is_nothing() && castObj->AppointmentType.value().hasvalue()) self.appointmentType =  [[NSString alloc] initWithUTF8String: castObj->AppointmentType.value().value().c_str()];
    if (!castObj->RoomName.is_nothing() && castObj->RoomName.value().hasvalue()) self.roomName =  [[NSString alloc] initWithUTF8String: castObj->RoomName.value().value().c_str()];
    if (!castObj->NoteId.is_nothing() && castObj->NoteId.value().hasvalue()) self.noteId =  [[NSString alloc] initWithUTF8String: castObj->NoteId.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"StartDate" ] && [dictionary objectForKey: @"StartDate"] != (id)[NSNull null]) {
      self.startDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"StartDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"DurationMinutes" ] && [dictionary objectForKey: @"DurationMinutes"] != (id)[NSNull null]) {
      self.durationMinutes = [dictionary objectForKey: @"DurationMinutes"];
    }
    if ([dictionary.allKeys containsObject: @"Status" ] && [dictionary objectForKey: @"Status"] != (id)[NSNull null]) {
      self.statusStringValue = [dictionary objectForKey: @"Status"];
    }
    if ([dictionary.allKeys containsObject: @"ReasonForAppointment" ] && [dictionary objectForKey: @"ReasonForAppointment"] != (id)[NSNull null]) {
      self.reasonForAppointment = [dictionary objectForKey: @"ReasonForAppointment"];
    }
    if ([dictionary.allKeys containsObject: @"AppointmentType" ] && [dictionary objectForKey: @"AppointmentType"] != (id)[NSNull null]) {
      self.appointmentType = [dictionary objectForKey: @"AppointmentType"];
    }
    if ([dictionary.allKeys containsObject: @"RoomName" ] && [dictionary objectForKey: @"RoomName"] != (id)[NSNull null]) {
      self.roomName = [dictionary objectForKey: @"RoomName"];
    }
    if ([dictionary.allKeys containsObject: @"NoteId" ] && [dictionary objectForKey: @"NoteId"] != (id)[NSNull null]) {
      self.noteId = [dictionary objectForKey: @"NoteId"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Appointment obj = CppBondSerializer<::Appointment>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Appointment* obj = new Appointment();
  if (self.id != nil) obj->Id = [self.id longValue];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.startDate != nil) obj->StartDate.set_value().set([self.startDate timeIntervalSince1970]);
  if (self.durationMinutes != nil) obj->DurationMinutes.set_value().set([self.durationMinutes longValue]);
  if (self.status != nil) obj->Status.set_value().set(static_cast<::AppointmentStatus>([self.status intValue]));
  if (self.reasonForAppointment != nil) obj->ReasonForAppointment.set_value().set([self.reasonForAppointment cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.appointmentType != nil) obj->AppointmentType.set_value().set([self.appointmentType cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.roomName != nil) obj->RoomName.set_value().set([self.roomName cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.noteId != nil) obj->NoteId.set_value().set([self.noteId cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Appointment*)[self toBondObject];
  return CppBondSerializer<::Appointment>::serializeToByteArray(*obj, resultLen);
}

@end
