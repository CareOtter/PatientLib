
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : InteractionSchema_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "InteractionSchema_types.h"
#include <bond/core/reflection.h>
#include "BaseClasses_reflection.h"

namespace HealthCare
{
namespace Schemas
{
    //
    // CodeValue
    //
    struct CodeValue::Schema
    {
        typedef ::HealthCare::Schemas::BaseItem base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_Code_metadata;

        public: struct var
        {
            // Code
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                CodeValue,
                bond::maybe<bond::nullable<std::string> >,
                &CodeValue::Code,
                &s_Code_metadata
            > Code;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::Code>::type fields1;

        public: typedef fields1::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("CodeValue", "HealthCare.Schemas.CodeValue",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // InteractionVerbCodeValue
    //
    struct InteractionVerbCodeValue::Schema
    {
        typedef ::HealthCare::Schemas::CodeValue base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_Verb_metadata;
        private: static const bond::Metadata s_Alternate_metadata;

        public: struct var
        {
            // Verb
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                InteractionVerbCodeValue,
                bond::maybe<bond::nullable<std::string> >,
                &InteractionVerbCodeValue::Verb,
                &s_Verb_metadata
            > Verb;
        
            // Alternate
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                InteractionVerbCodeValue,
                bond::maybe<bond::nullable<std::string> >,
                &InteractionVerbCodeValue::Alternate,
                &s_Alternate_metadata
            > Alternate;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::Alternate>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::Verb>::type fields2;

        public: typedef fields2::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("InteractionVerbCodeValue", "HealthCare.Schemas.InteractionVerbCodeValue",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // RelationshipTypeCodeValue
    //
    struct RelationshipTypeCodeValue::Schema
    {
        typedef ::HealthCare::Schemas::CodeValue base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_Name_metadata;

        public: struct var
        {
            // Name
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                RelationshipTypeCodeValue,
                bond::maybe<bond::nullable<std::string> >,
                &RelationshipTypeCodeValue::Name,
                &s_Name_metadata
            > Name;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::Name>::type fields1;

        public: typedef fields1::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("RelationshipTypeCodeValue", "HealthCare.Schemas.RelationshipTypeCodeValue",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // InteractionTypeCodeValue
    //
    struct InteractionTypeCodeValue::Schema
    {
        typedef ::HealthCare::Schemas::CodeValue base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_InteractionVerb_metadata;
        private: static const bond::Metadata s_RelationshipType_metadata;
        private: static const bond::Metadata s_AppliesToStartNodeType_metadata;
        private: static const bond::Metadata s_AppliesToEndNodeType_metadata;
        private: static const bond::Metadata s_IsRelationshipEstablisher_metadata;

        public: struct var
        {
            // InteractionVerb
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                InteractionTypeCodeValue,
                bond::maybe<bond::nullable< ::HealthCare::Schemas::InteractionVerbCodeValue> >,
                &InteractionTypeCodeValue::InteractionVerb,
                &s_InteractionVerb_metadata
            > InteractionVerb;
        
            // RelationshipType
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::optional_field_modifier,
                InteractionTypeCodeValue,
                bond::maybe<bond::nullable< ::HealthCare::Schemas::RelationshipTypeCodeValue> >,
                &InteractionTypeCodeValue::RelationshipType,
                &s_RelationshipType_metadata
            > RelationshipType;
        
            // AppliesToStartNodeType
            typedef bond::reflection::FieldTemplate<
                4,
                bond::reflection::optional_field_modifier,
                InteractionTypeCodeValue,
                bond::maybe<bond::nullable< ::HealthCare::Schemas::ItemType> >,
                &InteractionTypeCodeValue::AppliesToStartNodeType,
                &s_AppliesToStartNodeType_metadata
            > AppliesToStartNodeType;
        
            // AppliesToEndNodeType
            typedef bond::reflection::FieldTemplate<
                5,
                bond::reflection::optional_field_modifier,
                InteractionTypeCodeValue,
                bond::maybe<bond::nullable< ::HealthCare::Schemas::ItemType> >,
                &InteractionTypeCodeValue::AppliesToEndNodeType,
                &s_AppliesToEndNodeType_metadata
            > AppliesToEndNodeType;
        
            // IsRelationshipEstablisher
            typedef bond::reflection::FieldTemplate<
                6,
                bond::reflection::optional_field_modifier,
                InteractionTypeCodeValue,
                bond::maybe<bond::nullable<bool> >,
                &InteractionTypeCodeValue::IsRelationshipEstablisher,
                &s_IsRelationshipEstablisher_metadata
            > IsRelationshipEstablisher;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::IsRelationshipEstablisher>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::AppliesToEndNodeType>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::AppliesToStartNodeType>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::RelationshipType>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::InteractionVerb>::type fields5;

        public: typedef fields5::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("InteractionTypeCodeValue", "HealthCare.Schemas.InteractionTypeCodeValue",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Interaction
    //
    struct Interaction::Schema
    {
        typedef ::HealthCare::Schemas::BaseItem base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_StartNode_metadata;
        private: static const bond::Metadata s_EndNode_metadata;
        private: static const bond::Metadata s_Type_metadata;

        public: struct var
        {
            // StartNode
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                Interaction,
                bond::maybe<bond::nullable<int64_t> >,
                &Interaction::StartNode,
                &s_StartNode_metadata
            > StartNode;
        
            // EndNode
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                Interaction,
                bond::maybe<bond::nullable<int64_t> >,
                &Interaction::EndNode,
                &s_EndNode_metadata
            > EndNode;
        
            // Type
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                Interaction,
                bond::maybe<bond::nullable< ::HealthCare::Schemas::InteractionTypeCodeValue> >,
                &Interaction::Type,
                &s_Type_metadata
            > Type;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::Type>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::EndNode>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::StartNode>::type fields3;

        public: typedef fields3::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("Interaction", "HealthCare.Schemas.Interaction",
                bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace Schemas
} // namespace HealthCare
