//***************************************************
// This code was generated by a tool.  Do not modify.
//***************************************************

#import <Foundation/Foundation.h>
#import "CppBondSerializer.h"
#import <Note_reflection.h>
#import <NoteDto.h>
#import <NoteReferenceDto.h>
#import <HealthRecordDto.h>

@implementation NoteDto

- (instancetype)initWithBondObject:(void*)obj {
  if (self = [super init]) {
    ::Note* castObj = (::Note*)obj;
    if (!castObj->Id.is_nothing()) self.id =  [[NSString alloc] initWithUTF8String: castObj->Id.value().c_str()];
    if (!castObj->CreatedDate.is_nothing()) self.createdDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->CreatedDate.value()];
    if (!castObj->LastModifiedDate.is_nothing()) self.lastModifiedDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->LastModifiedDate.value()];
    if (!castObj->NoteStatus.is_nothing() && castObj->NoteStatus.value().hasvalue()) self.noteStatus =  [[NSNumber alloc] initWithInt: castObj->NoteStatus.value().value()];
    if (!castObj->NoteDate.is_nothing() && castObj->NoteDate.value().hasvalue()) self.noteDate =  [[NSDate alloc] initWithTimeIntervalSince1970: castObj->NoteDate.value().value()];
    if(castObj->References.hasvalue()) {
      self.references = [[NSMutableArray alloc] init];
      auto referencesCollection = castObj->References.value().Deserialize().Collection;
      for (auto it = referencesCollection.begin(); it != referencesCollection.end(); it++) {
        [self.references addObject: [[NoteReferenceDto alloc] initWithBondObject: &(*it)]];
      }
    }
    if (!castObj->HealthRecordSnapshot.is_nothing() && castObj->HealthRecordSnapshot.value().hasvalue()) self.healthRecordSnapshot =  [[HealthRecordDto alloc] initWithBondObject: &(castObj->HealthRecordSnapshot.value().value())];
    if (!castObj->Comments.is_nothing() && castObj->Comments.value().hasvalue()) self.comments =  [[NSString alloc] initWithUTF8String: castObj->Comments.value().value().c_str()];
    if (!castObj->ChiefComplaint.is_nothing() && castObj->ChiefComplaint.value().hasvalue()) self.chiefComplaint =  [[NSString alloc] initWithUTF8String: castObj->ChiefComplaint.value().value().c_str()];
  }
  return self;
}

- (instancetype) initWithJson: (NSString*)json {
  NSError* error = nil;
  NSData* jsonData = [json dataUsingEncoding:NSUTF8StringEncoding];
  id jsonDictionary = [NSJSONSerialization JSONObjectWithData:jsonData options: kNilOptions error: &error];

  if (error != nil) {
    if (error.code == 3840) return [super init]; // No Data
    return nil;
  }
  if (![jsonDictionary isKindOfClass:[NSDictionary class]]) return nil;
  return [self initWithJsonDictionary: jsonDictionary];
}

- (instancetype) initWithJsonDictionary: (NSDictionary*)dictionary {
  if (self = [super init]) {
    if ([dictionary.allKeys containsObject: @"Id" ] && [dictionary objectForKey: @"Id"] != (id)[NSNull null]) {
      self.id = [dictionary objectForKey: @"Id"];
    }
    if ([dictionary.allKeys containsObject: @"CreatedDate" ] && [dictionary objectForKey: @"CreatedDate"] != (id)[NSNull null]) {
      self.createdDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"CreatedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"LastModifiedDate" ] && [dictionary objectForKey: @"LastModifiedDate"] != (id)[NSNull null]) {
      self.lastModifiedDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"LastModifiedDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"NoteStatus" ] && [dictionary objectForKey: @"NoteStatus"] != (id)[NSNull null]) {
      self.noteStatusStringValue = [dictionary objectForKey: @"NoteStatus"];
    }
    if ([dictionary.allKeys containsObject: @"NoteDate" ] && [dictionary objectForKey: @"NoteDate"] != (id)[NSNull null]) {
      self.noteDate = [[NSDate alloc] initWithTimeIntervalSince1970: [[dictionary objectForKey: @"NoteDate"] longValue]];
    }
    if ([dictionary.allKeys containsObject: @"References" ] && [dictionary objectForKey: @"References"] != (id)[NSNull null]) {
      self.references = [[NSMutableArray alloc] init];
      for (NSDictionary* item in [[dictionary objectForKey: @"References"] objectForKey: @"Collection"]) {
        [self.references addObject: [[NoteReferenceDto alloc] initWithJsonDictionary:item]];
      }
    }
    if ([dictionary.allKeys containsObject: @"HealthRecordSnapshot" ] && [dictionary objectForKey: @"HealthRecordSnapshot"] != (id)[NSNull null]) {
      self.healthRecordSnapshot = [[HealthRecordDto alloc] initWithJsonDictionary:[dictionary objectForKey: @"HealthRecordSnapshot"]];
    }
    if ([dictionary.allKeys containsObject: @"Comments" ] && [dictionary objectForKey: @"Comments"] != (id)[NSNull null]) {
      self.comments = [dictionary objectForKey: @"Comments"];
    }
    if ([dictionary.allKeys containsObject: @"ChiefComplaint" ] && [dictionary objectForKey: @"ChiefComplaint"] != (id)[NSNull null]) {
      self.chiefComplaint = [dictionary objectForKey: @"ChiefComplaint"];
    }
  }
  return self;
}

- (instancetype)initWithByteArray: (uint8_t*)byteArray length:(uint32_t)len {
  ::Note obj = CppBondSerializer<::Note>::deserializeFromByteArray(byteArray, len);
  return [self initWithBondObject: &obj];
}

- (void*)toBondObject {
  ::Note* obj = new Note();
  if (self.id != nil) obj->Id.set_value() = [self.id cStringUsingEncoding:NSUTF8StringEncoding];
  if (self.createdDate != nil) obj->CreatedDate.set_value() = [self.createdDate timeIntervalSince1970];
  if (self.lastModifiedDate != nil) obj->LastModifiedDate.set_value() = [self.lastModifiedDate timeIntervalSince1970];
  if (self.noteStatus != nil) obj->NoteStatus.set_value().set(static_cast<::NoteStatus>([self.noteStatus intValue]));
  if (self.noteDate != nil) obj->NoteDate.set_value().set([self.noteDate timeIntervalSince1970]);
  BaseItemCollection<::NoteReference> referencesCollection = BaseItemCollection<::NoteReference>();
  if (self.references != nil) {
    for (NoteReferenceDto* item in self.references) {
      auto bondObj = *(::NoteReference*)[item toBondObject];
      referencesCollection.Collection.push_back(bondObj);
    }
  }
  auto bondedreferencesCollection = CppBondSerializer<BaseItemCollection<NoteReference>>::getBondedObject(referencesCollection);
  obj->References.set(bondedreferencesCollection);
  if (self.healthRecordSnapshot != nil) obj->HealthRecordSnapshot.set_value().set(*(::HealthRecord*)[self.healthRecordSnapshot toBondObject]);
  if (self.comments != nil) obj->Comments.set_value().set([self.comments cStringUsingEncoding:NSUTF8StringEncoding]);
  if (self.chiefComplaint != nil) obj->ChiefComplaint.set_value().set([self.chiefComplaint cStringUsingEncoding:NSUTF8StringEncoding]);
  return obj;
}

-(const uint8_t*) toByteArray: (uint32_t*)resultLen {
  auto obj = (::Note*)[self toBondObject];
  return CppBondSerializer<::Note>::serializeToByteArray(*obj, resultLen);
}

@end
